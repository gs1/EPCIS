openapi: "3.0.3"
info:
  version: 2.0.0
  title: EPCIS 2.0 REST Bindings
  license:
    name: Apache2

tags:
  - name: 'Discovery'
    description: |
      Endpoints to obtain information about the endpoint, such as EPCIS and CBV versions or custom vocabularies..
  - name: 'Capture'
    description: |
      Endpoints to capture EPCIS events in bulk or individually.
  - name: 'Top-level Resources'
    description: |
      Endpoints to browse EPCIS events by six common top-level resources:

      - electronic product codes
      - business steps
      - business locations
      - read points
      - dispositions
      
  - name: 'Events'
    description: |
      Endpoints that expose EPCIS events as Web resources.
  - name: 'Master Data'
    description: |
      Endpoints to create master data queries and subscribe to those queries.
  - name: 'Queries'
    description: |
      Endpoints to create large named or anonymous queries using the EPCIS query language. Named queries have a custom
      name and are stored until deleted by the user. Anonymous queries are not persisted and only available to the caller.
      EPCIS events queries also support query subscription.
  - name: 'Subscriptions'
    description: |
      EPCIS 2.0 supports query subscriptions with using Webhooks or Websockets.

paths:
  /:
    options:
      tags:
        - 'Discovery'
      summary: Query server settings, EPCIS version(s) and related vocabularies/standards.
      description: |
        `OPTIONS` on the root path gives the client an overview of the server's EPCIS-related configurations.
      responses:
        '204':
          description: Server can comply with the GS1-EPCIS related requirements from the client.
          headers:
            Allow:
              schema:
                example: OPTIONS
                type: string
                default: OPTIONS
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-Vendor-Version:
              $ref: '#/components/headers/GS1-Vendor-Version'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
            GS1-EPCIS-Capture-Limit:
              $ref: '#/components/headers/GS1-EPCIS-Capture-Limit'
            GS1-EPCIS-Capture-File-Size-Limit:
              $ref: '#/components/headers/GS1-EPCIS-Capture-File-Size-Limit'
            GS1-Next-Page-Token-Expires:
              $ref: '#/components/headers/GS1-Next-Page-Token-Expires'
            GS1-Query-Min-Record-Time:
              $ref: '#/components/headers/GS1-Query-Min-Record-Time'

  /capture:
    options:
      tags:
        - 'Discovery'
      summary: Discover the settings of the capture interface.
      description: |
        The `OPTIONS` method is used as a discovery service for `/capture`. It describes which EPCIS and CBV versions
        are supported, EPCIS and CBV extensions, the payload size as a EPCIS events count (`GS1-EPCIS-Capture-Limit` header)
        or maximum payload size in bytes (`GS1-EPCIS-Capture-File-Size-Limit` header).
        The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
      responses:
        '204':
          description: |
            Header describing how to use the capture endpoint.
          headers:
            Allow:
              schema:
                example: OPTIONS, POST
                type: string
                default: OPTIONS, POST
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-Vendor-Version:
              $ref: '#/components/headers/GS1-Vendor-Version'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
            GS1-EPCIS-Capture-Limit:
              $ref: '#/components/headers/GS1-EPCIS-Capture-Limit'
            GS1-EPCIS-Capture-File-Size-Limit:
              $ref: '#/components/headers/GS1-EPCIS-Capture-File-Size-Limit'
    post:
      tags:
        - 'Capture'
      summary: Stores one or more EPCIS events. The server either accepts or rejects all events.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'
      description: |
        EPCIS events are added in bulk using the capture interface. To remain compatible with EPCIS 1.2, EPCIS 2.0 makes
        event ids optional. If event ids are missing, the server should populate the event id with a unique value.
        Otherwise it won't be possible to retrieve these events.

        To prevent timeouts for large payloads, the client
        potentially has to split the payload into several capture calls. To that end, the server specified a capture
        limit (number of events) and file size limit (payload size).

        A successful capturing of events does not guarantee that events will be stored. Instead, the server returns a
        capture id, which the client can use to obtain information about the capture job.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EPCISDocument'
      responses:
        '202':
          description: |
            Successfully captured one or more EPCIS events. The request returns a unique
            capture job URL in the Location header.
          headers:
            Location:
              example: "https://example.com/capture/id9261379075"
              schema:
                $ref: '#/components/schemas/Location'

        '400':
          description: An error occurred while capturing EPCIS events. All events are rejected.
          content:
            application/problem+json:
              schema:
                allOf:
                  - properties:
                      status:
                        type: integer
                        enum:
                          - 400
                        default: 400
                      type:
                        type: string
                        format: uri
                        enum:
                          - epcisException:ValidationException
                  - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '413':
          $ref: '#/components/responses/413CapturePayloadTooLarge'

  /capture/{captureID}:
    parameters:
      - in: path
        name: captureID
        example: id9261379075
        description: A unique value identifying a capture job generated by the server.
        required: true
        schema:
          type: string
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata of the capture job endpoint.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used for a given capture job.
      responses:
        '204':
          description: |
            Headers describing the vocabularies and CBV and EPCIS versions used in the capture job.
          headers:
            Allow:
              schema:
                example: OPTIONS, GET
                type: string
                default: OPTIONS, GET
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-Vendor-Version:
              $ref: '#/components/headers/GS1-Vendor-Version'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
            GS1-EPCIS-Capture-Limit:
              $ref: '#/components/headers/GS1-EPCIS-Capture-Limit'
            GS1-EPCIS-Capture-File-Size-Limit:
              $ref: '#/components/headers/GS1-EPCIS-Capture-File-Size-Limit'
    get:
      tags:
        - 'Capture'
      summary: Returns information about a specific capture job.

      description: |
        This endpoint provides information about a capture job. Each time events are captured, the server generates
        a unique capture id.
      responses:
        '200':
          description: |
            If the job was successful, a list of absolute, endpoint-specific URLs of all events, in the sequence
            in which they were submitted by the client.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uri
                  example:
                    - /eventTypes/ObjectEvent/events/oa123
                    - /eventTypes/ObjectEvent/events/oa345
                uniqueItems: true
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /eventTypes:
    options:
      tags:
        - 'Discovery'
      summary: Query metadata for the EPCIS event types endpoint.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          $ref: '#/components/responses/204TopLevelResourcesDiscovery'
    get:
      tags:
        - 'Events'
      summary: Returns all EPCIS event types currently available in the EPCIS repository.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'
      description: |
        EPCIS event types specify the schema of an event. This endpoint returns all EPCIS types that are
        currently in the repository.
      responses:
        '200':
          $ref: '#/components/responses/200SupportedEventTypes'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /eventTypes/{eventType}:
    parameters:
      - $ref: '#/components/parameters/EventType'
    options:
      tags:
        - 'Discovery'
      summary: Query metadata of the EPCIS event type endpoint.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          $ref: '#/components/responses/204TopLevelResourcesDiscovery'
    get:
      tags:
        - 'Events'
      summary: Returns all sub-resources of an EPCIS event type.
      description: |
        This endpoint returns all sub-resources of an EPCIS event type, which currently is `events`. A server may
        add additional endpoints, for example `schema` to access the EPCIS event type schema.
      responses:
        '200':
          $ref: '#/components/responses/200TopLevelOrEventTypeSubResource'
        '400':
          $ref: '#/components/responses/400QueryIssues'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '414':
          $ref: '#/components/responses/414URLTooLong'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /eventTypes/{eventType}/events:
    parameters:
      - $ref: '#/components/parameters/EventType'
      - $ref: '#/components/parameters/GS1-EPCIS-Version'
      - $ref: '#/components/parameters/GS1-EPCIS-Min'
      - $ref: '#/components/parameters/GS1-EPCIS-Max'
      - $ref: '#/components/parameters/GS1-CBV-Version'
      - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
      - $ref: '#/components/parameters/GS1-CBV-Extensions'
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata of the endpoint to access EPCIS events.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          description: |
            The `OPTIONS` method is used as a discovery service for `events` endpoints. It describes which EPCIS and CBV
            versions are supported as well as  EPCIS and CBV extensions.
            The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
          headers:
            Allow:
              schema:
                example: OPTIONS, POST, GET
                type: string
                default: OPTIONS, POST, GET
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-Vendor-Version:
              $ref: '#/components/headers/GS1-Vendor-Version'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
    get:
      tags:
        - 'Events'
      summary: |
        Returns EPCIS events of a given EPCIS event type. If `all` is used instead of an EPCIS
        event type, every event in the repository is returned.
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'

      description: |
        This endpoint returns all EPCIS events of a specific EPCIS event type up to the amount defined in `perPage`.
        The server returns a 'Link' header to point to the remaining results.

        If the EPCIS event type is not needed, `all` can be used instead of an EPCIS event type.

        The client can further restrict the list of events returned by filtering events using the EPCIS query
        language as URL query string parameters.

        Example:

        ```
        https://example.com/eventTypes/ObjectEvent/events?EQ_bizStep=urn%3Aepcglobal%3Acbv%3Abizstep%3Ashipping%2Curn%3Aepcglobal%3Acbv%3Abizstep%3Adecommissioning&GE_eventTime=2015-03-15T00%3A00%3A00.000-04%3A00
        ```
      responses:
        '200':
          $ref: '#/components/responses/200EPCISDocument'
        '400':
          $ref: '#/components/responses/400QueryIssues'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '414':
          $ref: '#/components/responses/414URLTooLong'
        '500':
          $ref: '#/components/responses/500ImplementationException'

    post:
      tags:
        - 'Capture'
        - 'Events'
      summary: Creates an individual EPCIS event.
      description: |
        An individual EPCIS event can be created by making a `POST` request to the EPCIS event type of
        the EPCIS event that is being captured. If the client does not wish to specify the EPCIS event type,
        the `/eventTypes/all/events` endpoint can be used. Alternatively, the client can also use the `/capture`
        interface and capture a single event.
      requestBody:
        required: true
        description: A EPCIS document with a single EPCIS event.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EPCISDocumentSingleEvent'

      responses:
        '201':
          description: |
            Successfully created (captured) one EPCIS event. The request returns the URL of the newly created
            EPCIS event in the Location header.
          headers:
            Location:
              example: "https://example.com/eventTypes/ObjectEvent/events/eventId123"
              schema:
                $ref: '#/components/schemas/Location'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EPCISDocumentSingleEvent'
        '400':
          description: An error occurred while creating the EPCIS event. The event was rejected.
          content:
            application/problem+json:
              schema:
                allOf:
                  - properties:
                      status:
                        type: integer
                        enum:
                          - 400
                        default: 400
                      type:
                        type: string
                        format: uri
                        enum:
                          - epcisException:ValidationException
                  - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '413':
          $ref: '#/components/responses/413CapturePayloadTooLarge'

  /eventTypes/{eventType}/events/{eventID}:
    parameters:
      - $ref: '#/components/parameters/EventType'
      - $ref: '#/components/parameters/EventID'
    options:
      tags:
        - 'Discovery'
      summary: Query metadata for the endpoint to access an individual EPCIS event.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          description: |
            The `OPTIONS` method is used as a discovery service for individual EPCIS events endpoints. It describes
            which EPCIS and CBV versions are supported as well as  EPCIS and CBV extensions.
            The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
          headers:
            Allow:
              schema:
                example: OPTIONS, GET
                type: string
                default: OPTIONS, GET

            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-Vendor-Version:
              $ref: '#/components/headers/GS1-Vendor-Version'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
    get:
      tags:
        - 'Events'
      summary: Returns an individual EPCIS event.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'
      description: |
        This endpoint accesses individual events using their unique id. If the EPCIS event type is not known
        or irrelevant, `all` can be used instead of an EPCIS event type. The response body is an `EPCISDocument` with
        the unique event.
      responses:
        '200':
          $ref: '#/components/responses/200EPCISDocumentSingleEvent'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /epcs:
    options:
      tags:
        - 'Discovery'
      summary: Query metadata related to the electronic product codes endpoint.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          $ref: '#/components/responses/204TopLevelResourcesDiscovery'
    get:
      tags:
        - 'Top-level Resources'
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'
      summary: Returns known electronic product codes.
      description: |
        An endpoint to list electronic product codes.
        This endpoint supports pagination.
      responses:
        '200':
          headers:
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
            Link:
              example: '<https://example.com/epcs?perPage=30&nextPageToken=3A1550673874978%2Ci%3AU6D7DENAKwM2gQRRwGrataeq>; rel="next"'
              schema:
                $ref: '#/components/schemas/Link'
          description: |
            Returns a list of electronic product codes. If there are more electronic product codes than specified by the
            `perPage` parameter, the client will be given the URL to retrieve more electronic product codes in the
            `Link` header.
            If the client specifies extension mappings, the response will use them where they match. Otherwise,
            the full resource address is used.
          content:
            application/json:
              schema:
                example:
                  - urn:epc:id:sgtin:0614141.107346.2018
                  - https://example.com/01/04012345123456
                  - urn:epc:id:sgtin:0614141.107346.2017
                type: array
                items:
                  type: string
                  format: uri
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /epcs/{epc}:
    parameters:
      - $ref: '#/components/parameters/EPC'
    options:
      tags:
        - 'Discovery'
      summary: Query metadata of the electronic product code.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          description: |
            The `OPTIONS` method is used as a discovery service for an electronic product code. It describes which EPCIS
            and CBV versions are supported as well as EPCIS and CBV extensions.
            The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
          headers:
            Allow:
              schema:
                example: OPTIONS, GET
                type: string
                default: OPTIONS, GET
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-Vendor-Version:
              $ref: '#/components/headers/GS1-Vendor-Version'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
    get:
      tags:
        - 'Top-level Resources'
      summary: Returns all sub-resources of an electronic product code.
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'

      description: |
        This endpoint returns all sub-resources of an electronic product code, which currently is `events`.
      responses:
        '200':
          $ref: '#/components/responses/200TopLevelOrEventTypeSubResource'
        '400':
          $ref: '#/components/responses/400QueryIssues'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '414':
          $ref: '#/components/responses/414URLTooLong'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /epcs/{epc}/events:
    parameters:
      - $ref: '#/components/parameters/EPC'
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata of the endpoint to access EPCIS events.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          $ref: '#/components/responses/204EventsEndpointDiscovery'
    get:
      tags:
        - 'Events'
      summary: Returns EPCIS events with the electronic product code.
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'


      description: |
        This endpoint helps to navigate EPCIS events by electronic product codes. It returns
        EPCIS events up to the amount defined in `perPage`. The server returns a `Link` header to point to the remaining
        results. Optionally, EPCIS events can be further filtered using the EPCIS query language in as query string parameters.

        Example:

        ```
        https://example.com/epcs/urn:epc:id:sgtin:0614141.107346.2018/events?EQ_bizStep=urn%3Aepcglobal%3Acbv%3Abizstep%3Ashipping%2Curn%3Aepcglobal%3Acbv%3Abizstep%3Adecommissioning&GE_eventTime=2015-03-15T00%3A00%3A00.000-04%3A00
        ```
      responses:
        '200':
          $ref: '#/components/responses/200EPCISDocument'
        '400':
          $ref: '#/components/responses/400QueryIssues'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '414':
          $ref: '#/components/responses/414URLTooLong'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /epcs/{epc}/events/{eventID}:
    parameters:
      - $ref: '#/components/parameters/EPC'
      - $ref: '#/components/parameters/EventID'
    options:
      tags:
        - 'Discovery'
      summary: Query metadata for the endpoint to access an individual EPCIS event.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          $ref: '#/components/responses/204TopLevelResourcesDiscovery'
    get:
      tags:
        - 'Events'
      summary: Returns an individual EPCIS event.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'
      description: |
        This endpoint accesses individual events with the electronic product code.
      responses:
        '200':
          $ref: '#/components/responses/200EPCISDocumentSingleEvent'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /bizSteps:
    options:
      tags:
        - 'Discovery'
      summary: Query metadata related to the business steps endpoint.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          $ref: '#/components/responses/204TopLevelResourcesDiscovery'
    get:
      tags:
        - 'Top-level Resources'
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'
      summary: Returns known business steps.
      description: |
        An endpoint to list business steps.
        This endpoint supports pagination.
      responses:
        '200':
          headers:
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
            Link:
              example: '<https://example.com/bizSteps?perPage=30&nextPageToken=3A1550673874978%2Ci%3AU6D7DENAKwM2gQRRwGrataeq>; rel="next"'
              schema:
                $ref: '#/components/schemas/Link'
          description: |
            Returns a list of business steps. If there are more business steps than specified by the
            `perPage` parameter, the client will be given the URL to retrieve more business steps in the `Link` header.
            If the client specifies extension mappings, the response will use them where they match. Otherwise,
            the full resource address is used.
          content:
            application/json:
              schema:
                example:
                  - ex1:qualityCheck
                  - urn:epcglobal:cbv:bizstep:receiving
                  - vendor2:QA
                type: array
                items:
                  type: string
                  format: uri
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /bizSteps/{bizStep}:
    parameters:
      - $ref: '#/components/parameters/BizStep'
    options:
      tags:
        - 'Discovery'
      summary: Query metadata of the endpoint to access an individual business step.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          description: |
            The `OPTIONS` method is used as a discovery service for a business step. It describes which EPCIS and CBV
            versions are supported as well as EPCIS and CBV extensions. The list of headers is not exhaustive. It only
            describes the functionality specific to EPCIS 2.0.
          headers:
            Allow:
              schema:
                example: OPTIONS, GET
                type: string
                default: OPTIONS, GET
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-Vendor-Version:
              $ref: '#/components/headers/GS1-Vendor-Version'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
    get:
      tags:
        - 'Top-level Resources'
      summary: Returns all sub-resources of a business step.
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
      description: |
        This endpoint returns all sub-resources of a business step, which currently is `events`.
      responses:
        '200':
          $ref: '#/components/responses/200TopLevelOrEventTypeSubResource'
        '400':
          $ref: '#/components/responses/400QueryIssues'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '414':
          $ref: '#/components/responses/414URLTooLong'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /bizSteps/{bizStep}/events:
    parameters:
      - $ref: '#/components/parameters/BizStep'
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata of the endpoint to access EPCIS events.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          $ref: '#/components/responses/204EventsEndpointDiscovery'
    get:
      tags:
        - 'Events'
      summary: Returns all EPCIS events related to the business step.
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'
      description: |
        This endpoint helps to navigate EPCIS events by business steps. It returns
        EPCIS events up to the amount defined in `perPage`. The server returns a `Link` header to point to the
        remaining results.  Optionally, EPCIS events can be further filtered using the EPCIS query language in as query
        string parameters.

        Example:

        ```
        https://example.com/bizSteps/urn:epcglobal:cbv:bizstep:receiving/events?GE_eventTime=2015-03-15T00%3A00%3A00.000-04%3A00
        ```
      responses:
        '200':
          $ref: '#/components/responses/200EPCISDocument'
        '400':
          $ref: '#/components/responses/400QueryIssues'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '414':
          $ref: '#/components/responses/414URLTooLong'

        '500':
          $ref: '#/components/responses/500ImplementationException'

  /bizSteps/{bizStep}/events/{eventID}:
    parameters:
      - $ref: '#/components/parameters/BizStep'
      - $ref: '#/components/parameters/EventID'
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata for the endpoint to access an individual EPCIS event.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          $ref: '#/components/responses/204TopLevelResourcesDiscovery'
    get:
      tags:
        - 'Events'
      summary: Returns an individual EPCIS event.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'
      description: |
        This endpoint accesses individual events with the business step.
      responses:
        '200':
          $ref: '#/components/responses/200EPCISDocumentSingleEvent'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /bizLocations:
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata related to the business locations endpoint.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          $ref: '#/components/responses/204TopLevelResourcesDiscovery'
    get:
      tags:
        - 'Top-level Resources'
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'
      summary: Returns known business locations.
      description: |
        An endpoint to list business locations.
        This endpoint supports pagination.
      responses:
        '200':
          headers:
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
            Link:
              example: '<https://example.com/bizLocations?perPage=30&nextPageToken=3A1550673874978%2Ci%3AU6D7DENAKwM2gQRRwGrataeq>; rel="next"'
              schema:
                $ref: '#/components/schemas/Link'
          description: |
            Returns a list of business locations. If there are more business locations than specified by the
            `perPage` parameter, the client will be given the URL to retrieve more business locations in the `Link` header.
            If the client specifies extension mappings, the response will use them where they match. Otherwise,
            the full resource address is used.
          content:
            application/json:
              schema:
                example:
                  - urn:epc:id:sgln:0012345.11111.0
                  - https://id.gs1.org/414/0614141123452
                type: array
                items:
                  type: string
                  format: uri
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /bizLocations/{bizLocation}:
    parameters:
      - $ref: '#/components/parameters/BizLocation'
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata of the endpoint to access an individual business location.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          description: |
            The `OPTIONS` method is used as a discovery service for a business location. It describes which EPCIS and
            CBV versions are supported as well as EPCIS and CBV extensions. The list of headers is not exhaustive.
            It only describes the functionality specific to EPCIS 2.0.
          headers:
            Allow:
              schema:
                example: OPTIONS, GET
                type: string
                default: OPTIONS, GET
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-Vendor-Version:
              $ref: '#/components/headers/GS1-Vendor-Version'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
    get:
      tags:
        - 'Top-level Resources'
      summary: Returns all sub-resources of a business location.
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
      description: |
        This endpoint returns all sub-resources of a business location, which currently is `events`.
      responses:
        '200':
          $ref: '#/components/responses/200TopLevelOrEventTypeSubResource'
        '400':
          $ref: '#/components/responses/400QueryIssues'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '414':
          $ref: '#/components/responses/414URLTooLong'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /bizLocations/{bizLocation}/events:
    parameters:
      - $ref: '#/components/parameters/BizLocation'

    options:
      tags:
        - 'Discovery'
      summary: Query the metadata of the endpoint to access EPCIS events.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          $ref: '#/components/responses/204EventsEndpointDiscovery'
    get:
      tags:
        - 'Events'

      summary: Returns all EPCIS events at the business location.
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'

      description: |
        This endpoint helps to navigate EPCIS events by business locations. It returns
        EPCIS events up to the amount defined in `perPage`. The server returns a `Link` header to point to the remaining
        results.
        Optionally, EPCIS events can be further filtered using the EPCIS query language in as query string parameters.

        Example:

        ```
        https://example.com/bizLocations/urn:epc:id:sgln:0012345.11111.0/events?GE_eventTime=2015-03-15T00%3A00%3A00.000-04%3A00
        ```
      responses:
        '200':
          $ref: '#/components/responses/200EPCISDocument'
        '400':
          $ref: '#/components/responses/400QueryIssues'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '414':
          $ref: '#/components/responses/414URLTooLong'

        '500':
          $ref: '#/components/responses/500ImplementationException'

  /bizLocations/{bizLocation}/events/{eventID}:
    parameters:
      - $ref: '#/components/parameters/BizLocation'
      - $ref: '#/components/parameters/EventID'
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata for the endpoint to access an individual EPCIS event.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          $ref: '#/components/responses/204TopLevelResourcesDiscovery'
    get:
      tags:
        - 'Events'
      summary: Returns an individual EPCIS event.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'
      description: |
        This endpoint accesses individual events with the business location.
      responses:
        '200':
          $ref: '#/components/responses/200EPCISDocumentSingleEvent'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /readPoints:
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata related to the read points endpoint.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          $ref: '#/components/responses/204TopLevelResourcesDiscovery'
    get:
      tags:
        - 'Top-level Resources'
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'
      summary: Returns known read points.
      description: |
        An endpoint to list read points.
        This endpoint supports pagination.
      responses:
        '200':
          headers:
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
            Link:
              example: '<https://example.com/readPoints?perPage=30&nextPageToken=3A1550673874978%2Ci%3AU6D7DENAKwM2gQRRwGrataeq>; rel="next"'
              schema:
                $ref: '#/components/schemas/Link'
          description: |
            Returns a list of read points. If there are more read points than specified by the
            `perPage` parameter, the client will be given the URL to retrieve more read points in the `Link` header.
            If the client specifies extension mappings, the response will use them where they match. Otherwise,
            the full resource address is used.
          content:
            application/json:
              schema:
                example:
                  - urn:epc:id:sgln:0012345.11111.400
                  - urn:epc:id:sgln:0012346.11111.400
                type: array
                items:
                  type: string
                  format: uri
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /readPoints/{readPoint}:
    parameters:
      - $ref: '#/components/parameters/ReadPoint'
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata of the endpoint to access an individual read point.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          description: |
            The `OPTIONS` method is used as a discovery service for a read point. It describes which EPCIS and CBV
            versions are supported as well as EPCIS and CBV extensions. The list of headers is not exhaustive. It only
            describes the functionality specific to EPCIS 2.0.
          headers:
            Allow:
              schema:
                example: OPTIONS, GET
                type: string
                default: OPTIONS, GET
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-Vendor-Version:
              $ref: '#/components/headers/GS1-Vendor-Version'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
    get:
      tags:
        - 'Top-level Resources'
      summary: Returns all sub-resources of a read point.
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
      description: |
        This endpoint returns all sub-resources of a read point, which currently is `events`.
      responses:
        '200':
          $ref: '#/components/responses/200TopLevelOrEventTypeSubResource'
        '400':
          $ref: '#/components/responses/400QueryIssues'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '414':
          $ref: '#/components/responses/414URLTooLong'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /readPoints/{readPoint}/events:
    parameters:
      - $ref: '#/components/parameters/ReadPoint'
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata of the endpoint to access EPCIS events.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          $ref: '#/components/responses/204EventsEndpointDiscovery'
    get:
      tags:
        - 'Events'
      summary: Returns all EPCIS events related to the read point.
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'
      description: |
        This endpoint helps to navigate EPCIS events by read points. It returns
        EPCIS events up to the amount defined in `perPage`. The server returns a `Link` header to point to the remaining
        results.

        Optionally, EPCIS events can be further filtered using the EPCIS query language in as query string parameters.

        Example:

        ```
        https://example.com/readPoints/urn:epc:id:sgln:0012345.11111.400/events?GE_eventTime=2015-03-15T00%3A00%3A00.000-04%3A00
        ```
      responses:
        '200':
          $ref: '#/components/responses/200EPCISDocument'
        '400':
          $ref: '#/components/responses/400QueryIssues'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '414':
          $ref: '#/components/responses/414URLTooLong'

        '500':
          $ref: '#/components/responses/500ImplementationException'

  /readPoints/{readPoint}/events/{eventID}:
    parameters:
      - $ref: '#/components/parameters/ReadPoint'
      - $ref: '#/components/parameters/EventID'
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata for the endpoint to access an individual EPCIS event.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          $ref: '#/components/responses/204TopLevelResourcesDiscovery'
    get:
      tags:
        - 'Events'
      summary: Returns an individual EPCIS event.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'
      description: |
        This endpoint accesses individual events with the read point.
      responses:
        '200':
          $ref: '#/components/responses/200EPCISDocumentSingleEvent'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /dispositions:
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata related to the dispositions endpoint.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          $ref: '#/components/responses/204TopLevelResourcesDiscovery'
    get:
      tags:
        - 'Top-level Resources'
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'
      summary: Returns known dispositions.
      description: |
        An endpoint to list dispositions.
        This endpoint supports pagination.
      responses:
        '200':
          headers:
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
            Link:
              example: '<https://example.com/dispositions?perPage=30&nextPageToken=3A1550673874978%2Ci%3AU6D7DENAKwM2gQRRwGrataeq>; rel="next"'
              schema:
                $ref: '#/components/schemas/Link'
          description: |
            Returns a list of dispositions. If there are more dispositions than specified by the
            `perPage` parameter, the client will be given the URL to retrieve more dispositions in the `Link` header.
            If the client specifies extension mappings, the response will use them where they match. Otherwise,
            the full resource address is used.
          content:
            application/json:
              schema:
                example:
                  - urn:epcglobal:cbv:disp:in_progress
                  - urn:epcglobal:cbv:disp:in_transit
                type: array
                items:
                  type: string
                  format: uri
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /dispositions/{disposition}:
    parameters:
      - $ref: '#/components/parameters/Disposition'
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata of the endpoint to access an individual disposition.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          description: |
            The `OPTIONS` method is used as a discovery service for a disposition. It describes which EPCIS and CBV
            versions are supported as well as EPCIS and CBV extensions. The list of headers is not exhaustive. It only
            describes the functionality specific to EPCIS 2.0.
          headers:
            Allow:
              schema:
                example: OPTIONS, GET
                type: string
                default: OPTIONS, GET
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-Vendor-Version:
              $ref: '#/components/headers/GS1-Vendor-Version'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
    get:
      tags:
        - 'Top-level Resources'
      summary: Returns all sub-resources of a disposition.
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
      description: |
        This endpoint returns all sub-resources of a disposition, which currently is `events`.
      responses:
        '200':
          $ref: '#/components/responses/200TopLevelOrEventTypeSubResource'
        '400':
          $ref: '#/components/responses/400QueryIssues'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '414':
          $ref: '#/components/responses/414URLTooLong'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /dispositions/{disposition}/events:
    parameters:
      - $ref: '#/components/parameters/Disposition'
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata of the endpoint to access EPCIS events.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          $ref: '#/components/responses/204EventsEndpointDiscovery'
    get:
      tags:
        - 'Events'
      summary: Returns all EPCIS events related to the disposition.
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'

      description: |
        This endpoint helps to navigate EPCIS events by dispositions. It returns
        EPCIS events up to the amount defined in `perPage`. The server returns a `Link` header to point to the remaining
        results.
        Optionally, EPCIS events can be further filtered using the EPCIS query language in as query string parameters.

        Example:

        ```
        https://example.com/dispositions/urn:epcglobal:cbv:disp:in_progress/events?GE_eventTime=2015-03-15T00%3A00%3A00.000-04%3A00
        ```
      responses:
        '200':
          $ref: '#/components/responses/200EPCISDocument'
        '400':
          $ref: '#/components/responses/400QueryIssues'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '414':
          $ref: '#/components/responses/414URLTooLong'

        '500':
          $ref: '#/components/responses/500ImplementationException'

  /dispositions/{disposition}/events/{eventID}:
    parameters:
      - $ref: '#/components/parameters/Disposition'
      - $ref: '#/components/parameters/EventID'
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata for the endpoint to access an individual EPCIS event.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          $ref: '#/components/responses/204TopLevelResourcesDiscovery'
    get:
      tags:
        - 'Events'
      summary: Returns an individual EPCIS event.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'
      description: |
        This endpoint accesses individual events with the disposition.
      responses:
        '200':
          $ref: '#/components/responses/200EPCISDocumentSingleEvent'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries:
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata of the EPCIS queries endpoint.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          description: |
            The `OPTIONS` method is used as a discovery service for `/queries` endpoints. It describes which EPCIS and CBV
            versions are supported as well as EPCIS and CBV extensions.
            The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
          headers:
            Allow:
              schema:
                example: OPTIONS, GET
                type: string
                default: OPTIONS, GET
    get:
      tags:
        - 'Queries'
      summary: Returns a list of queries available.
      description: |
        An endpoint to list named queries.
        This endpoint supports pagination.
      responses:
        '200':
          description: |
            Queries are like views that are created using the EPCIS query language. Each query object
            consists of a query name and the query definition. Performing a `GET` on `/queries` lists all
            existing queries.
          content:
            application/json:
              example: [{
                "query": {
                  "EQ_bizStep": [
                      "urn:epcglobal:cbv:bizstep:shipping",
                      "urn:epcglobal:cbv:bizstep:receiving"
                  ],
                  "eventTypes": "ObjectEvent"
                },
                "queryType": "events",
                "name": "myQuery"
              }]
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      required:
                        - name
                      properties:
                        name:
                          type: string
                    - $ref: '#/components/schemas/QueryDefinition'
                uniqueItems: true
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/{queryName}:
    parameters:
      - $ref: '#/components/parameters/QueryName'
    get:
      tags:
        - 'Queries'
      summary: Returns the query definition.
      responses:
        '200':
          headers:
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'

          description: |
            Queries are like views that are created using the EPCIS query language. Each query object
            consists of a query name, query type (EPCIS events or EPCIS master data) and the query definition.
          content:
            application/json:
              example: {
                "query": {
                  "EQ_bizStep": [
                      "urn:epcglobal:cbv:bizstep:shipping",
                      "urn:epcglobal:cbv:bizstep:receiving"
                  ],
                  "eventTypes": "ObjectEvent"
                },
                "queryType": "events",
                "name": "myQuery"
              }
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      required:
                        - name
                      properties:
                        name:
                          type: string
                    - $ref: '#/components/schemas/QueryDefinition'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '413':
          $ref: '#/components/responses/413QueryScopeOrSize'
        '500':
          $ref: '#/components/responses/500ImplementationException'
    post:
      tags:
        - 'Queries'
        - 'Events'
        - 'Master Data'
      summary: |
        Creates and executes a named EPCIS events or EPCIS master data query and returns results with the option to use
        pagination if needed.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'
        - $ref: '#/components/parameters/PerPage'
      description: |
        Creating a named query creates a view on the events in the repository, accessible through it's events resource.
        Creating a query also returns EPCIS events up to the amount defined in `perPage`. To obtain the remaining events,
        the client can use the URL in the `Link` header. When a query is created, the server returns the query URL in the
        `Location` header. The client can use this URL to start a query subscription immediately after creating the query.
      requestBody:
        $ref: '#/components/requestBodies/CreateQuery'
      responses:
        '201':
          headers:
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
            Link:
              example: <https://example.com/queries/myQuery/events?perPage=30&nextPageToken=3A1550673874978%2Ci%3AU6D7DENAKwM2gQRRwGrataeq>; rel="next"
              description: |
                The `Link` header is used for pagination. It contains the URL to the next result set. This endpoint does
                not paginate on the same endpoint where the resource was created:

                ```
                Link: <https://example.com/queries/myQuery/events?perPage=30&nextPageToken=3A1550673874978%2Ci%3AU6D7DENAKwM2gQRRwGrataeq>; rel="next"
                ```
              schema:
                $ref: '#/components/schemas/Link'
            Location:
              description: |
                The URL of the created query. The client can use the `Location` URL to obtain more resources
                synchronously (`events` for EPCIS events and `masterData` for EPCIS vocabulary elements). The client
                may also receive EPCIS events asynchronously by subscribing to a query.
              schema:
                example: "https://www.example.com/queries/myQuery"
                type: string
                format: uri
          description: Returns the query result.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/EPCISQueryDocument'
                  - $ref: '#/components/schemas/EPCISMasterDataDocument'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata of the named queries endpoint.
      description: |
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        '204':
          description: |
            The `OPTIONS` method is used as a discovery service for `/queries` endpoints. It describes which EPCIS and
            CBV versions are supported as well as EPCIS and CBV extensions.
            The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
          headers:
            Allow:
              schema:
                example: OPTIONS, GET, DELETE
                type: string
                default: OPTIONS, GET, DELETE
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-Vendor-Version:
              $ref: '#/components/headers/GS1-Vendor-Version'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
    delete:
      tags:
        - 'Queries'
      summary: Removes a named query and terminates open WebSocket connections.
      responses:
        '204':
          $ref: '#/components/responses/204QueryDeleted'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/{queryName}/subscriptions:
    parameters:
      - $ref: '#/components/parameters/QueryName'
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata of the subscriptions endpoint.
      description: |
        The `OPTIONS` method is used as a discovery service for query subscriptions.
      responses:
        '204':
          description: |
            The `OPTIONS` method returns information describing the `subscriptions` endpoint.
            The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
          headers:
            Allow:
              schema:
                example: OPTIONS, POST, GET
                type: string
                default: OPTIONS, POST, GET
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-Vendor-Version:
              $ref: '#/components/headers/GS1-Vendor-Version'
    get:
      tags:
        - 'Queries'
        - 'Subscriptions'
      summary: Returns active Webhook subscriptions with the option to use pagination if needed.
      parameters:
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/PerPage'
      description: |
        The `GET` endpoint is to list all open Webhook query subscriptions on that query.
      responses:
        '200':
          headers:
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
            Link:
              example: '<https://example.com/queries/myQuery/subscriptions?perPage=30&nextPageToken=3A1550673874978%2Ci%3AU6D7DENAKwM2gQRRwGrataeq>; rel="next"'
              schema:
                $ref: '#/components/schemas/Link'
          description: Returns active Webhook subscriptions.
          content:
            application/json:
              example: [
                {
                  "subscriptionId": "df5a33e3-5aa3-4403-ae01-99b83234e27b",
                  "createdAt": "2017-08-21T17:32:28Z",
                  "schedule": {
                    "hour": "1",
                    "minute": "5"
                  }
                },
                {
                  "subscriptionId": "df5a33e3-5aa3-5504-bf12-88c94345f38c",
                  "createdAt": "2017-07-21T17:32:28Z",
                  "stream": true
                }
              ]
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      required:
                        - subscriptionId
                        - createdAt
                      properties:
                        minRecordTime:
                          $ref: '#/components/schemas/GS1-Query-Min-Record-Time'
                        initialRecordTime:
                          $ref: '#/components/schemas/GS1-Query-InitialRecordTime'
                        subscriptionId:
                          $ref: '#/components/schemas/SubscriptionID'
                        createdAt:
                          example: "2017-08-21T17:32:28Z"
                          type: string
                          format: date-time
                    - oneOf:
                        - $ref: '#/components/schemas/QueryScheduleSubscription'
                        - $ref: '#/components/schemas/QueryStreamSubscription'

        '400':
          $ref: '#/components/responses/400SubscriptionIssues'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'
    post:
      tags:
        - 'Queries'
        - 'Subscriptions'
      summary: Creates a query subscription using Webhooks.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'
      description: |
        Creating a query subscription using Webhooks requires the client to provide a single endpoint to which the
        server will send events and a subscription secret that the client needs to authenticate itself when
        sending events. The subscription secret must be generated by the client.

        When the client subscribes to a query, it must either set `stream` to true, to be notified whenever a new EPCIS
        event matches the query, or the client must define a query schedule. If these are missing the query subscription is invalid because the server won't
        know when to notify a client.

        ## Scheduled query: Receive query results at 1.05am

        A scheduled query subscription is a time-based query execution. EPCIS 2.0 scheduled queries are scheduled
        in the same manner as cron jobs.

        For example, this query subscription is scheduled to trigger every morning at 1.05am. By setting
        `reportIfEmpty` to `true`, the client's callback URL will be called even if there are no new events that match
        the query.

        ```
        POST /queries/MyQuery/subscriptions
        {
          "callbackUrl": "https://client.example.com/queryCallback",
          "secret": "0435ojtojt02",
          "reportIfEmpty": true,
          "schedule": {
            "hour":"1",
            "minute": "5"
          }
        }
        ```

        ## Streaming query subscription: Whenever a captured EPCIS event matches the query criteria

        If no query schedule is specified, the client must explicitly set `stream` to `true`. This restriction is to
        prevent clients from accidentally subscribing to EPCIS event streams.

        ```
        POST /queries/MyQuery/subscriptions
        {
          "callbackUrl": "https://client.example.com/queryCallback",
          "secret": "0435ojtojt02",
          "stream": true
        }
        ```

      requestBody:
        content:
          application/json:
            example: {
              "callbackUrl": "https://client.example.com/queryCallback",
              "secret": "0435ojtojt02",
              "schedule": { "hour": "1", "minute": "5" }
            }
            schema:
              allOf:
                - $ref: '#/components/schemas/AbstractQuerySubscription'
                - oneOf:
                    - $ref: '#/components/schemas/QueryScheduleSubscription'
                    - $ref: '#/components/schemas/QueryStreamSubscription'
      responses:
        '201':
          headers:
            Location:
              example: 'https://www.example.com/queries/MyQuery/subscriptions/df5a33e3-5aa3-4403-ae01-99b83234e27b'
              description: |
                The server creates a new subscription for each client and query subscription. The client needs that URL
                to unsubscribe by deleting this resource. The `Location` URL must point to the `subscriptionId` returned
                in the response body.
              schema:
                type: string
                format: uri
          description: Query subscription successful. The subscription is valid until the client unsubscribes.
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscriptionId:
                    $ref: '#/components/schemas/SubscriptionID'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

      callbacks:
        querySubscriptionResults:
          '{$request.body#/callbackUrl}?secret={$request.body#/secret}':
            post:
              summary: Registers this Webhook to subscribe to a query.
              requestBody:
                description: |
                  The server sends the query result to the client. There is no pagination for a `POST` request, the
                  server must either send each EPCIS event individually or group EPCIS events in manageable sizes.

                  If an error occurs server-side, the server must send the error in the format that is already used for
                  returning `4xx` or `5xx` responses.
                required: true
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: '#/components/schemas/EPCISDocument'
                        - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
              responses:
                '200':
                  description: Webhook successfully registered.
                '401':
                  $ref: '#/components/responses/401UnauthorizedRequest'
                '403':
                  $ref: '#/components/responses/403ClientUnauthorized'
                '413':
                  description: |
                    The `POST` request is too large. The client can't handle a payload of this size at once and
                    asks the server to send EPCIS events in smaller batches.
                  content:
                    application/problem+json:
                      schema:
                        allOf:
                          - properties:
                              status:
                                type: integer
                                enum:
                                  - 413
                                default: 413
                              type:
                                type: string
                                format: uri
                                enum:
                                  - epcisException:QueryTooComplexException
                          - $ref: '#/components/schemas/RFC7807ProblemResponseBody'

  /queries/{queryName}/subscriptions/{subscriptionID}:
    parameters:
      - $ref: '#/components/parameters/QueryName'
      - in: path
        name: subscriptionID
        required: true
        example: df5a33e3-5aa3-4403-ae01-99b83234e27b
        schema:
          $ref: '#/components/schemas/SubscriptionID'
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata of the endpoint for an individual subscription.
      description: |
        The `OPTIONS` method is used as a discovery service for a Webhook-based query subscription.
      responses:
        '204':
          description: |
            The `OPTIONS` method returns information describing individual query subscriptions.
            The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
          headers:
            Allow:
              schema:
                example: OPTIONS, GET, DELETE
                type: string
                default: OPTIONS, GET, DELETE
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-Vendor-Version:
              $ref: '#/components/headers/GS1-Vendor-Version'
    get:
      tags:
        - 'Queries'
        - 'Subscriptions'
      summary: Returns the subscription Id. This method is useful to verify if a subscription is still active.
      responses:
        '200':
          description: |
            The `GET` method on a query subscription allows the client to see individual subscriptions.
          content:
            application/json:
              example: [
                {
                  "createdAt": "2017-07-21T17:32:28Z",
                  "stream": true
                }
              ]
              schema:
                allOf:
                  - type: object
                    required:
                      - createdAt
                    properties:
                      initialRecordTime:
                        $ref: '#/components/schemas/GS1-Query-InitialRecordTime'
                      minRecordTime:
                        $ref: '#/components/schemas/GS1-Query-Min-Record-Time'
                      createdAt:
                        example: "2017-08-21T17:32:28Z"
                        type: string
                        format: date-time
                  - oneOf:
                      - $ref: '#/components/schemas/QueryScheduleSubscription'
                      - $ref: '#/components/schemas/QueryStreamSubscription'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'
    delete:
      operationId: unsubscribe
      tags:
        - 'Queries'
        - 'Subscriptions'
      summary: Unsubscribes a client by deleting the query subscription.
      responses:
        '204':
          description: Client unsubscribed from query.
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/{queryName}/events:
    parameters:
      - $ref: '#/components/parameters/QueryName'
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata of the EPCIS events query result endpoint.
      description: |
        The `OPTIONS` method is used as a discovery service for named queries. It describes which EPCIS and CBV
        versions are used in the query result supported as well as EPCIS and CBV extensions.

      responses:
        '204':
          $ref: '#/components/responses/204EventsEndpointDiscovery'
    get:
      tags:
        - 'Queries'
        - 'Events'
        - 'Master Data'
      summary: |
        Returns EPCIS events with the option to use pagination if needed. This endpoint supports query subscriptions
        using WebSockets.
      parameters:
        - $ref: '#/components/parameters/Upgrade'
        - $ref: '#/components/parameters/Connection'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/GS1-Query-ReportIfEmpty'
        - $ref: '#/components/parameters/GS1-Query-InitialRecordTime'
        - $ref: '#/components/parameters/GS1-Query-Second'
        - $ref: '#/components/parameters/GS1-Query-Minute'
        - $ref: '#/components/parameters/GS1-Query-Hour'
        - $ref: '#/components/parameters/GS1-Query-DayOfMonth'
        - $ref: '#/components/parameters/GS1-Query-Month'
        - $ref: '#/components/parameters/GS1-Query-DayOfWeek'
        - $ref: '#/components/parameters/GS1-Query-Stream'

      description: |
        The `GET` endpoint  is to retrieve results of a named query.
        Furthermore, this endpoint can also be used to subscribe to queries using Websocket. To do this, the client
        must specify the query schedule or set the `stream` parameter to `true`as URL query string parameter. Please
        note that scheduling parameters and the `stream` parameter are mutually exclusive.

        ## Scheduled query: Receive query results at 1.05am

        Handshake from client for scheduled query:

        ```
        GET https://example.com/queries/MyQuery/events?minute=5&hour=1
        Host: example.com
        Upgrade: websocket
        Connection: Upgrade
        ```

        Handshake from the server:

        ```
        HTTP/1.1 101 Switching Protocols
        Upgrade: websocket
        Connection: Upgrade
        ```

        ## Streaming query subscription: Whenever a captured EPCIS event matches the query criteria

        Handshake from client for streaming:

        ```
        GET https://example.com/queries/MyQuery/events?stream=true
        Host: example.com
        Upgrade: websocket
        Connection: Upgrade
        ```

        Handshake from the server:

        ```
        HTTP/1.1 101 Switching Protocols
        Upgrade: websocket
        Connection: Upgrade
        ```
      responses:
        '101':
         $ref: '#/components/responses/101WebsocketCreated'
        '200':
          $ref: '#/components/responses/200EPCISQueryDocument'
        '400':
          $ref: '#/components/responses/400SubscriptionIssues'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '413':
          $ref: '#/components/responses/413QueryScopeOrSize'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/{queryName}/masterData:
    parameters:
      - $ref: '#/components/parameters/QueryName'
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata of the EPCIS master data query endpoint.
      description: |
        The `OPTIONS` method is used as a discovery service for named queries. It describes which EPCIS and CBV
        versions are used in the query result supported as well as EPCIS and CBV extensions.
        Please note that this doesn't apply to anonymous queries, since they are not stored.
      responses:
        '204':
          description: |
            The `OPTIONS` method is used as a discovery service for EPCIS master data queries endpoint. For named queries,
            `OPTIONS` reveals which vocabularies are used in the query, etc. Anonymous queries are not stored, and
            therefore such information cannot be discovered.
            The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
          headers:
            Allow:
              schema:
                example: OPTIONS, GET
                type: string
                default: OPTIONS, GET
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-Vendor-Version:
              $ref: '#/components/headers/GS1-Vendor-Version'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
    get:
      tags:
        - 'Queries'
        - 'Master Data'
      summary: Returns the result of an EPCIS master data query.
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
      description: |
        The `GET` endpoint is to retrieve vocabulary elements.
      responses:
        '200':
          $ref: '#/components/responses/200EPCISMasterDataDocument'
        '400':
          $ref: '#/components/responses/400SubscriptionIssues'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '413':
          $ref: '#/components/responses/413QueryScopeOrSize'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/SimpleMasterDataQuery:
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata of the anonymous EPCIS master data query endpoint.
      description: |
        The `OPTIONS` method is used as a discovery service for anonymous queries. Because anonymous queries
        are not stored, query-related metadata cannot be discovered.

      responses:
        '204':
          $ref: '#/components/responses/204AnonymousQueriesDiscovery'
    post:
      tags:
        - 'Queries'
        - 'Master Data'
      summary: Executes anonymous EPCIS master data queries and returns results with the option to use pagination if needed.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'
        - $ref: '#/components/parameters/PerPage'
      description: |
        `SimpleMasterDataQuery` is an endpoint to create anonymous queries. Unlike named
        queries, these queries are not stored.
      requestBody:
        description: Creates and executes an anonymous EPCIS master data query.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
                - queryType
              properties:
                queryType:
                  type: string
                  enum:
                    - masterData
                  example: masterData
                query:
                  $ref: '#/components/schemas/EPCISMasterDataQuery'

      responses:
        '200':
          headers:
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
            Link:
              description: |
                The `Link` header is used for pagination. It contains the URL to the next result set. This endpoint does
                not paginate on the same endpoint where the resource was created:

                ```
                Link: <https://www.example.com/queries/SimpleMasterDataQuery/masterData?perPage=30&nextPageToken=3A1550673874978%2Ci%3AU6D7DENAKwM2gQRRwGrataeq>; rel="next"
                ```

              example: https://www.example.com/queries/SimpleMasterDataQuery/masterData?perPage=30&nextPageToken=3A1550673874978%2Ci%3AU6D7DENAKwM2gQRRwGrataeq>; rel="next"'
              schema:
                $ref: '#/components/schemas/Link'
            GS1-Next-Page-Token-Expires:
              $ref: '#/components/headers/GS1-Next-Page-Token-Expires'
          description: Returns the query result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EPCISMasterDataDocument'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '413':
          $ref: '#/components/responses/413QueryScopeOrSize'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/SimpleMasterDataQuery/masterData:
    get:
      tags:
        - 'Queries'
        - 'Master Data'
      summary: Returns the result of an EPCIS master data query.
      parameters:
        - $ref: '#/components/parameters/NextPageToken'
      description: |
        The `GET` endpoint is to retrieve EPCIS vocabulary elements.
      responses:
        '200':
          $ref: '#/components/responses/200EPCISMasterDataDocument'
        '400':
          $ref: '#/components/responses/400QueryIssues'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '413':
          $ref: '#/components/responses/413QueryScopeOrSize'
        '500':
          $ref: '#/components/responses/500ImplementationException'
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata of the EPCIS master data query endpoint.
      description: |
        The `OPTIONS` method is used as a discovery service for anonymous EPCIS master data query results.
      responses:
        '204':
          description: |
            The `OPTIONS` method is used as a discovery service for master data queries endpoint.
            The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
          headers:
            Allow:
              schema:
                example: OPTIONS, GET
                type: string
                default: OPTIONS, GET
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-Vendor-Version:
              $ref: '#/components/headers/GS1-Vendor-Version'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'

  /queries/SimpleEventQuery:
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata of the anonymous EPCIS events query endpoint.
      description: |
        The `OPTIONS` method is used as a discovery service for anonymous queries. Because anonymous queries
        are not stored, query-related metadata cannot be discovered.
      responses:
        '204':
          $ref: '#/components/responses/204AnonymousQueriesDiscovery'
    post:
      tags:
        - 'Queries'
        - 'Events'
      summary: Executes anonymous EPCIS events query and returns results with the option to use pagination if needed.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Min'
        - $ref: '#/components/parameters/GS1-EPCIS-Max'
        - $ref: '#/components/parameters/GS1-CBV-Version'
        - $ref: '#/components/parameters/GS1-EPCIS-Extensions'
        - $ref: '#/components/parameters/GS1-CBV-Extensions'
        - $ref: '#/components/parameters/PerPage'
      description: |
        `SimpleEventQuery` is an endpoint to execute anonymous queries for EPCIS events.
        Unlike named queries, these queries are not stored.
      requestBody:
        description: Creates and executes an anonymous EPCIS events query.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
                - queryType
              properties:
                queryType:
                  type: string
                  enum:
                    - events
                  example: events
                query:
                  $ref: '#/components/schemas/EPCISEventsQuery'

      responses:
        '200':
          headers:
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
            Link:
              example: https://www.example.com/queries/SimpleEventQuery/events?perPage=30&nextPageToken=3A1550673874978%2Ci%3AU6D7DENAKwM2gQRRwGrataeq>; rel="next"
              description: |
                The `Link` header is used for pagination. It contains the URL to the next result set. This endpoint does
                not paginate on the same endpoint where the resource was created:

                ```
                Link: <https://www.example.com/queries/SimpleEventQuery/events?perPage=30&nextPageToken=3A1550673874978%2Ci%3AU6D7DENAKwM2gQRRwGrataeq>; rel="next"
                ```
              schema:
                $ref: '#/components/schemas/Link'
            GS1-Next-Page-Token-Expires:
              $ref: '#/components/headers/GS1-Next-Page-Token-Expires'
          description: |
            Returns the query result. To use pagination, the client should follow the URL returned in the
            `Link` header.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EPCISDocument'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '413':
          $ref: '#/components/responses/413QueryScopeOrSize'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/SimpleEventQuery/events:
    options:
      tags:
        - 'Discovery'
      summary: Query the metadata of the anonymous EPCIS events query result.
      description: |
        The `OPTIONS` method is used as a discovery service for anonymous queries. Because anonymous queries
        are not stored, query-related metadata cannot be discovered.
      responses:
        '204':
          $ref: '#/components/responses/204EventsEndpointDiscovery'
    get:
      tags:
        - 'Queries'
        - 'Events'
      summary: Returns EPCIS events with the option to use pagination if needed.
      parameters:
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/PerPage'
      description: |
        The `GET` endpoint is to retrieve EPCIS events synchronously.
      responses:
        '200':
          headers:
            GS1-EPCIS-Version:
              $ref: '#/components/headers/GS1-EPCIS-Version'
            GS1-EPCIS-Min:
              $ref: '#/components/headers/GS1-EPCIS-Min'
            GS1-EPCIS-Max:
              $ref: '#/components/headers/GS1-EPCIS-Max'
            GS1-CBV-Version:
              $ref: '#/components/headers/GS1-CBV-Version'
            GS1-EPCIS-Extensions:
              $ref: '#/components/headers/GS1-EPCIS-Extensions'
            GS1-CBV-Extensions:
              $ref: '#/components/headers/GS1-CBV-Extensions'
            Link:
              example: '<https://example.com/queries/SimpleEventQuery/events?perPage=30&nextPageToken=3A1550673874978%2Ci%3AU6D7DENAKwM2gQRRwGrataeq>; rel="next"'
              schema:
                $ref: '#/components/schemas/Link'
            GS1-Next-Page-Token-Expires:
              $ref: '#/components/headers/GS1-Next-Page-Token-Expires'
          description: Contains EPCIS query results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EPCISQueryDocument'
        '400':
          $ref: '#/components/responses/400QueryIssues'
        '401':
          $ref: '#/components/responses/401UnauthorizedRequest'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '413':
          $ref: '#/components/responses/413QueryScopeOrSize'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /nextPageToken/{token}:
    parameters:
      - $ref: '#/components/parameters/Token'
    delete:
      tags:
        - 'Queries'
      summary: Optional endpoint that allows on-demand release of any resources associated with `nextPageToken`.
      responses:
        '204':
          $ref: '#/components/responses/204NextPageTokenInvalidated'
        '501':
          $ref: '#/components/responses/501NotImplemented'

components:
  responses:
    101WebsocketCreated:
      description: |
        Create a WebSocket connection to subscribe to queries. Upon subscription, the server SHALL send all new events
        to subscribing clients. If multiple clients have the same query, each client will receive events which they are
        authorized to see.
      headers:
        Upgrade:
          required: true
          schema:
            type: string
            default: websocket
        Connection:
          required: true
          schema:
            type: string
            default: upgrade
        GS1-Query-Min-Record-Time:
            required: false
            schema:
              $ref: '#/components/schemas/GS1-Query-Min-Record-Time'
    200TopLevelOrEventTypeSubResource:
      headers:
        GS1-EPCIS-Version:
          $ref: '#/components/headers/GS1-EPCIS-Version'
        GS1-EPCIS-Min:
          $ref: '#/components/headers/GS1-EPCIS-Min'
        GS1-EPCIS-Max:
          $ref: '#/components/headers/GS1-EPCIS-Max'
        GS1-CBV-Version:
          $ref: '#/components/headers/GS1-CBV-Version'
        GS1-EPCIS-Extensions:
          $ref: '#/components/headers/GS1-EPCIS-Extensions'
        GS1-CBV-Extensions:
          $ref: '#/components/headers/GS1-CBV-Extensions'

      description: Returns `events`.
      content:
        application/json:
          schema:
            type: array
            items:
              format: string
              example:
                - events
              enum:
                - events
    200EPCISDocumentSingleEvent:
      headers:
        GS1-EPCIS-Version:
          $ref: '#/components/headers/GS1-EPCIS-Version'
        GS1-EPCIS-Min:
          $ref: '#/components/headers/GS1-EPCIS-Min'
        GS1-EPCIS-Max:
          $ref: '#/components/headers/GS1-EPCIS-Max'
        GS1-CBV-Version:
          $ref: '#/components/headers/GS1-CBV-Version'
        GS1-EPCIS-Extensions:
          $ref: '#/components/headers/GS1-EPCIS-Extensions'
        GS1-CBV-Extensions:
          $ref: '#/components/headers/GS1-CBV-Extensions'
      description: An EPCIS document with a single EPCIS event.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EPCISDocumentSingleEvent'
    200EPCISMasterDataDocument:
      headers:
        GS1-EPCIS-Version:
          $ref: '#/components/headers/GS1-EPCIS-Version'
        GS1-EPCIS-Min:
          $ref: '#/components/headers/GS1-EPCIS-Min'
        GS1-EPCIS-Max:
          $ref: '#/components/headers/GS1-EPCIS-Max'
        GS1-CBV-Version:
          $ref: '#/components/headers/GS1-CBV-Version'
        GS1-EPCIS-Extensions:
          $ref: '#/components/headers/GS1-EPCIS-Extensions'
        GS1-CBV-Extensions:
          $ref: '#/components/headers/GS1-CBV-Extensions'
        Link:
          description: |
            A pagination header link. This header works together with the `perPage` and `nextPageToken` query string
            parameters.
            As long as there are more resources to retrieve, the `Link` header contains the URL of the next page and
            the attribute `rel="next"`. The last page is indicated by the absence of the `rel="next"`.
          schema:
            $ref: '#/components/schemas/Link'
        GS1-Next-Page-Token-Expires:
          $ref: '#/components/headers/GS1-Next-Page-Token-Expires'
      description: Returns the EPCIS vocabulary elements.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EPCISMasterDataDocument'
    200EPCISQueryDocument:
      headers:
        GS1-EPCIS-Version:
          $ref: '#/components/headers/GS1-EPCIS-Version'
        GS1-EPCIS-Min:
          $ref: '#/components/headers/GS1-EPCIS-Min'
        GS1-EPCIS-Max:
          $ref: '#/components/headers/GS1-EPCIS-Max'
        GS1-CBV-Version:
          $ref: '#/components/headers/GS1-CBV-Version'
        GS1-EPCIS-Extensions:
          $ref: '#/components/headers/GS1-EPCIS-Extensions'
        GS1-CBV-Extensions:
          $ref: '#/components/headers/GS1-CBV-Extensions'
        Link:
          description: |
            A pagination header link. This header works together with the `perPage` and `nextPageToken` query string
            parameters.
            As long as there are more resources to retrieve, the `Link` header contains the URL of the next page and
            the attribute `rel="next"`. The last page is indicated by the absence of the `rel="next"`.
          schema:
            $ref: '#/components/schemas/Link'
        GS1-Next-Page-Token-Expires:
          $ref: '#/components/headers/GS1-Next-Page-Token-Expires'
      description: Contains EPCIS query results.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EPCISQueryDocument'
    200EPCISDocument:
      headers:
        GS1-EPCIS-Version:
          $ref: '#/components/headers/GS1-EPCIS-Version'
        GS1-EPCIS-Min:
          $ref: '#/components/headers/GS1-EPCIS-Min'
        GS1-EPCIS-Max:
          $ref: '#/components/headers/GS1-EPCIS-Max'
        GS1-CBV-Version:
          $ref: '#/components/headers/GS1-CBV-Version'
        GS1-EPCIS-Extensions:
          $ref: '#/components/headers/GS1-EPCIS-Extensions'
        GS1-CBV-Extensions:
          $ref: '#/components/headers/GS1-CBV-Extensions'
        Link:
          description: |
            A pagination header link. This header works together with the `perPage` and `nextPageToken` query string
            parameters.
            As long as there are more resources to retrieve, the `Link` header contains the URL of the next page and
            the attribute `rel="next"`. The last page is indicated by the absence of the `rel="next"`.
          schema:
            $ref: '#/components/schemas/Link'

        GS1-Next-Page-Token-Expires:
          $ref: '#/components/headers/GS1-Next-Page-Token-Expires'
      description: Returns EPCIS events.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EPCISDocument'
    204NextPageTokenInvalidated:
      description: nextPageToken invalidated successfully.
    200SupportedEventTypes:
      description: Returns all supported EPCIS event types.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EPCISEventTypes'
    204TopLevelResourcesDiscovery:
      description: |
        The `OPTIONS` method is used as a discovery service for EPCIS 2.0 endpoints.
        It describes which EPCIS and CBV versions are supported and used for the top-level resource as well as EPCIS and
        CBV extensions. The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
      headers:
        Allow:
          schema:
            example: OPTIONS, GET
            type: string
            default: OPTIONS, GET
        GS1-EPCIS-Version:
          $ref: '#/components/headers/GS1-EPCIS-Version'
        GS1-EPCIS-Min:
          $ref: '#/components/headers/GS1-EPCIS-Min'
        GS1-EPCIS-Max:
          $ref: '#/components/headers/GS1-EPCIS-Max'
        GS1-CBV-Version:
          $ref: '#/components/headers/GS1-CBV-Version'
        GS1-EPCIS-Extensions:
          $ref: '#/components/headers/GS1-EPCIS-Extensions'
        GS1-Vendor-Version:
          $ref: '#/components/headers/GS1-Vendor-Version'
        GS1-CBV-Extensions:
          $ref: '#/components/headers/GS1-CBV-Extensions'
    204AnonymousQueriesDiscovery:
      description: |
        The `OPTIONS` method is used as a discovery service for anonymous queries endpoints.
        The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
      headers:
        Allow:
          schema:
            example: OPTIONS, POST
            type: string
            default: OPTIONS, POST
        GS1-EPCIS-Version:
          $ref: '#/components/headers/GS1-EPCIS-Version'
        GS1-EPCIS-Min:
          $ref: '#/components/headers/GS1-EPCIS-Min'
        GS1-EPCIS-Max:
          $ref: '#/components/headers/GS1-EPCIS-Max'
        GS1-CBV-Version:
          $ref: '#/components/headers/GS1-CBV-Version'
        GS1-EPCIS-Extensions:
          $ref: '#/components/headers/GS1-EPCIS-Extensions'
        GS1-Vendor-Version:
          $ref: '#/components/headers/GS1-Vendor-Version'
        GS1-CBV-Extensions:
          $ref: '#/components/headers/GS1-CBV-Extensions'

    204EventsEndpointDiscovery:
      description: |
        The `OPTIONS` method is used as a discovery service for `events` endpoints. It describes which EPCIS and CBV
        versions are supported as well as  EPCIS and CBV extensions.
        The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
      headers:
        Allow:
          schema:
            example: OPTIONS, GET
            type: string
            default: OPTIONS, GET
        GS1-EPCIS-Version:
          $ref: '#/components/headers/GS1-EPCIS-Version'
        GS1-EPCIS-Min:
          $ref: '#/components/headers/GS1-EPCIS-Min'
        GS1-EPCIS-Max:
          $ref: '#/components/headers/GS1-EPCIS-Max'
        GS1-CBV-Version:
          $ref: '#/components/headers/GS1-CBV-Version'
        GS1-EPCIS-Extensions:
          $ref: '#/components/headers/GS1-EPCIS-Extensions'
        GS1-Vendor-Version:
          $ref: '#/components/headers/GS1-Vendor-Version'
        GS1-CBV-Extensions:
          $ref: '#/components/headers/GS1-CBV-Extensions'
    204QueryDeleted:
      description: Query deleted and clients disconnected.
    400SubscriptionIssues:
      description: An issue with a subscription occurred.
      content:
        application/json:
          schema:
            example:
              type: "epcisException:SubscriptionControlsException"
              title: "Subscription error"
              status: 400
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 400
                    default: 400
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:SubscriptionControlsException
                      - epcisException:ValidationException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    400QueryIssues:
      description: Query exceptions defined in EPCIS.
      content:
        application/problem+json:
          schema:
            example:
              type: "epcisException:QueryValidationException"
              title: "EPCIS query exception"
              status: 400
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 400
                    default: 400
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:QueryValidationException
                      - epcisException:QueryParameterException
                      - epcisException:ValidationException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    401UnauthorizedRequest:
      description: Authorization information is missing or invalid.
      content:
        application/problem+json:
          schema:
            example:
              type: "epcisException:SecurityException"
              title: "Unauthorised request"
              status: 401
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 401
                    default: 401
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:SecurityException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    403ClientUnauthorized:
      description: Client is unauthorized to access this resource.
      content:
        application/problem+json:
          schema:
            example:
              type: "epcisException:SecurityException"
              title: "Access to resource forbidden"
              status: 403
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 403
                    default: 403
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:SecurityException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    404ResourceNotFound:
      description: The resource was not found. For example, the EPCIS event does not exist or the query does not exist.
      content:
        application/problem+json:
          schema:
            example:
              type: "epcisException:NoSuchNameException"
              title: "Resource not found"
              status: 404
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 404
                    default: 404
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:NoSuchNameException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    413CapturePayloadTooLarge:
      headers:
        GS1-EPCIS-Capture-Limit:
          $ref: '#/components/headers/GS1-EPCIS-Capture-Limit'
        GS1-EPCIS-Capture-File-Size-Limit:
          $ref: '#/components/headers/GS1-EPCIS-Capture-File-Size-Limit'
      description: |
        The `POST` request is too large. It exceeds the limits set in `GS1-EPCIS-Capture-Limit` and/or
        `GS1-EPCIS-Capture-File-Size-Limit`.
      content:
        application/problem+json:
          schema:
            example:
              type: "epcisException:NoSuchNameException"
              title: "Capture Payload too large"
              status: 413
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 413
                    default: 413
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:CaptureLimitExceededException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    413QueryScopeOrSize:
      description: Query result is too large.
      content:
        application/problem+json:
          schema:
            example:
              type: "epcisException:QueryTooComplexException"
              title: "Capture Payload too large"
              status: 413
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 413
                    default: 413
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:QueryTooLargeException
                      - epcisException:QueryTooComplexException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    414URLTooLong:
      description: URL is too long. This is usually a problem with large EPCIS queries in the URL.
      content:
        application/problem+json:
          schema:
            example:
              type: "epcisException:URITooLongException"
              title: "URI Too Long"
              status: 414
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 414
                    default: 414
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:URITooLongException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    500ImplementationException:
      description: An error occurred on the backend.
      content:
        application/problem+json:
          schema:
            example:
              type: "epcisException:ImplementationException"
              title: "A server-side error occurred"
              status: 500
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 500
                    default: 500
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:ImplementationException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    501NotImplemented:
      description: Functionality not supported by server.
      content:
        application/problem+json:
          schema:
            example:
              type: "epcisException:ImplementationException"
              title: "Functionality not supported by server"
              status: 501
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 501
                    default: 501
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:ImplementationException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
  schemas:
    Location:
      description: Location header of a resource.
      type: string
      format: uri
      example: /eventTypes/ObjectEvent/events/eventId123
    RFC7807ProblemResponseBody:
      description: A response as specified in [RFC 7807](https://tools.ietf.org/html/rfc7807).
      type: object
      required:
        - type
        - title
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
          format: uri

    QueryDefinition:
      description: |
        Creating a new query with query type and query body. The query body can either be for EPCIS events or
        EPCIS master data.
      type: object
      required:
        - query
        - queryType
      properties:
        queryType:
          type: string
          enum:
            - events
            - masterData
          example: events
        query:
          example:
            { "query": {
              "eventTypes": "ObjectEvent" ,
              "EQ_bizStep": [
                  "urn:epcglobal:cbv:bizstep:shipping",
                  "urn:epcglobal:cbv:bizstep:receiving" ]
              },
              "queryType": "events"
            }
          oneOf:
            - $ref: '#/components/schemas/EPCISEventsQuery'
            - $ref: '#/components/schemas/EPCISMasterDataQuery'

    EPCISEventsQuery:
      type: object
      description: An EPCIS event query.
      example:
        {
          "eventTypes": "ObjectEvent" ,
          "EQ_bizStep": [
              "urn:epcglobal:cbv:bizstep:shipping",
              "urn:epcglobal:cbv:bizstep:receiving" ]
        }
      externalDocs:
        url: query-schema.json
      items:
        type: object
    SubscriptionID:
      description: The ID of a WebHook subscription.
      example: df5a33e3-5aa3-4403-ae01-99b83234e27b
      type: string
    QueryName:
      description: Unique query name.
      type: string
      example: myQuery
    EPCISMasterDataQuery:
      type: object
      description: An EPCIS master data query.
      externalDocs:
        url: simple-master-data-query.json
      example: {
        "includeAttributes": true,
        "EQ_name": "urn:epcglobal:epcis:vtype:ReadPoint",
        "includeChildren": true
      }
    AllEvent:
      type: string
      description: A virtual EPCIS event type that is the union of all EPCIS event types.
      enum:
        - all
    EPCISMasterDataDocument:
      description: A collection of master data resources.
      example:
        {
          "@context": [
              "https://gs1.github.io/EPCIS/epcis-context.jsonld",
              { "example": "http://ns.example.com/epcis/" },
              { "mda": "http://epcis.example.com/mda" } ],
          "isA": "EPCISMasterDataDocument",
          "schemaVersion": 2.0,
          "creationDate": "2005-07-11T11:30:47.0Z",
          "format": "application/ld+json",
          "epcisHeader": {
            "epcisMasterData": {
              "vocabularyList": [

                {
                  "vocabularyElementList": [
                    {
                      "isA": "urn:epcglobal:epcis:vtype:ReadPoint",
                      "id": "urn:epc:id:sgln:0037000.00729.8201",
                      "attributes": [
                        { "id": "cbvmda:site", "attribute": "0037000007296" },
                        { "id": "cbvmda:sst", "attribute": 201 }
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "epcisBody": {
            "eventList": [ ]
          }
        }
      type: object
      required:
        - epcisBody
        - epcisHeader
      properties:
        '@context':
          type: array
          items:
            anyOf:
              - type: string
                format: uri
              - type: object
        isA:
          type: string
          default: EPCISMasterDataDocument
          example: EPCISMasterDataDocument
        schemaVersion:
          type: string
          pattern: ^\d+(\.\d+)?$
          example: "2.0"
        format:
          type: string
          example: "application/ld+json"
        creationDate:
          type: string
          format: date-time
        epcisBody:
          type: object
          properties:
            eventList:
              type: array
              uniqueItems: true
              items:
                type: object
          required:
            - eventList
        epcisHeader:
          type: object
          properties:
            epcisMasterData:
              type: object
              properties:
                vocabularyList:
                  type: array
                  uniqueItems: true
                  items:
                    type: object
      externalDocs:
        description: |
          To validate EPCIS master data, please use [JSON schema](../JSON/EPCIS-JSON-Schema.json)
          or [SHACL file](../JSON/EPCIS-SHACL.ttl).
        url: ../JSON
    EPCISDocumentSingleEvent:
      description: |
        A single EPCIS event. The full schema is specified in the external JSON-LD and JSON-Schema documentation.
      type: object
      required:
        - epcisBody
      properties:
        '@context':
           type: array
           items:
             anyOf:
               - type: string
                 format: uri
               - type: object
        isA:
          type: string
          default: EPCISDocument
          example: EPCISDocument
        schemaVersion:
          type: number
          example: 2.0
        creationDate:
          type: string
          format: date-time
        format:
          type: string
          example: "application/ld+json"
        epcisBody:
          type: object
          properties:
            event:
              type: object
          required:
            - event
      externalDocs:
        description: |
          An EPCIS document that must be validated with the external JSON Schema.
        url: ../JSON/EPCIS-JSON-Schema-single-event.json
      example:
        {
          "@context": [
              "https://gs1.github.io/EPCIS/epcis-context.jsonld",
              { "example": "http://ns.example.com/epcis/" } ],
          "isA": "EPCISDocument",
          "schemaVersion": 2.0,
          "creationDate": "2005-07-11T11:30:47.0Z",
          "epcisBody": {
            "event":
              {
                "id": "_:event1",
                "isA": "ObjectEvent",
                "action": "OBSERVE",
                "bizStep": "urn:epcglobal:cbv:bizstep:shipping",
                "disposition": "urn:epcglobal:cbv:disp:in_transit",
                "epcList": [ "urn:epc:id:sgtin:0614141.107346.2017","urn:epc:id:sgtin:0614141.107346.2018" ],
                "eventTime": "2005-04-03T20:33:31.116000-06:00",
                "eventTimeZoneOffset": "-06:00",
                "readPoint": { "id": "urn:epc:id:sgln:0614141.07346.1234" },
                "bizTransactionList": [
                  { "type": "urn:epcglobal:cbv:btt:po",
                    "bizTransaction": "http://transaction.acme.com/po/12345678" } ]
              }
          }
        }
    EPCISDocument:
      description: A collection of EPCIS resources.
      type: object
      required:
        - epcisBody
      properties:
        '@context':
           type: array
           items:
             anyOf:
               - type: string
                 format: uri
               - type: object
        isA:
          type: string
          default: EPCISDocument
          example: EPCISDocument
        schemaVersion:
          type: number
        creationDate:
          type: string
          format: date-time
        format:
          type: string
          example: "application/ld+json"
        epcisBody:
          type: object
          properties:
            eventList:
              type: array
              uniqueItems: true
              items:
                type: object
          required:
            - eventList
      example:
        {
          "@context": [
              "https://gs1.github.io/EPCIS/epcis-context.jsonld",
              { "example": "http://ns.example.com/epcis/" } ],
          "isA": "EPCISDocument",
          "schemaVersion": 2.0,
          "creationDate": "2005-07-11T11:30:47.0Z",
          "format": "application/ld+json",
          "epcisBody": {
            "eventList": [
              {
                "id": "_:event1",
                "isA": "ObjectEvent",
                "action": "OBSERVE",
                "bizStep": "urn:epcglobal:cbv:bizstep:shipping",
                "disposition": "urn:epcglobal:cbv:disp:in_transit",
                "epcList": [ "urn:epc:id:sgtin:0614141.107346.2017","urn:epc:id:sgtin:0614141.107346.2018" ],
                "eventTime": "2005-04-03T20:33:31.116000-06:00",
                "eventTimeZoneOffset": "-06:00",
                "readPoint": { "id": "urn:epc:id:sgln:0614141.07346.1234" },
                "bizTransactionList": [
                  { "type": "urn:epcglobal:cbv:btt:po", "bizTransaction": "http://transaction.acme.com/po/12345678" } ]
              },
              {
                "id": "_:event2",
                "isA": "ObjectEvent",
                "action": "OBSERVE",
                "bizStep": "urn:epcglobal:cbv:bizstep:receiving",
                "disposition": "urn:epcglobal:cbv:disp:in_progress",
                "epcList": [ "urn:epc:id:sgtin:0614141.107346.2018" ],
                "eventTime": "2005-04-04T20:33:31.116-06:00",
                "eventTimeZoneOffset": "-06:00",
                "readPoint": { "id": "urn:epc:id:sgln:0012345.11111.400" },
                "bizLocation": { "id": "urn:epc:id:sgln:0012345.11111.0" },
                "bizTransactionList": [
                  { "type": "urn:epcglobal:cbv:btt:po", "bizTransaction": "http://transaction.acme.com/po/12345678" },
                  { "type": "urn:epcglobal:cbv:btt:desadv", "bizTransaction": "urn:epcglobal:cbv:bt:0614141073467:1152" }
                ],
                "example:myField": "Example of a vendor/user extension"
              }
            ]
          }
        }
      externalDocs:
        description: |
          An EPCIS document that must be validated with the [JSON schema](../JSON/EPCIS-JSON-Schema.json) or
          [SHACL file](../JSON/EPCIS-SHACL.ttl).
        url: ../JSON/EPCIS-SHACL.ttl
    EPCISQueryDocument:
      description: A collection of EPCIS resources.
      type: object
      required:
        - epcisBody
      properties:
        '@context':
           type: array
           items:
             uniqueItems: true
             anyOf:
               - type: string
                 format: uri
               - type: object
        isA:
          type: string
          default: EPCISQueryDocument
          example: EPCISQueryDocument
        schemaVersion:
          type: string
          pattern: ^\d+(\.\d+)?$
          example: "2.0"
        creationDate:
          type: string
          format: date-time
        epcisBody:
          type: object
          properties:
            queryResults:
              type: object
              properties:
                queryName:
                  $ref: '#/components/schemas/QueryName'
                subscriptionId:
                  $ref: '#/components/schemas/SubscriptionID'
                resultsBody:
                  type: object
                  required:
                    - eventList
                  properties:
                    eventList:
                      type: array
                      items:
                        type: object
        epcisHeader:
          type: object
          properties:
            epcisMasterData:
              type: object
              properties:
                vocabularyList:
                  type: array
                  uniqueItems: true
                  items:
                    type: object

      example:
        {
          "@context": [
              "https://gs1.github.io/EPCIS/epcis-context.jsonld",
            {
              "example": "http://ns.example.com/epcis/"
            }
          ],
          "isA": "EPCISQueryDocument",
          "schemaVersion": 2.0,
          "creationDate": "2005-07-11T11:30:47.0Z",
          "format": "application/ld+json",
          "epcisBody": {
            "queryResults": {
              "resultsBody": {
                "eventList": [
                  {
                    "id": "_:event1",
                    "isA": "ObjectEvent",
                    "action": "OBSERVE",
                    "bizStep": "urn:epcglobal:cbv:bizstep:shipping",
                    "disposition": "urn:epcglobal:cbv:disp:in_transit",
                    "epcList": [
                        "urn:epc:id:sgtin:0614141.107346.2017",
                        "urn:epc:id:sgtin:0614141.107346.2018"
                    ],
                    "eventTime": "2005-04-03T20:33:31.116000-06:00",
                    "eventTimeZoneOffset": "-06:00",
                    "readPoint": {
                      "id": "urn:epc:id:sgln:0614141.07346.1234"
                    },
                    "bizTransactionList": [
                      {
                        "type": "urn:epcglobal:cbv:btt:po",
                        "bizTransaction": "http://transaction.acme.com/po/12345678"
                      }
                    ]
                  },
                  {
                    "id": "_:event2",
                    "isA": "ObjectEvent",
                    "action": "OBSERVE",
                    "bizStep": "urn:epcglobal:cbv:bizstep:receiving",
                    "disposition": "urn:epcglobal:cbv:disp:in_progress",
                    "epcList": [
                        "urn:epc:id:sgtin:0614141.107346.2018"
                    ],
                    "eventTime": "2005-04-04T20:33:31.116-06:00",
                    "eventTimeZoneOffset": "-06:00",
                    "readPoint": {
                      "id": "urn:epc:id:sgln:0012345.11111.400"
                    },
                    "bizLocation": {
                      "id": "urn:epc:id:sgln:0012345.11111.0"
                    },
                    "bizTransactionList": [
                      {
                        "type": "urn:epcglobal:cbv:btt:po",
                        "bizTransaction": "http://transaction.acme.com/po/12345678"
                      },
                      {
                        "type": "urn:epcglobal:cbv:btt:desadv",
                        "bizTransaction": "urn:epcglobal:cbv:bt:0614141073467:1152"
                      }
                    ],
                    "example:myField": "Example of a vendor/user extension"
                  }
                ]
              }
            }
          }
        }
      externalDocs:
        description: |
          An EPCIS document that must be validated with the [JSON schema](../JSON/EPCIS-JSON-Schema.json) or
          [SHACL file](../JSON/EPCIS-SHACL.ttl).
        url: ../JSON/EPCIS-SHACL.ttl
    Link:
      description: |
        A pagination header link. This header works together with the `perPage` and `nextPageToken` query string
        parameters.
      type: string
      format: uri
    PerPage:
      description: |
        This parameter helps to control the amount of data returned to the client through pagination.
        In the case of EPCIS events, `perPage` specifies the maximum number of events in a response to the client .
        In the case of EPCIS master data, `perPage` specifies the maximum number vocabulary elements. `perPage`
        specifies the upper limit of resources in a response body. It does not mandate that the server reaches this
        limit. For example, if the server sees that some EPCIS events are very
        large, the server can decide to return fewer events to avoid creating an error because the response body is too
        large.

        As long as there are more resources to retrieve, the `Link` header contains the URL of the next page and
        the attribute `rel="next"`. The last page is indicated by the absence of the `rel="next"`. Depending on the
        implementation, there can be a global upper limit for the `perPage` value that the client cannot overwrite,
        which should be stated in the documentation.
      type: integer
      default: 30
    NextPageToken:
      description: |
        Parameter that points to the next list of results when requesting a list of events that is larger than the value
        specified with the `perPage` parameter. Some technologies refer to this as scrolling.
        A `nextPageToken` may be invalidated through timeout. It is up to the specific implementation to provide
        the mechanisms for invalidating tokens.
      type: string
      example: '3A1550673874978%2Ci%3AU6D7DENAKwM2gQRRwGrataeq'
    Upgrade:
      type: string
      description: The `Upgrade` and `Connection` headers are needed to open a Websocket for queries.
      default: websocket
      example: websocket
    Connection:
      example: Upgrade
      description: The `Upgrade` and `Connection` headers are needed to open a Websocket for queries.
      type: string
      default: upgrade
    EPCISEventTypes:
      type: string
      description: The five types of EPCIS events.
      example:
        - ObjectEvent
        - AggregationEvent
        - AssociationEvent
        - TransformationEvent
        - TransactionEvent
      enum:
        - ObjectEvent
        - AggregationEvent
        - AssociationEvent
        - TransformationEvent
        - TransactionEvent

    AbstractQuerySubscription:
      example: {
        "callbackUrl": "https://client.example.com/queryCallback",
        "secret": "0435ojtojt02"
      }
      type: object
      description: |
        This schema contains shared features of EPCIS query subscriptions. If the schema is used in a response, the
        `secret` should not be fully revealed.
      required:
        - callbackUrl
        - secret
      properties:
        callbackUrl:
          description: Callback to receive EPCIS resources and errors.
          type: string
          format: uri
          example: https://client.example.com/queryCallback
        secret:
          example: '0435ojtojt02'
          type: string
          description: Secret generated by the client for the server.
        initialRecordTime:
          $ref: '#/components/schemas/GS1-Query-InitialRecordTime'

    QueryStreamSubscription:
      description: |
        If no query schedule is specified, the client must explicitly set `stream` to `true`. This restriction is to
        prevent clients from accidentally subscribing to EPCIS event streams.

        Example:

        ```
        POST /queries/MyQuery/subscriptions
        {
          "callbackUrl": "https://client.example.com/queryCallback",
          "secret": "0435ojtojt02",
          "stream": true
        }
        ```
      type: object
      example: {"stream":true}
      required:
        - stream
      properties:
        stream:
          $ref: '#/components/schemas/GS1-Query-Stream'

    QueryScheduleSubscription:
      description: |
        A scheduled query subscription is a time-based query execution scheduler. EPCIS 2.0 scheduled queries are scheduled
        in the same manner as cron jobs.

        For example, this query subscription is scheduled to trigger every morning at 1.05am. By setting
        `reportIfEmpty` to `true`, the client's callback URL will be called even if there are no new events that match
        the query.

        ```
        POST /queries/MyQuery/subscriptions
        {
          "callbackUrl": "https://client.example.com/queryCallback",
          "secret": "0435ojtojt02",
          "reportIfEmpty": true,
          "schedule": {
            "hour":"1",
            "minute": "5"
          }
        }
        ```
      type: object
      example: {"schedule": {"hour":"1", "minute": "5"}}
      required:
        - schedule
      properties:
        reportIfEmpty:
          $ref: '#/components/schemas/GS1-Query-ReportIfEmpty'
        schedule:
          type: object
          properties:
            second:
              $ref: '#/components/schemas/GS1-Query-Second'
            minute:
              $ref: '#/components/schemas/GS1-Query-Minute'
            hour:
              $ref: '#/components/schemas/GS1-Query-Hour'
            dayOfMonth:
              $ref: '#/components/schemas/GS1-Query-DayOfMonth'
            month:
              $ref: '#/components/schemas/GS1-Query-Month'
            dayOfWeek:
              $ref: '#/components/schemas/GS1-Query-DayOfWeek'
    GS1-Query-InitialRecordTime:
      description: |
        An optional header to specify a time used to constrain what resources are considered when processing a query
        subscription. This value only applies the first time a subscriber receives events. If omitted, the default
        value is the current time.
      type: string
      format: date-time
      example: "2020-04-04T20:33:31.116-06:00"
    GS1-Query-Min-Record-Time:
      example: 2020-04-04T20:33:31.116-06:00
      description: |
        An optional header to specify the smallest possible record time for EPCIS events in a
        query subscription.
      type: string
      format: date-time
    GS1-Query-ReportIfEmpty:
      example: false
      type: boolean
      default: false
      description: Flag to specify subscribed clients should be notified if the query result is empty.
    GS1-Query-Second:
      description: |
        Specifies that the query time must have a matching seconds value. The range for this parameter is 0
        through 59, inclusive.
      example: 0
      type: string
      pattern: "(\\g<element>,)*\\g<element>|(?<element>(\\g<number>|\\g<range>))|(?<range>(\\[\\g<number>\\-\\g<number>\\]))|(?<number>([0-59]))"
    GS1-Query-Minute:
      description: |
        Specifies that the query time must have a matching minute value. The range for this parameter is 0 through 59,
        inclusive.
      example: 5
      type: string
      pattern: "(\\g<element>,)*\\g<element>|(?<element>(\\g<number>|\\g<range>))|(?<range>(\\[\\g<number>\\-\\g<number>\\]))|(?<number>([0-59]))"
    GS1-Query-Hour:
      description: |
        Specifies that the query time must have a matching hour value. The range for this parameter is 0 through 23,
        inclusive, with 0 denoting the hour that begins at midnight, and 23 denoting the hour that ends at midnight.
      example: 1
      type: string
      pattern: "(\\g<element>,)*\\g<element>|(?<element>(\\g<number>|\\g<range>))|(?<range>(\\[\\g<number>\\-\\g<number>\\]))|(?<number>([0-23]))"
    GS1-Query-DayOfMonth:
      description: |
        Specifies that the query time must have a matching day of month value. The range for this parameter is 1 through
        31, inclusive.
      example: 1
      type: string
      pattern: "(\\g<element>,)*\\g<element>|(?<element>(\\g<number>|\\g<range>))|(?<range>(\\[\\g<number>\\-\\g<number>\\]))|(?<number>([1-31]))"
    GS1-Query-Month:
      description: |
        Specifies that the query time must have a matching month value. The range for this parameter is 1 through 12,
        inclusive.
      example: 1
      type: string
      pattern: "(\\g<element>,)*\\g<element>|(?<element>(\\g<number>|\\g<range>))|(?<range>(\\[\\g<number>\\-\\g<number>\\]))|(?<number>([1-12]))"
    GS1-Query-DayOfWeek:
      description: |
        Specifies that the query time must have a matching day of week value. The range for this parameter is 1 through
        7, inclusive, with 1 denoting Monday, 2 denoting Tuesday, and so forth, up to 7 denoting Sunday.
      example: 1
      type: string
      pattern: "(\\g<element>,)*\\g<element>|(?<element>(\\g<number>|\\g<range>))|(?<range>(\\[\\g<number>\\-\\g<number>\\]))|(?<number>([1-7]))"
    GS1-Query-Stream:
      type: boolean
      description: |
        If now schedule is specified and `stream` is `true`, the standing query SHALL report immediately whenever a
        captured EPCIS event matches the query criteria.
      default: true
      enum:
        - true


    # describe header schema
    GS1-EPCIS-Version:
      description: The EPCIS version.
      type: string
      pattern: ^\d+(\.\d+)?$
      example: "2.0"
    GS1-EPCIS-Min:
      description: The lowest EPCIS version supported.
      type: string
      pattern: ^\d+(\.\d+)?$
      example: "2.0"
    GS1-EPCIS-Max:
      example: "1.0"
      description: The highest EPCIS version supported.
      type: string
      pattern: ^\d+(\.\d+)?$
    GS1-CBV-Version:
      example: '2.0'
      description: The core business vocabulary version.
      type: string
      pattern: ^\d+(\.\d+)?$
    GS1-EPCIS-Extensions:
      description: Specific EPCIS extensions supported (e.g. for FIT).
      example: {"example-epc-ext": "http://example.com/epcis/"}
      type: object
    GS1-Vendor-Version:
      example: example-version-1.0
      description: A versioning scheme that can be freely chosen by the vendor.
      anyOf:
        - type: string
        - type: object
    GS1-CBV-Extensions:
      description: An optional header to specify the vocabulary for the top-level endpoints.
      example: {"ex": "http://example.com/vendor1", "vendor": "<https://example.org/defs#"}
      type: object
    GS1-EPCIS-Capture-Limit:
      example: 500
      description: The maximum number of EPCIS events that can be captured per call.
      type: string
      pattern: ^(\d+|\*)$
    GS1-EPCIS-Capture-File-Size-Limit:
      example: 1024
      description: The maximum event document length in octets (8-bit bytes).
      type: string
      pattern: ^(\d+|\*)$
    GS1-Next-Page-Token-Expires:
      example: '2017-07-21T17:32:28Z'
      description: The expiry time for nextPageToken. This header is optional.
      type: string
      format: date-time

  parameters:
    # Top-level resource instances
    EPC:
      description: An electronic product code value.
      example: urn:epc:id:sgtin:0614141.107346.2018
      required: true
      in: path
      name: epc
      schema:
        type: string
        format: uri
    BizStep:
      description: A business step value.
      example: urn:epcglobal:cbv:bizstep:receiving
      required: true
      in: path
      name: bizStep
      schema:
        type: string
        format: uri
    BizLocation:
      description: A business location value.
      example: urn:epc:id:sgln:0012345.11111.0
      required: true
      in: path
      name: bizLocation
      schema:
        type: string
        format: uri
    ReadPoint:
      description: A read point value.
      example: urn:epc:id:sgln:0012345.11111.400
      required: true
      in: path
      name: readPoint
      schema:
        type: string
        format: uri
    Disposition:
      description: A disposition value.
      example: urn:epcglobal:cbv:disp:in_progress
      required: true
      in: path
      name: disposition
      schema:
        type: string
        format: uri
    EventID:
      name: eventID
      in: path
      description: |
        The ID of an EPCIS event. Because of the `all` reserved value for EPCIS event types,
        an EPCIS event ID must be unique across all events in the system.
      required: true
      example: "_:event1"
      schema:
        type: string
    EventType:
      name: eventType
      in: path
      example: ObjectEvent
      required: true
      description: |
        Names of EPCIS event types plus the reserved name `all`,
        which is the union of all EPCIS event types
      schema:
        oneOf:
          - $ref: '#/components/schemas/EPCISEventTypes'
          - $ref: '#/components/schemas/AllEvent'
    QueryName:
      in: path
      name: queryName
      description: The name of an EPCIS event or master data query.
      required: true
      schema:
        $ref: '#/components/schemas/QueryName'
    Token:
      in: path
      name: token
      required: true
      schema:
        $ref: '#/components/schemas/NextPageToken'
    PerPage:
      in: query
      name: perPage
      schema:
        $ref: '#/components/schemas/PerPage'
    NextPageToken:
      in: query
      name: nextPageToken
      schema:
        $ref: '#/components/schemas/NextPageToken'
    Upgrade:
      in: header
      name: Upgrade
      required: false
      schema:
        $ref: '#/components/schemas/Upgrade'
    Connection:
      in: header
      name: Connection
      required: false
      schema:
        $ref: '#/components/schemas/Connection'
    GS1-Query-Second:
      in: query
      name: second
      required: false
      schema:
        $ref: '#/components/schemas/GS1-Query-Second'
    GS1-Query-Minute:
      in: query
      name: minute
      required: false
      schema:
        $ref: '#/components/schemas/GS1-Query-Minute'
    GS1-Query-Hour:
      in: query
      name: hour
      required: false
      schema:
        $ref: '#/components/schemas/GS1-Query-Hour'
    GS1-Query-DayOfMonth:
      in: query
      name: dayOfMonth
      required: false
      schema:
        $ref: '#/components/schemas/GS1-Query-DayOfMonth'
    GS1-Query-Month:
      in: query
      name: month
      required: false
      schema:
        $ref: '#/components/schemas/GS1-Query-Month'
    GS1-Query-DayOfWeek:
      in: query
      name: dayOfWeek
      required: false
      schema:
        $ref: '#/components/schemas/GS1-Query-DayOfWeek'
    GS1-Query-ReportIfEmpty:
      in: query
      name: reportIfEmpty
      required: false
      schema:
        $ref: '#/components/schemas/GS1-Query-ReportIfEmpty'
    GS1-Query-Stream:
      in: query
      name: stream
      schema:
        $ref: '#/components/schemas/GS1-Query-Stream'
    GS1-Query-InitialRecordTime:
      in: query
      name: initialRecordTime
      required: false
      schema:
        $ref: '#/components/schemas/GS1-Query-InitialRecordTime'
    # request headers from schema
    GS1-EPCIS-Version:
      in: header
      name: GS1-EPCIS-Version
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-Version'
    GS1-EPCIS-Min:
      in: header
      name: GS1-EPCIS-Min
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-Min'
    GS1-EPCIS-Max:
      in: header
      name: GS1-EPCIS-Max
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-Max'
    GS1-CBV-Version:
      in: header
      name: GS1-CBV-Version
      schema:
        $ref: '#/components/schemas/GS1-CBV-Version'
    GS1-EPCIS-Extensions:
      in: header
      name: GS1-EPCIS-Extensions
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-Extensions'
    GS1-CBV-Extensions:
      in: header
      name: GS1-CBV-Extensions
      schema:
        $ref: '#/components/schemas/GS1-CBV-Extensions'

  headers:
    # response headers from schema
    GS1-EPCIS-Version:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-Version'
    GS1-EPCIS-Min:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-Min'
    GS1-EPCIS-Max:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-Max'
    GS1-CBV-Version:
      schema:
        $ref: '#/components/schemas/GS1-CBV-Version'
    GS1-EPCIS-Extensions:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-Extensions'
    GS1-Vendor-Version:
      schema:
        $ref: '#/components/schemas/GS1-Vendor-Version'
    GS1-CBV-Extensions:
      schema:
        $ref: '#/components/schemas/GS1-CBV-Extensions'
    GS1-EPCIS-Capture-Limit:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-Capture-Limit'
    GS1-Query-Min-Record-Time:
      $ref: '#/components/schemas/GS1-Query-Min-Record-Time'
    GS1-EPCIS-Capture-File-Size-Limit:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-Capture-File-Size-Limit'
    GS1-Next-Page-Token-Expires:
      schema:
        $ref: '#/components/schemas/GS1-Next-Page-Token-Expires'

  requestBodies:
    CreateQuery:
      description: Creates and executes new EPCIS events or EPCIS master data query.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QueryDefinition'
