openapi: "3.0.3"
info:
  version: 2.0.0
  title: EPCIS 2.0 REST Bindings
  license:
    name: Apache2

tags:
- name: discovery
  description: >
    Endpoints to obtain information about the endpoint, such as EPCIS and CBV versions or custom vocabularies.
- name: capture
  description: >
    Endpoints to capture EPCIS events in bulk or individually.
- name: events
  description: >
    Endpoints that expose EPCIS events as Web resources.
- name: top-level-resources
  description: >
    Endpoints to browse EPCIS events by common top-level resources: electronic product codes, business steps,
    business locations, read points and dispositions.
- name: queries
  description: >
    Endpoints to create large named or anonymous queries using the EPCIS query language. Named queries have a custom
    name and are stored until deleted by the user. Anonymous queries are not persisted and only available to the caller.
    These endpoints also support query subscription using event triggers or scheduling.
- name: masterdata
  description: >
    Endpoints to create master data queries and subscribe to those queries.

paths:
  /:
    options:
      tags:
        - discovery
      summary: Query server settings, EPCIS version(s) and related vocabularies/standards.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
        - $ref: '#/components/parameters/GS1-Vendor-version'
        - $ref: '#/components/parameters/GS1-CAPTURE-limit'
        - $ref: '#/components/parameters/GS1-CAPTURE-file-size-limit'
      responses:
        '204':
          description: Server can comply with the GS1-EPCIS-related requirements from the client.
          headers:
            Allow:
              schema:
                type: string
                enum:
                  - OPTIONS
            Link:
              description: Link to the official standard document
              example: "<https://www.gs1.org/sites/default/files/docs/epc/EPCIS-Standard-2.0.pdf>; type=application/pdf; rel=help'"
              schema:
                $ref: '#/components/schemas/LinkToStandard'
            GS1-EPCIS-version: 
              $ref: '#/components/headers/GS1-EPCIS-version'
            GS1-EPCIS-min:
              $ref: '#/components/headers/GS1-EPCIS-min'
            GS1-EPCIS-max:
              $ref: '#/components/headers/GS1-EPCIS-max'
            GS1-CBV-version:
              $ref: '#/components/headers/GS1-CBV-version'
            GS1-EPCIS-extensions:
              $ref: '#/components/headers/GS1-EPCIS-extensions'
            GS1-Vendor-version:
              $ref: '#/components/headers/GS1-Vendor-version'
            GS1-CBV-extensions:
              $ref: '#/components/headers/GS1-CBV-extensions'
            GS1-CAPTURE-limit:
              $ref: '#/components/headers/GS1-CAPTURE-limit'
            GS1-CAPTURE-file-size-limit:
              $ref: '#/components/headers/GS1-CAPTURE-file-size-limit'

  /capture:
    options:
      tags:
        - discovery
      summary: Discover the settings of the capture interface.
      description: >
        The `OPTIONS` method is used as a discovery service for `/capture`. It describes which EPCIS and CBV versions
        are supported, EPCIS and CBV extensions, the payload size as a EPCIS events count (`GS1-CAPTURE-limit header`)
        or maximum payload size in bytes (`GS1-CAPTURE-file-size-limit`).
        The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
      responses:
        '204':
          description: >
            Header describing how to use the the capture endpoint.
          headers:
            Allow:
              example:
                - POST
                - OPTIONS
              schema:
                type: string
                enum:
                  - POST
                  - OPTIONS
            Link:
              description: Link header used to link to the official standard document
              example: "<https://www.gs1.org/sites/default/files/docs/epc/EPCIS-Standard-2.0.pdf>; type=application/pdf; rel=help'"
              schema:
                $ref: '#/components/schemas/LinkToStandard'
            GS1-EPCIS-version:
              $ref: '#/components/headers/GS1-EPCIS-version'
            GS1-EPCIS-min:
              $ref: '#/components/headers/GS1-EPCIS-min'
            GS1-EPCIS-max:
              $ref: '#/components/headers/GS1-EPCIS-max'
            GS1-CBV-version:
              $ref: '#/components/headers/GS1-CBV-version'
            GS1-EPCIS-extensions:
              $ref: '#/components/headers/GS1-EPCIS-extensions'
            GS1-Vendor-version:
              $ref: '#/components/headers/GS1-Vendor-version'
            GS1-CBV-extensions:
              $ref: '#/components/headers/GS1-CBV-extensions'
            GS1-CAPTURE-limit:
              $ref: '#/components/headers/GS1-CAPTURE-limit'
            GS1-CAPTURE-file-size-limit:
              $ref: '#/components/headers/GS1-CAPTURE-file-size-limit'
    post:
      tags:
        - capture
      summary: Stores one or more EPCIS events. The server either accepts or rejects all events.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      description: >
        EPCIS events are added in bulk using the capture interface. To remain compatible with EPCIS 1.2, EPCIS 2.0 makes
        event ids optional. If event ids are missing, the server should populate the event id with a unique value.
        Otherwise it won't be possible to retrieve these events.

        To prevent timeouts for large payloads, the client
        potentially has to split the payload into several capture calls. To that end, the server specified a capture
        limit (number of events) and file size limit (payload size).

        A successful capturing of events does not guarantee that events will be stored. Instead, the server returns a
        capture id, which the client can use to obtain information about the capture job.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EPCISEventsDocument'
      responses:
        '202':
          description: >
            Successfully captured one or more EPCIS events. The request returns a unique
            capture job URL in the Location header.
          headers:
            Location:
              $ref: '#/components/headers/Location'
        '400':
          description: An error occurred while capturing EPCIS events. All events are rejected.
          content:
            application/problem+json:
              schema:
                allOf:
                  - properties:
                      status:
                        type: integer
                        enum:
                          - 400
                        default: 400
                      type:
                        type: string
                        format: uri
                        enum:
                          - epcisException:ValidationException
                  - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '413':
          $ref: '#/components/responses/413CapturePayloadTooLarge'

  /capture/{captureID}:
    parameters:
      - in: path
        name: captureID
        example: /capture/id9261379075
        description: A unique value identifying a capture job generated by the server.
        required: true
        schema:
          type: string
    options:
      tags:
        - discovery
      summary: Query meta data of the query job.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used for a given capture job.
      responses:
        '204':
          description: >
            Headers describing the vocabularies and CBV and EPCIS versions used in the capture job
          headers:
            Allow:
              example:
                - GET
                - OPTIONS
              schema:
                type: string
                enum:
                  - GET
                  - OPTIONS
            Link:
              description: Link header used to link to the official standard document
              example: "<https://www.gs1.org/sites/default/files/docs/epc/EPCIS-Standard-2.0.pdf>; type=application/pdf; rel=help'"
              schema:
                $ref: '#/components/schemas/LinkToStandard'
            GS1-EPCIS-version:
              $ref: '#/components/headers/GS1-EPCIS-version'
            GS1-EPCIS-min:
              $ref: '#/components/headers/GS1-EPCIS-min'
            GS1-EPCIS-max:
              $ref: '#/components/headers/GS1-EPCIS-max'
            GS1-CBV-version:
              $ref: '#/components/headers/GS1-CBV-version'
            GS1-EPCIS-extensions:
              $ref: '#/components/headers/GS1-EPCIS-extensions'
            GS1-Vendor-version:
              $ref: '#/components/headers/GS1-Vendor-version'
            GS1-CBV-extensions:
              $ref: '#/components/headers/GS1-CBV-extensions'
            GS1-CAPTURE-limit:
              $ref: '#/components/headers/GS1-CAPTURE-limit'
            GS1-CAPTURE-file-size-limit:
              $ref: '#/components/headers/GS1-CAPTURE-file-size-limit'
    get:
      tags:
        - capture
      summary: Returns information about a specific capture job.

      description: >
        This endpoint provides information about a capture job. Each time events are captured, the server generates
        a unique capture id.
      responses:
        '200':
          description: >
            If the job was successful, a list of absolute, endpoint-specific URLs of all events, in the sequence
            in which they were submitted by the client.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uri
                  example:
                    - /eventTypes/ObjectEvent/events/oa123
                    - /eventTypes/ObjectEvent/events/oa345
                uniqueItems: true
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /eventTypes:
    options:
      tags:
        - discovery
      summary: Query meta data related to the `/events` enpoint.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          $ref: '#/components/responses/204EventEndpointsOptionsResponse'
    get:
      tags:
        - events
      summary: Returns all EPCIS event types currently available in the EPCIS repository.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      description: >
        EPCIS events type specifies the context of an event. This endpoint returns all EPCIS types that are
        currently in the repository.
      responses:
        '200':
          $ref: '#/components/responses/200SupportedEventTypes'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /eventTypes/{eventType}/events:
    parameters:
      - $ref: '#/components/parameters/EventType'
      - $ref: '#/components/parameters/GS1-EPCIS-version'
      - $ref: '#/components/parameters/GS1-EPCIS-min'
      - $ref: '#/components/parameters/GS1-EPCIS-max'
      - $ref: '#/components/parameters/GS1-CBV-version'
      - $ref: '#/components/parameters/GS1-EPCIS-extensions'
      - $ref: '#/components/parameters/GS1-CBV-extensions'
    options:
      tags:
        - discovery
      summary: Query meta data related to the /events enpoint.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          description: >
            The `OPTIONS` method is used as a discovery service for `/events` endpoints. It describes which EPCIS and CBV
            versions are supported as well as  EPCIS and CBV extensions.
            The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
          headers:
            Allow:
              schema:
                example:
                  - GET
                  - OPTIONS
                  - POST
                type: string
                enum:
                  - GET
                  - OPTIONS
                  - POST
            Link:
              description: Link header used to link to the official standard document
              example: "<https://www.gs1.org/sites/default/files/docs/epc/EPCIS-Standard-2.0.pdf>; type=application/pdf; rel=help'"
              schema:
                $ref: '#/components/schemas/LinkToStandard'
    get:
      tags:
        - events
      summary: >
        Returns EPCIS events of a given EPCIS event type. If 'all' is used instead of an EPCIS
        event type, every event in the repository is returned.
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'

      description: >
        This endpoint returns all EPCIS events of a specific EPCIS event type up to the amount defined in `perPage`.
        The server returns a 'link' header to point to the remaining results.

        If the EPCIS event type is not needed, `all` can be used instead of an EPCIS event type.

        The client can further restrict the list of events returned by filtering events using the EPCIS query
        language as URL query string parameters.

        Example:

        ```
        https://example.com/eventTypes/ObjectEvent/events?EQ_bizStep=urn%3Aepcglobal%3Acbv%3Abizstep%3Ashipping%2Curn%3Aepcglobal%3Acbv%3Abizstep%3Adecommissioning&GE_eventTime=2015-03-15T00%3A00%3A00.000-04%3A00
        ```
      responses:
        '200':
          $ref: '#/components/responses/200EPCISEventResponse'
        '400':
          $ref: '#/components/responses/400QueryException'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'

        '414':
          $ref: '#/components/responses/414URLTooLong'
        '500':
          $ref: '#/components/responses/500ImplementationException'

    post:
      tags:
        - capture
      summary: Creates an individual EPCIS event.
      description: >
        An individual EPCIS event can be created by making a POST request to the EPCIS event type of
        the EPCIS event that is being captured. If the client does not wish to specify the EPCIS event type,
        the ` /eventTypes/all/events` endpoint can be used. Alternatively, the client can also use the `/capture` interface and
        and capture a single event.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEPCISEvent'

      responses:
        '201':
          description: >
            Successfully created (captured) one EPCIS event. The request return the URL of the newly created
            EPCIS event in the Location header.
          headers:
            Location:
              $ref: '#/components/headers/Location'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewEPCISEvent'

        '400':
          description: An error occurred while creating the EPCIS event. All events are rejected.
          content:
            application/problem+json:
              schema:
                allOf:
                  - properties:
                      status:
                        type: integer
                        enum:
                          - 400
                        default: 400
                      type:
                        type: string
                        format: uri
                        enum:
                          - epcisException:ValidationException
                  - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '413':
          $ref: '#/components/responses/413CapturePayloadTooLarge'

  /eventTypes/{eventType}/events/{eventID}:
    parameters:
      - $ref: '#/components/parameters/EventType'
      - $ref: '#/components/parameters/EventID'
    options:
      tags:
        - discovery
      summary: Query meta data related to the `/events` enpoint.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          $ref: '#/components/responses/204EventEndpointsOptionsResponse'
    get:
      tags:
        - events
      summary: Returns an individual EPCIS event.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      description: >
        This endpoint accesses individual events using their unique id. If the EPCIS event type is not known
        or irrelevant, `all` can be used instead of an EPCIS event type. The response body is an `EPCISDocument` with
        the unique event. The response body is an `EPCISDocument` with the unique event.
      responses:
        '200':
          $ref: '#/components/responses/200EPCISEventResponse'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /epcs:
    options:
      tags:
        - discovery
      summary: Query meta data related to the electronic product codes enpoint.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          $ref: '#/components/responses/204TopLevelResourcesOptionsResponse'

    get:
      tags:
        - events
        - top-level-resources
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'

        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      summary: Returns known electronic product codes
      responses:
        '200':
          headers:
            GS1-EPCIS-version:
              $ref: '#/components/headers/GS1-EPCIS-version'
            GS1-EPCIS-min:
              $ref: '#/components/headers/GS1-EPCIS-min'
            GS1-EPCIS-max:
              $ref: '#/components/headers/GS1-EPCIS-max'
            GS1-CBV-version:
              $ref: '#/components/headers/GS1-CBV-version'
            GS1-EPCIS-extensions:
              $ref: '#/components/headers/GS1-EPCIS-extensions'
            GS1-CBV-extensions:
              $ref: '#/components/headers/GS1-CBV-extensions'
            Link:
              $ref: '#/components/headers/Link'
          description: >
            Returns a list of electronic product codes. If there are electronic product codes than specified by the
            `perPage` parameter, the client will be given the URL to retrieve more electronic product codes in the
            `Link` header.
            If the client specifies extension mappings, the response will use them where they match. Otherwise,
            the full resource address is used.
          content:
            application/json:
              schema:
                example:
                  - urn:epc:id:sgtin:0614141.107346.2018
                  - https://id.gs1.com/01/04012345123456
                  - urn:epc:id:sgtin:0614141.107346.2017
                type: array
                items:
                  type: string
                  format: uri
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '500':
          $ref: '#/components/responses/500ImplementationException'


  /epcs/{epc}/events:
    parameters:
      - $ref: '#/components/parameters/EPC'

    options:
      tags:
        - discovery
      summary: Query meta data related to the electronic product codes enpoint.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          $ref: '#/components/responses/204TopLevelResourcesOptionsResponse'
    get:
      tags:
        - events
        - top-level-resources
      summary: Returns all EPCIS events with the electronic product code and of the given EPCIS event type.
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'

      description: >
        This endpoint helps to navigate EPCIS events by EPCIS event type within a top-level resource. It returns all
        EPCIS events of a specific EPCIS event type and electronic product code, up to the amount defined
        in `perPage`. The server returns a `Link` header to point to the remaining results. If the EPCIS event type is not
        needed, `all` can be used instead of an EPCIS event type.

        Optionally, EPCIS events can be further filtered using the EPCIS query language in as query string parameters.
        In this case, ensure that the EPCIS query does not specify an EPCIS event type other than the EPCIS event type
        in the path. To specify multiple EPCIS event types, use `all` instead of an EPCIS event type in the path and
        specify EPCIS event types as query string parameter.

        Example:

        ```
        https://example.com/epcs/urn:epc:id:sgtin:0614141.107346.2018/events?EQ_bizStep=urn%3Aepcglobal%3Acbv%3Abizstep%3Ashipping%2Curn%3Aepcglobal%3Acbv%3Abizstep%3Adecommissioning&GE_eventTime=2015-03-15T00%3A00%3A00.000-04%3A00
        ```
      responses:
        '200':
          $ref: '#/components/responses/200EPCISEventResponse'
        '400':
          $ref: '#/components/responses/400QueryException'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '414':
          $ref: '#/components/responses/414URLTooLong'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /epcs/{epc}/events/{eventID}:
    parameters:
      - $ref: '#/components/parameters/EPC'

      - $ref: '#/components/parameters/EventID'
    options:
      tags:
        - discovery
      summary: Query meta data related to the electronic product codes enpoint.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          $ref: '#/components/responses/204TopLevelResourcesOptionsResponse'
    get:
      tags:
        - events
        - top-level-resources
      summary: Returns an EPCIS event by event ID.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      description: >
        This endpoint accesses individual events with the electronic product code and EPCIS event type specified
        in the path. If the EPCIS event type is not known or irrelevant, `all` can be used instead of an EPCIS event
        type. The response body is an `EPCISDocument` with the unique event. The response body is an `EPCISDocument` with
        the unique event.
      responses:
        '200':
          $ref: '#/components/responses/200EPCISEventResponse'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /bizSteps:
    options:
      tags:
        - discovery
      summary: Query meta data related to the business steps enpoint.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          $ref: '#/components/responses/204TopLevelResourcesOptionsResponse'
    get:
      tags:
        - events
        - top-level-resources
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'

        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      summary: Returns known business steps
      responses:
        '200':
          headers:
            GS1-EPCIS-version:
              $ref: '#/components/headers/GS1-EPCIS-version'
            GS1-EPCIS-min:
              $ref: '#/components/headers/GS1-EPCIS-min'
            GS1-EPCIS-max:
              $ref: '#/components/headers/GS1-EPCIS-max'
            GS1-CBV-version:
              $ref: '#/components/headers/GS1-CBV-version'
            GS1-EPCIS-extensions:
              $ref: '#/components/headers/GS1-EPCIS-extensions'
            GS1-CBV-extensions:
              $ref: '#/components/headers/GS1-CBV-extensions'
            Link:
              $ref: '#/components/headers/Link'
          description: >
            Returns a list of business steps. If there are business steps than specified by the
            `perPage` parameter, the client will be given the URL to retrieve more business steps in the `Link` header.
            If the client specifies extension mappings, the response will use them where they match. Otherwise,
            the full resource address is used.
          content:
            application/json:
              schema:
                example:
                  - ex1:qualityCheck
                  - urn:epcglobal:cbv:bizstep:receiving
                  - vendor2:QA
                type: array
                items:
                  type: string
                  format: uri

  /bizSteps/{bizStep}/events:
    parameters:
      - $ref: '#/components/parameters/BizStep'

    options:
      tags:
        - discovery
      summary: Query meta data related to the business steps enpoint.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          $ref: '#/components/responses/204TopLevelResourcesOptionsResponse'
    get:
      tags:
        - events
        - top-level-resources
      summary: Returns all EPCIS events occurring at that business step and of the given EPCIS event type.
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'

      description: >
        This endpoint helps to navigate EPCIS events by EPCIS event type within a top-level resource. It returns all
        EPCIS events of a specific EPCIS event type and business step, up to the amount defined
        in `perPage`. The server returns a `Link` header to point to the remaining results. If the EPCIS event type is not
        needed, `all` can be used instead of an EPCIS event type.

        Optionally, EPCIS events can be further filtered using the EPCIS query language in as query string parameters.
        In this case, ensure that the EPCIS query does not specify an EPCIS event type in the path. To specify multiple
        EPCIS event types, use `all` instead of an EPCIS event type in the path and specify
        EPCIS event types as query string parameter.

        Example:

        ```
        https://example.com/bizSteps/urn:epcglobal:cbv:bizstep:receiving/events?GE_eventTime=2015-03-15T00%3A00%3A00.000-04%3A00
        ```
      responses:
        '200':
          $ref: '#/components/responses/200EPCISEventResponse'
        '400':
          $ref: '#/components/responses/400QueryException'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '414':
          $ref: '#/components/responses/414URLTooLong'

        '500':
          $ref: '#/components/responses/500ImplementationException'

  /bizSteps/{bizStep}/events/{eventID}:
    parameters:
      - $ref: '#/components/parameters/BizStep'

      - $ref: '#/components/parameters/EventID'
    options:
      tags:
        - discovery
      summary: Query meta data related to the business steps enpoint.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          $ref: '#/components/responses/204TopLevelResourcesOptionsResponse'
    get:
      tags:
        - events
        - top-level-resources
      summary: Returns an EPCIS event by event ID.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      description: >
        This endpoint accesses individual events with the business step and EPCIS event type specified
        in the path. If the EPCIS event type is not known or irrelevant, `all` can be used instead of an
        EPCIS event type. The response body is an `EPCISDocument` with the unique event. The response body is an
        `EPCISDocument` with the unique event.
      responses:
        '200':
          $ref: '#/components/responses/200EPCISEventResponse'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /bizLocations:
    options:
      tags:
        - discovery
      summary: Query meta data related to the business locations enpoint.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          $ref: '#/components/responses/204TopLevelResourcesOptionsResponse'
    get:
      tags:
        - events
        - top-level-resources
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'

        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      summary: Returns known business locations
      responses:
        '200':
          headers:
            GS1-EPCIS-version:
              $ref: '#/components/headers/GS1-EPCIS-version'
            GS1-EPCIS-min:
              $ref: '#/components/headers/GS1-EPCIS-min'
            GS1-EPCIS-max:
              $ref: '#/components/headers/GS1-EPCIS-max'
            GS1-CBV-version:
              $ref: '#/components/headers/GS1-CBV-version'
            GS1-EPCIS-extensions:
              $ref: '#/components/headers/GS1-EPCIS-extensions'
            GS1-CBV-extensions:
              $ref: '#/components/headers/GS1-CBV-extensions'
            Link:
              $ref: '#/components/headers/Link'
          description: >
            Returns a list of business locations. If there are business locations than specified by the
            `perPage` parameter, the client will be given the URL to retrieve more business locations in the `Link` header.
            If the client specifies extension mappings, the response will use them where they match. Otherwise,
            the full resource address is used.
          content:
            application/json:
              schema:
                example:
                  - urn:epc:id:sgln:0012345.11111.0
                  - https://id.gs1.org/gln/0614141123452
                type: array
                items:
                  type: string
                  format: uri


  /bizLocations/{bizLocation}/events:
    parameters:
      - $ref: '#/components/parameters/BizLocation'

    options:
      tags:
        - discovery
      summary: Query meta data related to the business locations enpoint.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          $ref: '#/components/responses/204TopLevelResourcesOptionsResponse'
    get:
      tags:
        - events
        - top-level-resources
      summary: Returns all EPCIS events occurring at that business location and of the given EPCIS event type.
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'

      description: >
        This endpoint helps to navigate EPCIS events by EPCIS event type within a top-level resource. It returns all
        EPCIS events of a specific EPCIS event type and business location, up to the amount defined
        in `perPage`. The server returns a `Link` header to point to the remaining results. If the EPCIS event type is not
        needed, `all` can be used instead of an EPCIS event type.

        Optionally, EPCIS events can be further filtered using the EPCIS query language in as query string parameters.
        In this case, ensure that the EPCIS query does not specify an EPCIS event type in the path. To specify multiple
        EPCIS event types, use `all` instead of an EPCIS event type in the path and specify
        EPCIS event types as query string parameter.

        Example:

        ```
        https://example.com/bizLocations/urn:epc:id:sgln:0012345.11111.0/ /eventTypes/ObjectEvent/events?GE_eventTime=2015-03-15T00%3A00%3A00.000-04%3A00
        ```
      responses:
        '200':
          $ref: '#/components/responses/200EPCISEventResponse'
        '400':
          $ref: '#/components/responses/400QueryException'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '414':
          $ref: '#/components/responses/414URLTooLong'

        '500':
          $ref: '#/components/responses/500ImplementationException'

  /bizLocations/{bizLocation}/events/{eventID}:
    parameters:
      - $ref: '#/components/parameters/BizLocation'

      - $ref: '#/components/parameters/EventID'
    options:
      tags:
        - discovery
      summary: Query meta data related to the business locations enpoint.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          $ref: '#/components/responses/204TopLevelResourcesOptionsResponse'
    get:
      tags:
        - events
        - top-level-resources
      summary: Returns an EPCIS event by event ID.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      description: >
        This endpoint accesses individual events with the business location and EPCIS event type specified
        in the path. If the EPCIS event type is not known or irrelevant, `all` can be used instead of an
        EPCIS event type. The response body is an `EPCISDocument` with the unique event. The response body is an
        `EPCISDocument` with the unique event.
      responses:
        '200':
          $ref: '#/components/responses/200EPCISEventResponse'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /readPoints:
    options:
      tags:
        - discovery
      summary: Query meta data related to the read points enpoint.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          $ref: '#/components/responses/204TopLevelResourcesOptionsResponse'
    get:
      tags:
        - events
        - top-level-resources
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'

        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      summary: Returns known read points
      responses:
        '200':
          headers:
            GS1-EPCIS-version:
              $ref: '#/components/headers/GS1-EPCIS-version'
            GS1-EPCIS-min:
              $ref: '#/components/headers/GS1-EPCIS-min'
            GS1-EPCIS-max:
              $ref: '#/components/headers/GS1-EPCIS-max'
            GS1-CBV-version:
              $ref: '#/components/headers/GS1-CBV-version'
            GS1-EPCIS-extensions:
              $ref: '#/components/headers/GS1-EPCIS-extensions'
            GS1-CBV-extensions:
              $ref: '#/components/headers/GS1-CBV-extensions'
            Link:
              $ref: '#/components/headers/Link'
          description: >
            Returns a list of read points. If there are read points than specified by the
            `perPage` parameter, the client will be given the URL to retrieve more read points in the `Link` header.
            If the client specifies extension mappings, the response will use them where they match. Otherwise,
            the full resource address is used.
          content:
            application/json:
              schema:
                example:
                  - urn:epc:id:sgln:0012345.11111.400
                  - urn:epc:id:sgln:0012346.11111.400
                type: array
                items:
                  type: string
                  format: uri


  /readPoints/{readPoint}/events:
    parameters:
      - $ref: '#/components/parameters/ReadPoint'

    options:
      tags:
        - discovery
      summary: Query meta data related to the read points enpoint.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          $ref: '#/components/responses/204TopLevelResourcesOptionsResponse'
    get:
      tags:
        - events
        - top-level-resources
      summary: Returns all EPCIS events occurring at that read point and of the given EPCIS event type.
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'

      description: >
        This endpoint helps to navigate EPCIS events by EPCIS event type within a top-level resource. It returns all
        EPCIS events of a specific EPCIS event type and read point, up to the amount defined
        in `perPage`. The server returns a `Link` header to point to the remaining results. If the EPCIS event type is not
        needed, `all` can be used instead of an EPCIS event type.

        Optionally, EPCIS events can be further filtered using the EPCIS query language in as query string parameters.
        In this case, ensure that the EPCIS query does not specify an EPCIS event type in the path. To specify multiple
        EPCIS event types, use `all` instead of an EPCIS event type in the path and specify
        EPCIS event types as query string parameter.

        Example:

        ```
        https://example.com/readPoints/urn:epc:id:sgln:0012345.11111.400/ /eventTypes/ObjectEvent/events?GE_eventTime=2015-03-15T00%3A00%3A00.000-04%3A00
        ```
      responses:
        '200':
          $ref: '#/components/responses/200EPCISEventResponse'
        '400':
          $ref: '#/components/responses/400QueryException'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '414':
          $ref: '#/components/responses/414URLTooLong'

        '500':
          $ref: '#/components/responses/500ImplementationException'

  /readPoints/{readPoint}/events/{eventID}:
    parameters:
      - $ref: '#/components/parameters/ReadPoint'

      - $ref: '#/components/parameters/EventID'
    options:
      tags:
        - discovery
      summary: Query meta data related to the read points enpoint.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          $ref: '#/components/responses/204TopLevelResourcesOptionsResponse'
    get:
      tags:
        - events
        - top-level-resources
      summary: Returns an EPCIS event by event ID.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      description: >
        This endpoint accesses individual events with the read point and EPCIS event type specified
        in the path. If the EPCIS event type is not known or irrelevant, `all` can be used instead of an
        EPCIS event type. The response body is an `EPCISDocument` with the unique event. The response body is an
        `EPCISDocument` with the unique event.
      responses:
        '200':
          $ref: '#/components/responses/200EPCISEventResponse'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /dispositions:
    options:
      tags:
        - discovery
      summary: Query meta data related to the dispositions enpoint.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          $ref: '#/components/responses/204TopLevelResourcesOptionsResponse'
    get:
      tags:
        - events
        - top-level-resources
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'

        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      summary: Returns known dispositions
      responses:
        '200':
          headers:
            GS1-EPCIS-version:
              $ref: '#/components/headers/GS1-EPCIS-version'
            GS1-EPCIS-min:
              $ref: '#/components/headers/GS1-EPCIS-min'
            GS1-EPCIS-max:
              $ref: '#/components/headers/GS1-EPCIS-max'
            GS1-CBV-version:
              $ref: '#/components/headers/GS1-CBV-version'
            GS1-EPCIS-extensions:
              $ref: '#/components/headers/GS1-EPCIS-extensions'
            GS1-CBV-extensions:
              $ref: '#/components/headers/GS1-CBV-extensions'
            Link:
              $ref: '#/components/headers/Link'
          description: >
            Returns a list of dispositions. If there are dispositions than specified by the
            `perPage` parameter, the client will be given the URL to retrieve more dispositions in the Link header.
            If the client specifies extension mappings, the response will use them where they match. Otherwise,
            the full resource address is used.
          content:
            application/json:
              schema:
                example:
                  - urn:epcglobal:cbv:disp:in_progress
                  - urn:epcglobal:cbv:disp:in_transit
                type: array
                items:
                  type: string
                  format: uri


  /dispositions/{disposition}/events:
    parameters:
      - $ref: '#/components/parameters/Disposition'

    options:
      tags:
        - discovery
      summary: Query meta data related to the dispositions enpoint.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          $ref: '#/components/responses/204TopLevelResourcesOptionsResponse'
    get:
      tags:
        - events
        - top-level-resources
      summary: Returns all EPCIS events occurring at that disposition and of the given EPCIS event type.
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'

      description: >
        This endpoint helps to navigate EPCIS events by EPCIS event type within a top-level resource. It returns all
        EPCIS events of a specific EPCIS event type and disposition, up to the amount defined
        in `perPage`. The server returns a `Link` header to point to the remaining results. If the EPCIS event type is not
        needed, `all` can be used instead of an EPCIS event type.

        Optionally, EPCIS events can be further filtered using the EPCIS query language in as query string parameters.
        In this case, ensure that the EPCIS query does not specify an EPCIS event type in the path. To specify multiple
        EPCIS event types, use `all` instead of an EPCIS event type in the path and specify
        EPCIS event types as query string parameter.

        Example:

        ```
        https://example.com/dispositions/urn:epcglobal:cbv:disp:in_progress/events?GE_eventTime=2015-03-15T00%3A00%3A00.000-04%3A00
        ```
      responses:
        '200':
          $ref: '#/components/responses/200EPCISEventResponse'
        '400':
          $ref: '#/components/responses/400QueryException'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '414':
          $ref: '#/components/responses/414URLTooLong'

        '500':
          $ref: '#/components/responses/500ImplementationException'

  /dispositions/{disposition}/events/{eventID}:
    parameters:
      - $ref: '#/components/parameters/Disposition'

      - $ref: '#/components/parameters/EventID'
    options:
      tags:
        - discovery
      summary: Query meta data related to the dispositions enpoint.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          $ref: '#/components/responses/204TopLevelResourcesOptionsResponse'
    get:
      tags:
        - events
        - top-level-resources
      summary: Returns an EPCIS event by event ID.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      description: >
        This endpoint accesses individual events with the disposition and EPCIS event type specified
        in the path. If the EPCIS event type is not known or irrelevant, `all` can be used instead of an
        EPCIS event type. The response body is an `EPCISDocument` with the unique event. The response body
        is an `EPCISDocument` with the unique event.
      responses:
        '200':
          $ref: '#/components/responses/200EPCISEventResponse'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries:
    options:
      tags:
        - discovery
      summary: Query meta data related to named an anonymous queries.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          description: >
            The `OPTIONS` method is used as a discovery service for /queries endpoints. It describes which EPCIS and CBV
            versions are supported as well as EPCIS and CBV extensions.
            The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
          headers:
            Allow:
              example:
                - GET
                - OPTIONS
              schema:
                type: string
                enum:
                  - GET
                  - OPTIONS
    get:
      tags:
        - queries
      summary: Returns a list of queries available to that user.
      responses:
        '200':
          description: >
            Queries are like views that are created using the EPCIS query language. Each query object
            consists of a query name and the query definition.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NamedQueryDefinition'
                uniqueItems: true
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/{queryName}:
    parameters:
      - $ref: '#/components/parameters/QueryName'
    options:
      tags:
        - discovery
      summary: Query meta data related to named an anonymous queries.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          description: >
            The `OPTIONS` method is used as a discovery service for `/queries` endpoints. It describes which EPCIS and CBV
            versions are supported as well as EPCIS and CBV extensions.
            The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
          headers:
            Allow:
              example:
                - GET
                - OPTIONS
                - DELETE
              schema:
                type: string
                enum:
                  - GET
                  - OPTIONS
                  - DELETE
            GS1-EPCIS-version:
              $ref: '#/components/headers/GS1-EPCIS-version'
            GS1-EPCIS-min:
              $ref: '#/components/headers/GS1-EPCIS-min'
            GS1-EPCIS-max:
              $ref: '#/components/headers/GS1-EPCIS-max'
            GS1-CBV-version:
              $ref: '#/components/headers/GS1-CBV-version'
            GS1-EPCIS-extensions:
              $ref: '#/components/headers/GS1-EPCIS-extensions'
            GS1-Vendor-version:
              $ref: '#/components/headers/GS1-Vendor-version'
            GS1-CBV-extensions:
              $ref: '#/components/headers/GS1-CBV-extensions'
    get:
      tags:
        - queries
      summary: Returns the EPCIS query body of a named query
      responses:
        '200':
          description: >
            The EPCIS query body, either for EPCIS events or master data resources. A GET on a named query
            will not return results. To retrieve EPCIS events or master data, use the `/queries/{queryName}/events`
            or `/queries/{queryName}/masterdata` respectively.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/EPCISQuery'
                  - $ref: '#/components/schemas/EPCISMasterDataQuery'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'
    delete:
      tags:
        - queries
      summary: Removes a named query and closes WebSocket connections to subscribed clients.
      responses:
        '204':
          $ref: '#/components/responses/204QueryDeleted'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/{queryName}/masterdata:
    parameters:
      - $ref: '#/components/parameters/QueryName'
      - $ref: '#/components/parameters/PerPage'
    options:
      tags:
        - discovery
      summary: Query the meta data of an events query
      description: >
        The `OPTIONS` method is used as a discovery service for named queries. It describes which EPCIS and CBV
        versions are used in the query result supported as well as  EPCIS and CBV extensions.
        Please note that this dos not apply to anonymous queries, since they are not stored.
      responses:
        204:
          $ref: '#/components/responses/204EventEndpointsOptionsResponse'
    get:
      tags:
        - queries
        - masterdata
      summary: Returns the result of a master data query. This endpoint supports query subscriptions.
      parameters:
        - $ref: '#/components/parameters/GS1-QUERY-minRecordTime'
        - $ref: '#/components/parameters/Upgrade'
        - $ref: '#/components/parameters/Connection'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/ReportIfEmpty'
      description: >
        The GET endpoint is to retrieve large results that don't fit into the response of a `POST` request.
        It can also be used to subscribe to anonymous queries.
      responses:
        '101':
         $ref: '#/components/responses/101WebsocketCreated'
        '200':
          $ref: '#/components/responses/200MasterDataResponse'
        '400':
          $ref: '#/components/responses/400QueryInvalid'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'
    post:
      tags:
        - queries
        - masterdata
      summary: >
        Creates and executes a named EPCIS master data query and returns results with the option to use pagination if needed.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
      description: >
        Creating a named query creates collection of master data resources that is described by the EPCIS query.
        When a query is first created, it is executed and the result is returned to the client up to the amount
        defined in `perPage`. The client can retrieve the entire result set using pagination. The client can also
        create a query subscription using the URL of the query, which is returned in the Location header. For
      requestBody:
        $ref: '#/components/requestBodies/CreateMasterDataQuery'
      responses:
        '200':
          headers:
            GS1-EPCIS-version:
              $ref: '#/components/headers/GS1-EPCIS-version'
            GS1-EPCIS-min:
              $ref: '#/components/headers/GS1-EPCIS-min'
            GS1-EPCIS-max:
              $ref: '#/components/headers/GS1-EPCIS-max'
            GS1-CBV-version:
              $ref: '#/components/headers/GS1-CBV-version'
            GS1-EPCIS-extensions:
              $ref: '#/components/headers/GS1-EPCIS-extensions'
            GS1-CBV-extensions:
              $ref: '#/components/headers/GS1-CBV-extensions'
            Link:
              $ref: '#/components/headers/Link'
            Location:
              description: >
                The URL of the created master data query. The URL of the created query. The client can use the
                `Location` URL to subscribe to that query. If the client wants to execute the query synchronously,
                the client should use URL in the `Link` header to fetch more resources.
              schema:
                example: "https://www.example.com/queries/myQuery/masterdata"
                type: string
                format: uri
          description: Returns the query result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EPCISMasterDataDocument'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/{queryName}/events:
    parameters:
      - $ref: '#/components/parameters/QueryName'
      - $ref: '#/components/parameters/PerPage'
    options:
      tags:
        - discovery
      summary: Query the meta data of an events query
      description: >
        The `OPTIONS` method is used as a discovery service for named queries. It describes which EPCIS and CBV
        versions are used in the query result supported as well as  EPCIS and CBV extensions.
        Please note that this dos not apply to anonymous queries, since they are not stored.
      responses:
        204:
          $ref: '#/components/responses/204EventEndpointsOptionsResponse'
    get:
      tags:
        - queries
        - events
      summary: Returns events with the option to use pagination if needed. This endpoint supports query subscriptions.
      parameters:
        - $ref: '#/components/parameters/GS1-QUERY-minRecordTime'
        - $ref: '#/components/parameters/Upgrade'
        - $ref: '#/components/parameters/Connection'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/ReportIfEmpty'
      description: >
        The `GET` endpoint is to retrieve large results that don't fit into the response of `POST` request.
        It can also be used to subscribe to named queries.
      responses:
        '101':
         $ref: '#/components/responses/101WebsocketCreated'
        '200':
          $ref: '#/components/responses/200EPCISEventResponse'
        '400':
          $ref: '#/components/responses/400QueryInvalid'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'
    post:
      tags:
        - queries
        - events
      summary: Creates and executes a named EPCIS events query and returns results with the option to use pagination if needed.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
        - $ref: '#/components/parameters/PerPage'
      description: >
        Creating a named query creates a view on the events in the repository, accessible through it's events resource.
        Creating a query also returns events up to the amount defined in `perPage`. To obtain the remaining events,
        the client can use the URL in the `Link` header. When a query is created, the server returns the query URL in the
        `Location` header. The client can use this URL to start a query subscription immediately after creating the query.
      requestBody:
        $ref: '#/components/requestBodies/CreateEventQuery'
      responses:
        '200':
          headers:
            GS1-EPCIS-version:
              $ref: '#/components/headers/GS1-EPCIS-version'
            GS1-EPCIS-min:
              $ref: '#/components/headers/GS1-EPCIS-min'
            GS1-EPCIS-max:
              $ref: '#/components/headers/GS1-EPCIS-max'
            GS1-CBV-version:
              $ref: '#/components/headers/GS1-CBV-version'
            GS1-EPCIS-extensions:
              $ref: '#/components/headers/GS1-EPCIS-extensions'
            GS1-CBV-extensions:
              $ref: '#/components/headers/GS1-CBV-extensions'
            Link:
              $ref: '#/components/headers/Link'
            Location:
              description: >
                The URL of the created query. The client can use the `Location` URL to subscribe to that query.
                If the client wants to execute the query synchronously, the client should use URL in the Link header
                to fetch more resources.
              schema:
                example: "https://www.example.com/queries/myQuery/events"
                type: string
                format: uri
          description: Returns the query result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EPCISEventsDocument'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/SimpleMasterDataQuery/masterdata:
    options:
      tags:
        - discovery
      summary: Query the meta data of an events query
      description: >
        The `OPTIONS` method is used as a discovery service for anonymous queries. Because anonymous queries
        are not stored, query-related meta data cannot be discovered.
        Please note that this dos not apply to anonymous queries, since they are not stored.
      responses:
        204:
          $ref: '#/components/responses/204AnonymousQueriesOptionsResponse'
    post:
      tags:
        - queries
        - masterdata
      summary: >
        Executes anonymous master data queries and returns results with the option to use pagination if needed.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
        - $ref: '#/components/parameters/GS1-QUERY-minRecordTime'
        - $ref: '#/components/parameters/PerPage'
      description: >
        `SimpleMasterDataQuery` is an endpoint to create anonymous queries. A query is created once and 
        returned to the client. Unlike name queries, these queries are not stored.
      requestBody:
        $ref: '#/components/requestBodies/CreateMasterDataQuery'
      responses:
        '200':
          headers:
            GS1-EPCIS-version:
              $ref: '#/components/headers/GS1-EPCIS-version'
            GS1-EPCIS-min:
              $ref: '#/components/headers/GS1-EPCIS-min'
            GS1-EPCIS-max:
              $ref: '#/components/headers/GS1-EPCIS-max'
            GS1-CBV-version:
              $ref: '#/components/headers/GS1-CBV-version'
            GS1-EPCIS-extensions:
              $ref: '#/components/headers/GS1-EPCIS-extensions'
            GS1-CBV-extensions:
              $ref: '#/components/headers/GS1-CBV-extensions'
            Link:
              $ref: '#/components/headers/Link'
            Location:
              description: >
                The URL of the newly created anonymous master data query. The server will create a new and unique
                temporary anonymous query for the client's request. The client can use this URL to subscribe to that
                query. If the client wants to execute the query synchronously, the client should use URL in the Link
                header to fetch more resources.
              schema:
                example: "https://www.example.com/queries/SimpleMasterDataQuery-2ac8f3f4-2a67-11eb-0242ac120002-adc1/masterdata"
                type: string
                format: uri
          description: Returns the query result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EPCISMasterDataDocument'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'
    get:
      tags:
        - queries
        - masterdata
      summary: Returns the result of a master data query. This endpoint supports query subscriptions.
      parameters:
        - $ref: '#/components/parameters/GS1-QUERY-minRecordTime'
        - $ref: '#/components/parameters/Upgrade'
        - $ref: '#/components/parameters/Connection'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/ReportIfEmpty'
        - $ref: '#/components/parameters/PerPage'
      description: >
        The `GET` endpoint is to retrieve large results that don't fit into the response of `POST` request.
        It can also be used to subscribe to anonymous queries.
      responses:
        '101':
         $ref: '#/components/responses/101WebsocketCreated'
        '200':
          $ref: '#/components/responses/200MasterDataResponse'
        '400':
          $ref: '#/components/responses/400QueryInvalid'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/SimpleEventQuery/events:
    options:
      tags:
        - discovery
      summary: Query the meta data of an events query
      description: >
        The `OPTIONS` method is used as a discovery service for anonymous queries. Because anonymous queries
        are not stored, query-related meta data cannot be discovered.
        Please note that this dos not apply to anonymous queries, since they are not stored.
      responses:
        204:
          $ref: '#/components/responses/204AnonymousQueriesOptionsResponse'
    post:
      tags:
        - queries
        - events
      summary: Executes anonymous EPCIS events query and returns results with the option to use pagination if needed.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
        - $ref: '#/components/parameters/GS1-QUERY-minRecordTime'
        - $ref: '#/components/parameters/PerPage'
      description: >
        `SimpleEventQuery` is an endpoint to execute anonymous queries for EPCIS events.
        A query is created once and returned to the client. Unlike named queries, these queries are not stored.
      requestBody:
        $ref: '#/components/requestBodies/CreateEventQuery'
      responses:
        '200':
          headers:
            GS1-EPCIS-version:
              $ref: '#/components/headers/GS1-EPCIS-version'
            GS1-EPCIS-min:
              $ref: '#/components/headers/GS1-EPCIS-min'
            GS1-EPCIS-max:
              $ref: '#/components/headers/GS1-EPCIS-max'
            GS1-CBV-version:
              $ref: '#/components/headers/GS1-CBV-version'
            GS1-EPCIS-extensions:
              $ref: '#/components/headers/GS1-EPCIS-extensions'
            GS1-CBV-extensions:
              $ref: '#/components/headers/GS1-CBV-extensions'
            Link:
              $ref: '#/components/headers/Link'
            Location:
              description: >
                The URL of the newly created anonymous query. The server will create a new and unique temporary
                anonymous query for the client's request. The client can use this URL to subscribe to that query.
                If the client wants to execute the query synchronously, the client should use URL in the `Link` header
                to fetch more resources.
              schema:
                example: "https://www.example.com/queries/SimpleEventQuery-2ac8f3f4-2a67-11eb-adc1-0242ac120002/events"
                type: string
                format: uri
          description: Returns the query result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EPCISEventsDocument'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'
    get:
      tags:
        - queries
        - events
      summary: Returns events with the option to use pagination if needed. This endpoint supports query subscriptions.
      parameters:
        - $ref: '#/components/parameters/GS1-QUERY-minRecordTime'
        - $ref: '#/components/parameters/Upgrade'
        - $ref: '#/components/parameters/Connection'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/ReportIfEmpty'
        - $ref: '#/components/parameters/PerPage'
      description: >
        The `GET` endpoint is to retrieve large results that don't fit into the response of a `POST` request.
        It can also be used to subscribe to anonymous queries.
      responses:
        '101':
         $ref: '#/components/responses/101WebsocketCreated'
        '200':
          $ref: '#/components/responses/200EPCISEventResponse'
        '400':
          $ref: '#/components/responses/400QueryInvalid'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'
components:
  responses:
    '101WebsocketCreated':
      description: >
        Create a WebSocket connection to subscribe to queries. Upon subscription, the server SHALL send all new events
        to subscribing clients. If multiple clients have the same query, each client will receive events which they are
        authorized to see.
      headers:
        Upgrade:
          required: true
          schema:
            type: string
            default: websocket
        Connection:
          required: true
          schema:
            type: string
            default: upgrade
    200MasterDataResponse:
      headers:
        GS1-EPCIS-version:
          $ref: '#/components/headers/GS1-EPCIS-version'
        GS1-EPCIS-min:
          $ref: '#/components/headers/GS1-EPCIS-min'
        GS1-EPCIS-max:
          $ref: '#/components/headers/GS1-EPCIS-max'
        GS1-CBV-version:
          $ref: '#/components/headers/GS1-CBV-version'
        GS1-EPCIS-extensions:
          $ref: '#/components/headers/GS1-EPCIS-extensions'
        GS1-CBV-extensions:
          $ref: '#/components/headers/GS1-CBV-extensions'
        Link:
          $ref: '#/components/headers/Link'
      description: Returns the query result
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EPCISMasterDataDocument'

    200EPCISEventResponse:
      headers:
        GS1-EPCIS-version:
          $ref: '#/components/headers/GS1-EPCIS-version'
        GS1-EPCIS-min:
          $ref: '#/components/headers/GS1-EPCIS-min'
        GS1-EPCIS-max:
          $ref: '#/components/headers/GS1-EPCIS-max'
        GS1-CBV-version:
          $ref: '#/components/headers/GS1-CBV-version'
        GS1-EPCIS-extensions:
          $ref: '#/components/headers/GS1-EPCIS-extensions'
        GS1-CBV-extensions:
          $ref: '#/components/headers/GS1-CBV-extensions'
        Link:
          $ref: '#/components/headers/Link'
      description: Returns EPCIS data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EPCISEventsDocument'


    200SupportedEventTypes:
      description: Returns all supported EPCIS event types.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EPCISEventTypes'
    204TopLevelResourcesOptionsResponse:
      description: >
        The `OPTIONS` method is used as a discovery service for top-level resources endpoints. It describes which EPCIS
        and CBV versions are supported and used for the top-level resource as well as EPCIS and CBV extensions.
        The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
      headers:
        Allow:
          schema:
            type: string
            enum:
              - GET
              - OPTIONS
        Link:
          description: The `Link` header used to link to the official standard document
          example: "<https://www.gs1.org/sites/default/files/docs/epc/EPCIS-Standard-2.0.pdf>; type=application/pdf; rel=help'"
          schema:
            $ref: '#/components/schemas/LinkToStandard'
        GS1-EPCIS-version:
          $ref: '#/components/headers/GS1-EPCIS-version'
        GS1-EPCIS-min:
          $ref: '#/components/headers/GS1-EPCIS-min'
        GS1-EPCIS-max:
          $ref: '#/components/headers/GS1-EPCIS-max'
        GS1-CBV-version:
          $ref: '#/components/headers/GS1-CBV-version'
        GS1-EPCIS-extensions:
          $ref: '#/components/headers/GS1-EPCIS-extensions'
        GS1-Vendor-version:
          $ref: '#/components/headers/GS1-Vendor-version'
        GS1-CBV-extensions:
          $ref: '#/components/headers/GS1-CBV-extensions'
    '204QueryResultsOptionsResponse':
      description: >
        The `OPTIONS` method is used as a discovery service for `/queries` endpoints. It describes which EPCIS and CBV
        versions are used in the query result supported as well as  EPCIS and CBV extensions.
      headers:
        Allow:
          example:
            - GET
            - OPTIONS
          schema:
            type: string
            enum:
              - GET
              - OPTIONS
    '204AnonymousQueriesOptionsResponse':
      description: >
        The `OPTIONS` method is used as a discovery service for queries endpoints. For named queries,
        `OPTIONS` reveals which vocabularies are used in the query, etc. Anonymous queries are not stored, and
        therefore such information cannot be discovered.
        The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
      headers:
        Allow:
          example:
            - GET
            - OPTIONS
          schema:
            type: string
            enum:
              - GET
              - OPTIONS
        Link:
          description: The `Link` header used to link to the official standard document
          example: "<https://www.gs1.org/sites/default/files/docs/epc/EPCIS-Standard-2.0.pdf>; type=application/pdf; rel=help'"
          schema:
            $ref: '#/components/schemas/LinkToStandard'
        GS1-EPCIS-version:
          $ref: '#/components/headers/GS1-EPCIS-version'
        GS1-EPCIS-min:
          $ref: '#/components/headers/GS1-EPCIS-min'
        GS1-EPCIS-max:
          $ref: '#/components/headers/GS1-EPCIS-max'
        GS1-CBV-version:
          $ref: '#/components/headers/GS1-CBV-version'
        GS1-EPCIS-extensions:
          $ref: '#/components/headers/GS1-EPCIS-extensions'
        GS1-Vendor-version:
          $ref: '#/components/headers/GS1-Vendor-version'
        GS1-CBV-extensions:
          $ref: '#/components/headers/GS1-CBV-extensions'
    '204EventEndpointsOptionsResponse':
      description: >
        The `OPTIONS` method is used as a discovery service for /events endpoints. It describes which EPCIS and CBV
        versions are supported as well as  EPCIS and CBV extensions.
        The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
      headers:
        Allow:
          example:
            - GET
            - OPTIONS
            - POST
          schema:
            type: string
            enum:
              - GET
              - OPTIONS
              - POST
        Link:
          description: The `Link` header used to link to the official standard document.
          example: "<https://www.gs1.org/sites/default/files/docs/epc/EPCIS-Standard-2.0.pdf>; type=application/pdf; rel=help'"
          schema:
            $ref: '#/components/schemas/LinkToStandard'
    '204QueryDeleted':
      description: Query deleted and clients disconnected
    '400QueryInvalid':
      description: The query is invalid
      content:
        application/json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 400
                    default: 400
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:SubscriptionControlsException
                      - epcisException:ValidationException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'

    '401AuthorizationInformationMissing':
      description: Authorization information is missing or invalid.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 401
                    default: 401
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:SecurityException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '400QueryException':
      description: Query exceptions defined in EPCIS
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 400
                    default: 400
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:QueryValidationException
                      - epcisException:QueryParameterException
                      - epcisException:QueryTooComplexException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '403ClientUnauthorized':
      description: Client is unauthorized to access this resource.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 403
                    default: 403
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:SecurityException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'


    404ResourceNotFound:
      description: The resource was not found. For example, the EPCIS event does not exist or the query does not exist.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 404
                    default: 404
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:NoSuchNameException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    413CapturePayloadTooLarge:
      headers:
        GS1-CAPTURE-limit:
          $ref: '#/components/headers/GS1-CAPTURE-limit'
        GS1-CAPTURE-file-size-limit:
          $ref: '#/components/headers/GS1-CAPTURE-file-size-limit'
      description: >
        The `POST` request is too large. It exceeds the limits set in `GS1-CAPTURE-limit` and/or
        `GS1-CAPTURE-file-size-limit`.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 413
                    default: 413
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:QueryTooComplexException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '414URLTooLong':
      description: URL is too long. This is usually a problem with large EPCIS queries in the URL.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 414
                    default: 414
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:QueryTooComplexException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '500ImplementationException':
      description: This is a server-side problem caused when the query was resolved and executed.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 500
                    default: 500
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:ImplementationException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
  schemas:

    Location:
      description: Location header of a resource
      type: string
      format: uri
      example: /eventTypes/ObjectEvent/events/eventId123
    RFC7807ProblemResponseBody:
      description: A response as specified in [RFC 7807](https://tools.ietf.org/html/rfc7807)
      type: object
      required:
        - type
        - title
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
          format: uri
      example:
        type: "epcisException:SecurityException"
        title: "Unauthorized to execute query TestQuery"
        status: 401
        instance: "/queries/TestQuery"
    ReportIfEmpty:
      description: If true, a query result is always sent to the client, even if the result set is empty.
      type: boolean
    NamedQueryDefinition:
      type: object

      required:
        - name
        - query
      properties:
        name:
          $ref: '#/components/schemas/QueryName'
        query:
          $ref: '#/components/schemas/EPCISQuery'
        createdAt:
          type: string
          format: date-time
    EPCISQuery:
      type: array
      description: An EPCIS event query.
      example:
        [ {
          "eventTypes": "ObjectEvent" },
          {
            "EQ_bizStep": [
                "urn:epcglobal:cbv:bizstep:shipping",
                "urn:epcglobal:cbv:bizstep:receiving" ]
          }
        ]
      externalDocs:
        url: query-schema.json
      items:
        type: object
    QueryName:
      description: Unique query name
      type: string
      example: myQuery
    EPCISMasterDataQuery:
      type: array
      description: An EPCIS master data query.
      externalDocs:
        url: https://www.gs1.org/sites/default/files/docs/epc/EPCIS-Standard-1.2-r-2016-09-29.pdf
      items:
        type: object
    AllEvent:
      type: string
      description: A virtual EPCIS event type that is the union of all EPCIS event types.
      enum:
        - all
    EPCISMasterDataDocument:
      description: A collection of master data resources
      example:
        {
          "@context": [
              "https://gs1.github.io/EPCIS/epcis-context.jsonld",
              { "example": "http://ns.example.com/epcis/" },
              { "xmda": "http://epcis.example.com/mda" } ],
          "id": "_:example_9.8.1",
          "isA": "EPCISDocument",
          "schemaVersion": 2.0,
          "creationDate": "2005-07-11T11:30:47.0Z",
          "format": "application/ld+json",
          "epcisHeader": {
            "epcisMasterData": {
              "vocabularyList": [

                {
                  "vocabularyElementList": [
                    {
                      "isA": "urn:epcglobal:epcis:vtype:ReadPoint",
                      "id": "urn:epc:id:sgln:0037000.00729.8201",
                      "attributes": [
                        { "id": "cbvmda:site", "attribute": "0037000007296" },
                        { "id": "cbvmda:sst", "attribute": 201 }
                      ]
                    },
                    {
                      "isA": "urn:epcglobal:epcis:vtype:ReadPoint",
                      "id": "urn:epc:id:sgln:0037000.00729.8202",
                      "attributes": [
                        { "id": "cbvmda:site", "attribute": "0037000007296" },
                        { "id": "cbvmda:sst", "attribute": "202" }
                      ]
                    },
                    {
                      "isA": "urn:epcglobal:epcis:vtype:ReadPoint",
                      "id": "urn:epc:id:sgln:0037000.00729.8203",
                      "attributes": [
                        { "id": "cbvmda:sst", "attribute": 204 }
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "epcisBody": {
            "eventList": [ ]
          }
        }
      type: object
      externalDocs:
        description: >
          To validate EPCIS master data, please use [JSON schema](../JSON/EPCIS-JSON-Schema.json)
          or [SHACL file](../JSON/EPCIS-SHACL.ttl).
        url: ../JSON
    NewEPCISEvent:
      description: >
        A single, new EPCIS event. To be compatible with the capture interface, a single EPCIS uses the same
        document format.
      type: object
      externalDocs:
        description: >
          An EPCIS document that must be validated with the [JSON schema](../JSON/EPCIS-JSON-Schema.json) or
          [SHACL file](../JSON/EPCIS-SHACL.ttl).
        url: ../JSON/EPCIS-SHACL.ttl
      example:
        {
          "@context": [
              "https://gs1.github.io/EPCIS/epcis-context.jsonld",
              { "example": "http://ns.example.com/epcis/" } ],
          "id": "_:document1",
          "isA": "EPCISDocument",
          "schemaVersion": 2.0,
          "creationDate": "2005-07-11T11:30:47.0Z",
          "format": "application/ld+json",
          "epcisBody": {
            "eventList": [
              {
                "id": "_:event1",
                "isA": "ObjectEvent",
                "action": "OBSERVE",
                "bizStep": "urn:epcglobal:cbv:bizstep:shipping",
                "disposition": "urn:epcglobal:cbv:disp:in_transit",
                "epcList": [ "urn:epc:id:sgtin:0614141.107346.2017","urn:epc:id:sgtin:0614141.107346.2018" ],
                "eventTime": "2005-04-03T20:33:31.116000-06:00",
                "eventTimeZoneOffset": "-06:00",
                "readPoint": { "id": "urn:epc:id:sgln:0614141.07346.1234" },
                "bizTransactionList": [ 
                  { "type": "urn:epcglobal:cbv:btt:po",
                    "bizTransaction": "http://transaction.acme.com/po/12345678" } ]
              } ]
          }
        }
    EPCISEventsDocument:
      description: A collection of EPCIS resources.
      type: object
      example:
        {
          "@context": [
              "https://gs1.github.io/EPCIS/epcis-context.jsonld",
              { "example": "http://ns.example.com/epcis/" } ],
          "id": "_:document1",
          "isA": "EPCISDocument",
          "schemaVersion": 2.0,
          "creationDate": "2005-07-11T11:30:47.0Z",
          "format": "application/ld+json",
          "epcisBody": {
            "eventList": [
              {
                "id": "_:event1",
                "isA": "ObjectEvent",
                "action": "OBSERVE",
                "bizStep": "urn:epcglobal:cbv:bizstep:shipping",
                "disposition": "urn:epcglobal:cbv:disp:in_transit",
                "epcList": [ "urn:epc:id:sgtin:0614141.107346.2017","urn:epc:id:sgtin:0614141.107346.2018" ],
                "eventTime": "2005-04-03T20:33:31.116000-06:00",
                "eventTimeZoneOffset": "-06:00",
                "readPoint": { "id": "urn:epc:id:sgln:0614141.07346.1234" },
                "bizTransactionList": [ 
                  { "type": "urn:epcglobal:cbv:btt:po", "bizTransaction": "http://transaction.acme.com/po/12345678" } ]
              },
              {
                "id": "_:event2",
                "isA": "ObjectEvent",
                "action": "OBSERVE",
                "bizStep": "urn:epcglobal:cbv:bizstep:receiving",
                "disposition": "urn:epcglobal:cbv:disp:in_progress",
                "epcList": [ "urn:epc:id:sgtin:0614141.107346.2018" ],
                "eventTime": "2005-04-04T20:33:31.116-06:00",
                "eventTimeZoneOffset": "-06:00",
                "readPoint": { "id": "urn:epc:id:sgln:0012345.11111.400" },
                "bizLocation": { "id": "urn:epc:id:sgln:0012345.11111.0" },
                "bizTransactionList": [
                  { "type": "urn:epcglobal:cbv:btt:po", "bizTransaction": "http://transaction.acme.com/po/12345678" },
                  { "type": "urn:epcglobal:cbv:btt:desadv", "bizTransaction": "urn:epcglobal:cbv:bt:0614141073467:1152" }
                ],
                "example:myField": "Example of a vendor/user extension"
              }
            ]
          }
        }
      externalDocs:
        description: >
          An EPCIS document that must be validated with the [JSON schema](../JSON/EPCIS-JSON-Schema.json) or
          [SHACL file](../JSON/EPCIS-SHACL.ttl).
        url: ../JSON/EPCIS-SHACL.ttl
    LinkToStandard:
        description: A Link header that points to the corresponding EPCIS 2.0 standards document.
        type: string
        default: "<https://www.gs1.org/sites/default/files/docs/epc/EPCIS-Standard-2.0.pdf>; type=application/pdf; rel=help'"
    Link:
      description: >
        A pagination header link. This header works together with the `perPage` and `nextPageToken` query string parameters.
      type: string
      format: uri
      example: '<https://example.com/eventTypes/all/events?perPage=30&nextPageToken=3A1550673874978%2Ci%3AU6D7DENAKwM2gQRRwGrataeq>; rel="next"'
    PerPage:
      description: >
        Parameter to control pagination. `perPage` specifies the maximum number of events returned in one batch.
        As long as there are more resources to retrieve, the Link header contains the URL of the next page and
        the attribute `'rel="next"'`. The last page is indicated by the absence of the `'rel="next"'`. Depending on the
        implementation, there can be an upper limit for the `perPage` value, which should be stated in the documentation.
      type: integer
      default: 30
    NextPageToken:
      description: >
        Parameter that point to the next list of results when requesting a list of events that is larger than the value
        specified with the `perPage` parameter. Some technologies refer to this as scrolling.
        A `nextPageToken` may be invalidated through timeout. It is up to the specific implementation to provide
        the mechanisms for invalidating tokens.
      type: string
      example: '3A1550673874978%2Ci%3AU6D7DENAKwM2gQRRwGrataeq'
    EPCISEventTypes:
      type: string
      description: The five types of EPCIS events.
      example:
        - ObjectEvent
        - AggregationEvent
        - AssociationEvent
        - TransformationEvent
        - TransactionEvent
      enum:
        - ObjectEvent
        - AggregationEvent
        - AssociationEvent
        - TransformationEvent
        - TransactionEvent
    GS1-QUERY-minRecordTime:
      description: >
        An optional header to specify the smallest possible record time for
        EPCIS events in a query subscription
      type: string
      format: time
      example: "2020-04-04T20:33:31.116-06:00"

    Upgrade:
      type: string
      description: The `Upgrade` and `Connection` headers are needed to open a Websocket for queries.
      default: websocket
      example: websocket

    Connection:
      example: Upgrade
      description: The `Upgrade` and `Connection` headers are needed to open a Websocket for queries.
      type: string
      default: upgrade

    # describe header schema
    GS1-EPCIS-version:
      description: The EPCIS version
      type: string
      pattern: ^\d+(\.\d+)?$
      example: "2.0"
    GS1-EPCIS-min:
      description: The lowest EPCIS version supported
      type: string
      pattern: ^\d+(\.\d+)?$
      example: "2.0"
    GS1-EPCIS-max:
      description: The highest EPCIS version supported
      type: string
      pattern: ^\d+(\.\d+)?$
    GS1-CBV-version:
      description: The core business vocabulary version
      type: string
    GS1-EPCIS-extensions:
      description: Specific EPCIS extensions supported (e.g. for FIT)
      example: {"example-epc-ext": "http://example.com/epcis/"}
      type: object
    GS1-Vendor-version:
      description: A versioning scheme that can be freely chosen by the vendor
      type: array
      items:
        type: string
      uniqueItems: true
    GS1-CBV-extensions:
      description: An optional header to specify the vocabulary for the top-level endpoints
      example: {"ex": "http://example.com/vendor1", "vendora": "<https://example.org/defs#"}
      type: object
      uniqueItems: true
    GS1-CAPTURE-limit:
      description: The maximum number of EPCIS events that can be captured per call
      type: string
      pattern: ^(\d+|\*)$
    GS1-CAPTURE-file-size-limit:
      description: The maximum event document length in octets (8-bit bytes)
      type: string
      pattern: ^(\d+|\*)$

  parameters:
    # Top-level resource instances
    EPC:
      description: An electronic product code value
      example: urn:epc:id:sgtin:0614141.107346.2018
      required: true
      in: path
      name: epc
      schema:
        type: string
        format: uri
    BizStep:
      description: A business step value
      example: urn:epcglobal:cbv:bizstep:receiving
      required: true
      in: path
      name: bizStep
      schema:
        type: string
        format: uri
    BizLocation:
      description: A business location value
      example: urn:epc:id:sgln:0012345.11111.0
      required: true
      in: path
      name: bizLocation
      schema:
        type: string
        format: uri
    ReadPoint:
      description: A read point value
      example: urn:epc:id:sgln:0012345.11111.400
      required: true
      in: path
      name: readPoint
      schema:
        type: string
        format: uri
    Disposition:
      description: A disposition value
      example: urn:epcglobal:cbv:disp:in_progress
      required: true
      in: path
      name: disposition
      schema:
        type: string
        format: uri

    PerPage:
      in: query
      name: perPage
      schema:
        $ref: '#/components/schemas/PerPage'
    NextPageToken:
      in: query
      name: nextPageToken
      schema:
        $ref: '#/components/schemas/NextPageToken'
    ReportIfEmpty:
      in: query
      name: reportIfEmpty
      required: false
      schema:
        $ref: '#/components/schemas/ReportIfEmpty'
    GS1-QUERY-minRecordTime:
      in: header
      name: GS1-QUERY-minRecordTime
      required: false
      schema:
        $ref: '#/components/schemas/GS1-QUERY-minRecordTime'
    Upgrade:
      in: header
      name: Upgrade
      required: false
      schema:
        $ref: '#/components/schemas/Upgrade'
    Connection:
      in: header
      name: Connection
      required: false
      schema:
        $ref: '#/components/schemas/Upgrade'

    EventID:
      name: eventID
      in: path
      description: >
        The ID of an EPCIS event. Because of the `all` reserved value for EPCIS events types,
        an EPCIS event ID must be unique.
      required: true
      example: "_:event1"
      schema:
        type: string
    EventType:
      name: eventType
      in: path
      example: ObjectEvent
      required: true
      description: >
        Names of EPCIS event types plus the reserved name `all`,
        which is the union of all EPCIS event types
      schema:
        oneOf:
          - $ref: '#/components/schemas/EPCISEventTypes'
          - $ref: '#/components/schemas/AllEvent'
    QueryName:
      in: path
      name: queryName
      required: true
      schema:
        $ref: '#/components/schemas/QueryName'

    # request headers from schema
    GS1-EPCIS-version:
      in: header
      name: GS1-EPCIS-version
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-version'
    GS1-EPCIS-min:
      in: header
      name: GS1-EPCIS-min
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-min'
    GS1-EPCIS-max:
      in: header
      name: GS1-EPCIS-max
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-max'
    GS1-CBV-version:
      in: header
      name: GS1-CBV-version
      schema:
        $ref: '#/components/schemas/GS1-CBV-version'
    GS1-EPCIS-extensions:
      in: header
      name: GS1-EPCIS-extensions
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-extensions'
    GS1-Vendor-version:
      in: header
      name: GS1-Vendor-version
      schema:
        $ref: '#/components/schemas/GS1-Vendor-version'
    GS1-CBV-extensions:
      in: header
      name: GS1-CBV-extensions
      schema:
        $ref: '#/components/schemas/GS1-CBV-extensions'
    GS1-CAPTURE-limit:
      in: header
      name: GS1-CAPTURE-limit
      schema:
        $ref: '#/components/schemas/GS1-CAPTURE-limit'
    GS1-CAPTURE-file-size-limit:
      in: header
      name: GS1-CAPTURE-file-size-limit
      schema:
        $ref: '#/components/schemas/GS1-CAPTURE-file-size-limit'

  headers:

    # response headers from schema
    GS1-EPCIS-version:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-version'
    GS1-EPCIS-min:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-min'
    GS1-EPCIS-max:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-max'
    GS1-CBV-version:
      schema:
        $ref: '#/components/schemas/GS1-CBV-version'
    GS1-EPCIS-extensions:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-extensions'
    GS1-Vendor-version:
      schema:
        $ref: '#/components/schemas/GS1-Vendor-version'
    GS1-CBV-extensions:
      schema:
        $ref: '#/components/schemas/GS1-CBV-extensions'
    GS1-CAPTURE-limit:
      schema:
        $ref: '#/components/schemas/GS1-CAPTURE-limit'
    GS1-CAPTURE-file-size-limit:
      schema:
        $ref: '#/components/schemas/GS1-CAPTURE-file-size-limit' 

    Location:
      schema:
        $ref: '#/components/schemas/Location'
    GS1-QUERY-minRecordTime:
      schema:
        $ref: '#/components/schemas/GS1-QUERY-minRecordTime'
    Link:
      schema:
        $ref: '#/components/schemas/Link'

  requestBodies:
    CreateEventQuery:
      description: Creates and executes an events query
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EPCISQuery'
    CreateMasterDataQuery:
      description: Creates and executes a master data query
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EPCISMasterDataQuery'

