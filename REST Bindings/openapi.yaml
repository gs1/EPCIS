openapi: "3.0.3"
info:
  version: 2.0.0
  title: EPCIS 2.0 REST Bindings
  license:
    name: Apache2

tags:
- name: discovery
  description: >
    Endpoints to obtain information about the endpoint, such as EPCIS and CBV versions or custom vocabularies.
- name: events
  description: >
    Endpoints that expose EPCIS events as Web resources.
- name: queries
  description: >
    Endpoints to create large named or anonymous queries using the EPCIS query language. Named queries have a custom
    name and are stored until deleted by the user. Anonymous queries are not persisted and only available to the caller.
    These endpoints also support query subscription using event triggers or scheduling.
- name: subscriptions
  description: >
    EPCIS 2.0 supports query subscriptions with using Webhooks or Websocket.

paths:

  /queries:
    options:
      tags:
        - discovery
      summary: Query meta data related to named an anonymous queries.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          description: >
            The `OPTIONS` method is used as a discovery service for /queries endpoints. It describes which EPCIS and CBV
            versions are supported as well as EPCIS and CBV extensions.
            The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
          headers:
            Allow:
              example:
                - GET
                - OPTIONS
              schema:
                type: string
                enum:
                  - GET
                  - OPTIONS
    get:
      tags:
        - queries
      summary: Returns a list of queries available to that user.
      responses:
        '200':
          description: >
            Queries are like views that are created using the EPCIS query language. Each query object
            consists of a query name and the query definition.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NamedQueryDefinition'
                uniqueItems: true
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/{queryName}:
    parameters:
      - $ref: '#/components/parameters/QueryName'

    get:
      tags:
        - queries
      summary: Returns endpoints available for a query.
      responses:
        '200':
          headers:
            GS1-EPCIS-version:
              $ref: '#/components/headers/GS1-EPCIS-version'
            GS1-EPCIS-min:
              $ref: '#/components/headers/GS1-EPCIS-min'
            GS1-EPCIS-max:
              $ref: '#/components/headers/GS1-EPCIS-max'
            GS1-CBV-version:
              $ref: '#/components/headers/GS1-CBV-version'
            GS1-EPCIS-extensions:
              $ref: '#/components/headers/GS1-EPCIS-extensions'
            GS1-CBV-extensions:
              $ref: '#/components/headers/GS1-CBV-extensions'
            Link:
              $ref: '#/components/headers/Link'
            Location:
              description: >
                The URL of the created query. The client can use the `Location` URL to subscribe to that query.
                If the client wants to execute the query synchronously, the client should use URL in the Link header
                to fetch more resources.
              schema:
                example: "https://www.example.com/queries/myQuery/events"
                type: string
                format: uri
          description: >
            Returns endpoints available to the query. Both queries on EPCIS events and master data have a `subscriptions`
            resource. A master data query has, in addition, a `masterdata` resource and an EPCIS events query have an
            `events` resource.
          content:
            application/json:
              schema:
                type: array
                items:
                  format: array
                  items:
                    type: string
                    oneOf:
                      - enum:
                          - subscriptions
                          - masterdata
                      - enum:
                          - subscriptions
                          - events

                  example:
                    - subscriptions
                    - events
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'
    post:
      tags:
        - queries
      summary: Creates and executes a named EPCIS events query and returns results with the option to use pagination if needed.
      parameters:
        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
        - $ref: '#/components/parameters/PerPage'
      description: >
        Creating a named query creates a view on the events in the repository, accessible through it's events resource.
        Creating a query also returns events up to the amount defined in `perPage`. To obtain the remaining events,
        the client can use the URL in the `Link` header. When a query is created, the server returns the query URL in the
        `Location` header. The client can use this URL to start a query subscription immediately after creating the query.
      requestBody:
        $ref: '#/components/requestBodies/CreateEventQuery'
      responses:
        '200':
          headers:
            GS1-EPCIS-version:
              $ref: '#/components/headers/GS1-EPCIS-version'
            GS1-EPCIS-min:
              $ref: '#/components/headers/GS1-EPCIS-min'
            GS1-EPCIS-max:
              $ref: '#/components/headers/GS1-EPCIS-max'
            GS1-CBV-version:
              $ref: '#/components/headers/GS1-CBV-version'
            GS1-EPCIS-extensions:
              $ref: '#/components/headers/GS1-EPCIS-extensions'
            GS1-CBV-extensions:
              $ref: '#/components/headers/GS1-CBV-extensions'
            Link:
              $ref: '#/components/headers/Link'
            Location:
              description: >
                The URL of the created query. The client can use the `Location` URL to subscribe to that query.
                If the client wants to execute the query synchronously, the client should use URL in the Link header
                to fetch more resources.
              schema:
                example: "https://www.example.com/queries/myQuery/events"
                type: string
                format: uri
          description: Returns the query result
          content:
            application/json:
              schema:
                type: object
                required:
                  - query
                  - queryType
                properties:
                  queryType:
                    type: string
                    enum:
                      - events
                      - masterdata
                    example: events
                  query:
                    oneOf:
                      - $ref: '#/components/schemas/EPCISQuery'
                      - $ref: '#/components/schemas/EPCISMasterDataQuery'

                  createdAt:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'
    options:
      tags:
        - discovery
      summary: Query meta data related to named an anonymous queries.
      description: >
        EPCIS 2.0 supports a number of custom headers to describe custom vocabularies and support multiple versions
        of EPCIS and CBV. The `OPTIONS` method allows the client to discover which vocabularies and EPCIS and CBV
        versions are used.
      responses:
        204:
          description: >
            The `OPTIONS` method is used as a discovery service for `/queries` endpoints. It describes which EPCIS and CBV
            versions are supported as well as EPCIS and CBV extensions.
            The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
          headers:
            Allow:
              example:
                - GET
                - OPTIONS
                - DELETE
              schema:
                type: string
                enum:
                  - GET
                  - OPTIONS
                  - DELETE
            GS1-EPCIS-version:
              $ref: '#/components/headers/GS1-EPCIS-version'
            GS1-EPCIS-min:
              $ref: '#/components/headers/GS1-EPCIS-min'
            GS1-EPCIS-max:
              $ref: '#/components/headers/GS1-EPCIS-max'
            GS1-CBV-version:
              $ref: '#/components/headers/GS1-CBV-version'
            GS1-EPCIS-extensions:
              $ref: '#/components/headers/GS1-EPCIS-extensions'
            GS1-Vendor-version:
              $ref: '#/components/headers/GS1-Vendor-version'
            GS1-CBV-extensions:
              $ref: '#/components/headers/GS1-CBV-extensions'

    delete:
      tags:
        - queries
      summary: Removes a named query and terminates query subscriptions to that query.
      responses:
        '204':
          $ref: '#/components/responses/204QueryDeleted'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  /queries/{queryName}/subscriptions:
    parameters:
      - $ref: '#/components/parameters/QueryName'
    options:
      tags:
        - discovery
        - subscriptions
        - queries
      summary: Query the meta data of the subscriptions endpoint.
      description: >
        The `OPTIONS` method is used as a discovery service for query subscriptions. It describes which EPCIS and CBV
        versions are used in the query result supported as well as EPCIS and CBV extensions.
        Please note that this dos not apply to anonymous queries, since they are not stored.
      responses:
        204:
          $ref: '#/components/responses/204EventEndpointsOptionsResponse'
    get:
      tags:
        - queries
        - subscriptions
      summary: Returns active Webhook (and Websocket?) subscriptions with the option to use pagination if needed.
      parameters:
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/PerPage'
      description: >
        The `GET` endpoint is to list all open Webhook query subscriptions on that query.
      responses:
        '200':
          $ref: '#/components/responses/200EPCISEventResponse'
        '400':
          $ref: '#/components/responses/400QueryInvalid'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'
    post:
      tags:
        - queries
        - events
        - subscriptions
      summary: Creates a query subscription using Webhooks.
      parameters:

        - $ref: '#/components/parameters/GS1-EPCIS-version'
        - $ref: '#/components/parameters/GS1-EPCIS-min'
        - $ref: '#/components/parameters/GS1-EPCIS-max'
        - $ref: '#/components/parameters/GS1-CBV-version'
        - $ref: '#/components/parameters/GS1-EPCIS-extensions'
        - $ref: '#/components/parameters/GS1-CBV-extensions'
        - $ref: '#/components/parameters/PerPage'
# TODO: Should we use capture headers here as well?
#                  headers:
#                    GS1-CAPTURE-limit:
#                      $ref: '#/components/headers/GS1-CAPTURE-limit'
#                    GS1-CAPTURE-file-size-limit:
#                      $ref: '#/components/headers/GS1-CAPTURE-file-size-limit'

      description: >
        Creating query subscription using Webhooks requires the client to provide a single endpoint and to which the
        server will send events and a one-time subscription secret that the client needs to authenticate itself when
        sending events. The one-time subscription secret must be generated by the client.

        When the client subscribes to a query, it must either specify an EPCIS trigger event or an EPCIS schedule
        in the URL to receive events. If these are missing the query subscription is invalid because the server won't
        know when to notify a client.

        For example, with this this subscription, the client creates a subscription and expects to be notified
        5 minutes after at 1AM every day on its `/queryCallback` endpoint. The client also tells the server to use
        the one-time password `0435ojtojt02` to send events.

        ```
        POST /queries/MyQuery/subscriptions?minute=5&hour=1
        {
          "callbackUrl": "https://client.example.com/queryCallback",
          "secret": "0435ojtojt02",
          "schedule": {"hour":"1", "minute": "5"}
        }
        ```
      requestBody:
        content:
          application/json:
            example: {
              "callbackUrl": "https://client.example.com/queryCallback",
              "secret": "0435ojtojt02",
              "schedule": { "hour": "1", "minute": "5" }
            }
            schema:
              allOf:
                - $ref: '#/components/schemas/GS1-Query-abstract-subscription'
                - oneOf:
                    - $ref: '#/components/schemas/GS1-Query-schedule-subscriptions'
                    - $ref: '#/components/schemas/GS1-Query-trigger-event-subscriptions'
      responses:
        '201':
          headers:
            Location:
              example: 'https://www.example.com/queries/MyQuery/subscriptions/df5a33e3-5aa3-4403-ae01-99b83234e27b'
              description: >
                The server creates a new subscription for each client and query subscription. The client needs that URL
                to unsubscribe by deleting this resource. The `Location` URL must point to the `subscriptionId` returned
                in the response body.
              schema:
                type: string
                format: uri
          description: >
            Query subscription successful. The subscription is valid until the client unsubscribes
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscriptionId:
                    type: string
                    example: df5a33e3-5aa3-4403-ae01-99b83234e27b
          links:
            unsubscribeClient:
              operationId: unsubscribe
              parameters:
                subscriptionId: $response.body#/subscriptionId
                queryName: $request.path.queryName
      callbacks:
        querySubscriptionResults:
          '{$request.body#/callbackUrl}?secret={$request.body#/secret}':
            post:
              summary: Registers this Webhook to subscribe to a query
              requestBody:
                description: >
                  The server sends the query result to the client. There is no pagination for a `POST` request, the
                  server must either send each EPCIS event individually or group EPCIS events in manageable sizes.

                  If an error occurs server-side, the server must send the error in the format that is already used for
                  returning `4xx` or `5xx` responses
                required: true
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: '#/components/schemas/EPCISEventsDocument'
                        - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
              responses:
                '200':
                  description: OK
                '401':
                  $ref: '#/components/responses/401AuthorizationInformationMissing'
                '403':
                  $ref: '#/components/responses/403ClientUnauthorized'
                '413':
                  description: >
                    The `POST` request is too large. The client can't handle a payload of this size at once and
                    asks the server to send EPCIS events in smaller batches.
                  content:
                    application/problem+json:
                      schema:
                        allOf:
                          - properties:
                              status:
                                type: integer
                                enum:
                                  - 413
                                default: 413
                              type:
                                type: string
                                format: uri
                                enum:
                                  - epcisException:QueryTooComplexException
                          - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'

  '/queries/{queryName}/subscriptions/{subscriptionId}':
    parameters:
      - $ref: '#/components/parameters/QueryName'
      - in: path
        name: subscriptionId
        required: true
        example: df5a33e3-5aa3-4403-ae01-99b83234e27b
        schema:
          type: string
    get:
      tags:
        - queries
        - subscriptions
      summary: Returns the subscription id. This method is useful to verify if a subscription is sitll active.
      responses:
        '200':
          description: >
            The `GET` method on a query subscription allows the client to verify if a subscription still exists.
            The server could return more information about the subscription, but this is up to the vendor.
          content:
            application/json:
              schema:
                type: string
              example:
                df5a33e3-5aa3-4403-ae01-99b83234e27b
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'
    delete:
      operationId: unsubscribe
      tags:
        - queries
        - subscriptions
      summary: Unsubscribes a client by deleting the query subscription.
      responses:
        '204':
          description: Client unsubscribed from query.
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'


  /queries/{queryName}/events:
    parameters:
      - $ref: '#/components/parameters/QueryName'
    options:
      tags:
        - events
        - queries
        - subscriptions
      summary: Query the meta data of an events query.
      description: >
        The `OPTIONS` method is used as a discovery service for named queries. It describes which EPCIS and CBV
        versions are used in the query result supported as well as  EPCIS and CBV extensions.
        Please note that this dos not apply to anonymous queries, since they are not stored.
      responses:
        204:
          $ref: '#/components/responses/204EventEndpointsOptionsResponse'
    get:
      tags:
        - queries
        - events
        - subscriptions
      summary: Returns events with the option to use pagination if needed. This endpoint supports query subscriptions.
      parameters:
        - $ref: '#/components/parameters/GS1-query-minRecordTime'
        - $ref: '#/components/parameters/Upgrade'
        - $ref: '#/components/parameters/Connection'
        - $ref: '#/components/parameters/NextPageToken'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/GS1-query-reportIfEmpty'
        - $ref: '#/components/parameters/GS1-query-initialRecordTime'
        - $ref: '#/components/parameters/GS1-query-schedule-second'
        - $ref: '#/components/parameters/GS1-query-schedule-minute'
        - $ref: '#/components/parameters/GS1-query-schedule-hour'
        - $ref: '#/components/parameters/GS1-query-schedule-dayOfMonth'
        - $ref: '#/components/parameters/GS1-query-schedule-month'
        - $ref: '#/components/parameters/GS1-query-schedule-dayOfWeek'
        - $ref: '#/components/parameters/GS1-query-trigger-event'
      description: >
        The `GET` endpoint is to retrieve large results that don't fit into the response of `POST` request.
        It can also be used to subscribe to anonymous queries.
        Furthermore, this endpoint can also be used to subscribe to queries using Websocket. To do this, the client
        muset specify the query schedule or trigger EPCIS event as URL query string parameter. Please note that
        schedule parameters and the trigger event parameter are mutually exclusive. 
      responses:
        '101':
         $ref: '#/components/responses/101WebsocketCreated'
        '200':
          $ref: '#/components/responses/200EPCISEventResponse'
        '400':
          $ref: '#/components/responses/400QueryInvalid'
        '401':
          $ref: '#/components/responses/401AuthorizationInformationMissing'
        '403':
          $ref: '#/components/responses/403ClientUnauthorized'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '500':
          $ref: '#/components/responses/500ImplementationException'


components:
  responses:
    '101WebsocketCreated':
      description: >
        Create a WebSocket connection to subscribe to queries. Upon subscription, the server SHALL send all new events
        to subscribing clients. If multiple clients have the same query, each client will receive events which they are
        authorized to see.
      headers:
        Upgrade:
          required: true
          schema:
            type: string
            default: websocket
        Connection:
          required: true
          schema:
            type: string
            default: upgrade
    200MasterDataResponse:
      headers:
        GS1-EPCIS-version:
          $ref: '#/components/headers/GS1-EPCIS-version'
        GS1-EPCIS-min:
          $ref: '#/components/headers/GS1-EPCIS-min'
        GS1-EPCIS-max:
          $ref: '#/components/headers/GS1-EPCIS-max'
        GS1-CBV-version:
          $ref: '#/components/headers/GS1-CBV-version'
        GS1-EPCIS-extensions:
          $ref: '#/components/headers/GS1-EPCIS-extensions'
        GS1-CBV-extensions:
          $ref: '#/components/headers/GS1-CBV-extensions'
        Link:
          $ref: '#/components/headers/Link'
      description: Returns the query result
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EPCISMasterDataDocument'

    200EPCISEventResponse:
      headers:
        GS1-EPCIS-version:
          $ref: '#/components/headers/GS1-EPCIS-version'
        GS1-EPCIS-min:
          $ref: '#/components/headers/GS1-EPCIS-min'
        GS1-EPCIS-max:
          $ref: '#/components/headers/GS1-EPCIS-max'
        GS1-CBV-version:
          $ref: '#/components/headers/GS1-CBV-version'
        GS1-EPCIS-extensions:
          $ref: '#/components/headers/GS1-EPCIS-extensions'
        GS1-CBV-extensions:
          $ref: '#/components/headers/GS1-CBV-extensions'
        Link:
          $ref: '#/components/headers/Link'
      description: Returns EPCIS data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EPCISEventsDocument'


    200SupportedEventTypes:
      description: Returns all supported EPCIS event types.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EPCISEventTypes'
    204TopLevelResourcesOptionsResponse:
      description: >
        The `OPTIONS` method is used as a discovery service for top-level resources endpoints. It describes which EPCIS
        and CBV versions are supported and used for the top-level resource as well as EPCIS and CBV extensions.
        The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
      headers:
        Allow:
          schema:
            type: string
            enum:
              - GET
              - OPTIONS

        GS1-EPCIS-version:
          $ref: '#/components/headers/GS1-EPCIS-version'
        GS1-EPCIS-min:
          $ref: '#/components/headers/GS1-EPCIS-min'
        GS1-EPCIS-max:
          $ref: '#/components/headers/GS1-EPCIS-max'
        GS1-CBV-version:
          $ref: '#/components/headers/GS1-CBV-version'
        GS1-EPCIS-extensions:
          $ref: '#/components/headers/GS1-EPCIS-extensions'
        GS1-Vendor-version:
          $ref: '#/components/headers/GS1-Vendor-version'
        GS1-CBV-extensions:
          $ref: '#/components/headers/GS1-CBV-extensions'
    '204QueryResultsOptionsResponse':
      description: >
        The `OPTIONS` method is used as a discovery service for `/queries` endpoints. It describes which EPCIS and CBV
        versions are used in the query result supported as well as  EPCIS and CBV extensions.
      headers:
        Allow:
          example:
            - GET
            - OPTIONS
          schema:
            type: string
            enum:
              - GET
              - OPTIONS
    '204AnonymousQueriesOptionsResponse':
      description: >
        The `OPTIONS` method is used as a discovery service for queries endpoints. For named queries,
        `OPTIONS` reveals which vocabularies are used in the query, etc. Anonymous queries are not stored, and
        therefore such information cannot be discovered.
        The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
      headers:
        Allow:
          example:
            - GET
            - OPTIONS
          schema:
            type: string
            enum:
              - GET
              - OPTIONS

        GS1-EPCIS-version:
          $ref: '#/components/headers/GS1-EPCIS-version'
        GS1-EPCIS-min:
          $ref: '#/components/headers/GS1-EPCIS-min'
        GS1-EPCIS-max:
          $ref: '#/components/headers/GS1-EPCIS-max'
        GS1-CBV-version:
          $ref: '#/components/headers/GS1-CBV-version'
        GS1-EPCIS-extensions:
          $ref: '#/components/headers/GS1-EPCIS-extensions'
        GS1-Vendor-version:
          $ref: '#/components/headers/GS1-Vendor-version'
        GS1-CBV-extensions:
          $ref: '#/components/headers/GS1-CBV-extensions'
    '204EventEndpointsOptionsResponse':
      description: >
        The `OPTIONS` method is used as a discovery service for /events endpoints. It describes which EPCIS and CBV
        versions are supported as well as  EPCIS and CBV extensions.
        The list of headers is not exhaustive. It only describes the functionality specific to EPCIS 2.0.
      headers:
        Allow:
          example:
            - GET
            - OPTIONS
            - POST
          schema:
            type: string
            enum:
              - GET
              - OPTIONS
              - POST
 
    '204QueryDeleted':
      description: Query deleted and clients disconnected
    '400QueryInvalid':
      description: The query is invalid
      content:
        application/json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 400
                    default: 400
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:SubscriptionControlsException
                      - epcisException:ValidationException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'

    '401AuthorizationInformationMissing':
      description: Authorization information is missing or invalid.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 401
                    default: 401
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:SecurityException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '400QueryException':
      description: Query exceptions defined in EPCIS
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 400
                    default: 400
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:QueryValidationException
                      - epcisException:QueryParameterException
                      - epcisException:QueryTooComplexException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '403ClientUnauthorized':
      description: Client is unauthorized to access this resource.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 403
                    default: 403
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:SecurityException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'


    404ResourceNotFound:
      description: The resource was not found. For example, the EPCIS event does not exist or the query does not exist.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 404
                    default: 404
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:NoSuchNameException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    413CapturePayloadTooLarge:
      headers:
        GS1-CAPTURE-limit:
          $ref: '#/components/headers/GS1-CAPTURE-limit'
        GS1-CAPTURE-file-size-limit:
          $ref: '#/components/headers/GS1-CAPTURE-file-size-limit'
      description: >
        The `POST` request is too large. It exceeds the limits set in `GS1-CAPTURE-limit` and/or
        `GS1-CAPTURE-file-size-limit`.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 413
                    default: 413
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:QueryTooComplexException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '414URLTooLong':
      description: URL is too long. This is usually a problem with large EPCIS queries in the URL.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 414
                    default: 414
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:QueryTooComplexException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    '500ImplementationException':
      description: This is a server-side problem caused when the query was resolved and executed.
      content:
        application/problem+json:
          schema:
            allOf:
              - properties:
                  status:
                    type: integer
                    enum:
                      - 500
                    default: 500
                  type:
                    type: string
                    format: uri
                    enum:
                      - epcisException:ImplementationException
              - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
  schemas:

    Location:
      description: Location header of a resource
      type: string
      format: uri
      example: /events/ObjectEvent/eventId123
    RFC7807ProblemResponseBody:
      description: A response as specified in [RFC 7807](https://tools.ietf.org/html/rfc7807)
      type: object
      required:
        - type
        - title
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
          format: uri
      example:
        type: "epcisException:SecurityException"
        title: "Unauthorized to execute query TestQuery"
        status: 401
        instance: "/queries/MyQuery"
    ReportIfEmpty:
      description: If true, a query result is always sent to the client, even if the result set is empty.
      type: boolean
    NamedQueryDefinition:
      type: object

      required:
        - name
        - query
      properties:
        name:
          $ref: '#/components/schemas/QueryName'
        query:
          $ref: '#/components/schemas/EPCISQuery'
        createdAt:
          type: string
          format: date-time
    EPCISQuery:
      type: object
      description: An EPCIS event query.
      example:
        {
          "eventTypes": "ObjectEvent" ,
          "EQ_bizStep": [
              "urn:epcglobal:cbv:bizstep:shipping",
              "urn:epcglobal:cbv:bizstep:receiving" ]
        }
      externalDocs:
        url: query-schema.json
      items:
        type: object
    QueryName:
      description: Unique query name
      type: string
      example: myQuery
    EPCISMasterDataQuery:
      type: array
      description: An EPCIS master data query.
      externalDocs:
        url: https://www.gs1.org/sites/default/files/docs/epc/EPCIS-Standard-1.2-r-2016-09-29.pdf
      items:
        type: object
    AllEvent:
      type: string
      description: A virtual EPCIS event type that is the union of all EPCIS event types.
      enum:
        - all
    EPCISMasterDataDocument:
      description: A collection of master data resources
      example:
        {
          "@context": [
              "https://gs1.github.io/EPCIS/epcis-context.jsonld",
              { "example": "http://ns.example.com/epcis/" },
              { "xmda": "http://epcis.example.com/mda" } ],
          "id": "_:example_9.8.1",
          "isA": "EPCISDocument",
          "schemaVersion": 2.0,
          "creationDate": "2005-07-11T11:30:47.0Z",
          "format": "application/ld+json",
          "epcisHeader": {
            "epcisMasterData": {
              "vocabularyList": [

                {
                  "vocabularyElementList": [
                    {
                      "isA": "urn:epcglobal:epcis:vtype:ReadPoint",
                      "id": "urn:epc:id:sgln:0037000.00729.8201",
                      "attributes": [
                        { "id": "cbvmda:site", "attribute": "0037000007296" },
                        { "id": "cbvmda:sst", "attribute": 201 }
                      ]
                    },
                    {
                      "isA": "urn:epcglobal:epcis:vtype:ReadPoint",
                      "id": "urn:epc:id:sgln:0037000.00729.8202",
                      "attributes": [
                        { "id": "cbvmda:site", "attribute": "0037000007296" },
                        { "id": "cbvmda:sst", "attribute": "202" }
                      ]
                    },
                    {
                      "isA": "urn:epcglobal:epcis:vtype:ReadPoint",
                      "id": "urn:epc:id:sgln:0037000.00729.8203",
                      "attributes": [
                        { "id": "cbvmda:sst", "attribute": 204 }
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "epcisBody": {
            "eventList": [ ]
          }
        }
      type: object
      externalDocs:
        description: >
          To validate EPCIS master data, please use [JSON schema](../JSON/EPCIS-JSON-Schema.json)
          or [SHACL file](../JSON/EPCIS-SHACL.ttl).
        url: ../JSON
    NewEPCISEvent:
      description: >
        A single, new EPCIS event. To be compatible with the capture interface, a single EPCIS uses the same
        document format.
      type: object
      externalDocs:
        description: >
          An EPCIS document that must be validated with the [JSON schema](../JSON/EPCIS-JSON-Schema.json) or
          [SHACL file](../JSON/EPCIS-SHACL.ttl).
        url: ../JSON/EPCIS-SHACL.ttl
      example:
        {
          "@context": [
              "https://gs1.github.io/EPCIS/epcis-context.jsonld",
              { "example": "http://ns.example.com/epcis/" } ],
          "id": "_:document1",
          "isA": "EPCISDocument",
          "schemaVersion": 2.0,
          "creationDate": "2005-07-11T11:30:47.0Z",
          "format": "application/ld+json",
          "epcisBody": {
            "eventList": [
              {
                "id": "_:event1",
                "isA": "ObjectEvent",
                "action": "OBSERVE",
                "bizStep": "urn:epcglobal:cbv:bizstep:shipping",
                "disposition": "urn:epcglobal:cbv:disp:in_transit",
                "epcList": [ "urn:epc:id:sgtin:0614141.107346.2017","urn:epc:id:sgtin:0614141.107346.2018" ],
                "eventTime": "2005-04-03T20:33:31.116000-06:00",
                "eventTimeZoneOffset": "-06:00",
                "readPoint": { "id": "urn:epc:id:sgln:0614141.07346.1234" },
                "bizTransactionList": [ 
                  { "type": "urn:epcglobal:cbv:btt:po",
                    "bizTransaction": "http://transaction.acme.com/po/12345678" } ]
              } ]
          }
        }
    EPCISEventsDocument:
      description: A collection of EPCIS resources.
      type: object
      example:
        {
          "@context": [
              "https://gs1.github.io/EPCIS/epcis-context.jsonld",
              { "example": "http://ns.example.com/epcis/" } ],
          "id": "_:document1",
          "isA": "EPCISDocument",
          "schemaVersion": 2.0,
          "creationDate": "2005-07-11T11:30:47.0Z",
          "format": "application/ld+json",
          "epcisBody": {
            "eventList": [
              {
                "id": "_:event1",
                "isA": "ObjectEvent",
                "action": "OBSERVE",
                "bizStep": "urn:epcglobal:cbv:bizstep:shipping",
                "disposition": "urn:epcglobal:cbv:disp:in_transit",
                "epcList": [ "urn:epc:id:sgtin:0614141.107346.2017","urn:epc:id:sgtin:0614141.107346.2018" ],
                "eventTime": "2005-04-03T20:33:31.116000-06:00",
                "eventTimeZoneOffset": "-06:00",
                "readPoint": { "id": "urn:epc:id:sgln:0614141.07346.1234" },
                "bizTransactionList": [ 
                  { "type": "urn:epcglobal:cbv:btt:po", "bizTransaction": "http://transaction.acme.com/po/12345678" } ]
              },
              {
                "id": "_:event2",
                "isA": "ObjectEvent",
                "action": "OBSERVE",
                "bizStep": "urn:epcglobal:cbv:bizstep:receiving",
                "disposition": "urn:epcglobal:cbv:disp:in_progress",
                "epcList": [ "urn:epc:id:sgtin:0614141.107346.2018" ],
                "eventTime": "2005-04-04T20:33:31.116-06:00",
                "eventTimeZoneOffset": "-06:00",
                "readPoint": { "id": "urn:epc:id:sgln:0012345.11111.400" },
                "bizLocation": { "id": "urn:epc:id:sgln:0012345.11111.0" },
                "bizTransactionList": [
                  { "type": "urn:epcglobal:cbv:btt:po", "bizTransaction": "http://transaction.acme.com/po/12345678" },
                  { "type": "urn:epcglobal:cbv:btt:desadv", "bizTransaction": "urn:epcglobal:cbv:bt:0614141073467:1152" }
                ],
                "example:myField": "Example of a vendor/user extension"
              }
            ]
          }
        }
      externalDocs:
        description: >
          An EPCIS document that must be validated with the [JSON schema](../JSON/EPCIS-JSON-Schema.json) or
          [SHACL file](../JSON/EPCIS-SHACL.ttl).
        url: ../JSON/EPCIS-SHACL.ttl

    Link:
      description: >
        A pagination header link. This header works together with the `perPage` and `nextPageToken` query string parameters.
      type: string
      format: uri
      example: '<https://example.com/events/all?perPage=30&nextPageToken=3A1550673874978%2Ci%3AU6D7DENAKwM2gQRRwGrataeq>; rel="next"'
    PerPage:
      description: >
        Parameter to control pagination. `perPage` specifies the maximum number of events returned in one batch.
        As long as there are more resources to retrieve, the Link header contains the URL of the next page and
        the attribute `'rel="next"'`. The last page is indicated by the absence of the `'rel="next"'`. Depending on the
        implementation, there can be an upper limit for the `perPage` value, which should be stated in the documentation.
      type: integer
      default: 30
    NextPageToken:
      description: >
        Parameter that point to the next list of results when requesting a list of events that is larger than the value
        specified with the `perPage` parameter. Some technologies refer to this as scrolling.
        A `nextPageToken` may be invalidated through timeout. It is up to the specific implementation to provide
        the mechanisms for invalidating tokens.
      type: string
      example: '3A1550673874978%2Ci%3AU6D7DENAKwM2gQRRwGrataeq'
    EPCISEventTypes:
      type: string
      description: The five types of EPCIS events.
      example:
        - ObjectEvent
        - AggregationEvent
        - AssociationEvent
        - TransformationEvent
        - TransactionEvent
      enum:
        - ObjectEvent
        - AggregationEvent
        - AssociationEvent
        - TransformationEvent
        - TransactionEvent
    GS1-QUERY-minRecordTime:
      description: >
        An optional header to specify the smallest possible record time for
        EPCIS events in a query subscription
      type: string
      format: time
      example: "2020-04-04T20:33:31.116-06:00"
    # New schemas
    GS1-QUERY-initialRecordTime:
      description: >
        An optional header to specify a time used to constrain what resources are considered when processing a query
        subscription. This value only applies the first time a subscriber receives events. If ommitted, the defualt
        value is the current time.
      type: string
      format: time
      example: "2020-04-04T20:33:31.116-06:00"
    GS1-Query-abstract-subscription:
      example: {
        "callbackUrl": "https://client.example.com/queryCallback",
        "secret": "0435ojtojt02"
      }
      type: object
      description: This schema contains shared features of EPCIS query subscriptions.
      required:
        - callbackUrl
        - secret
      properties:
        callbackUrl:
          description: Callback to receive EPCIS resources and errors
          type: string
          format: uri
          example: https://client.example.com/queryCallback
        secret:
          example: '0435ojtojt02'
          type: string
          description: One-time password generated by the client for the server.
        reportIfEmpty:
          $ref: '#/components/schemas/GS1-Query-reportIfEmpty'
        initialRecordTime:
          $ref: '#/components/schemas/GS1-QUERY-initialRecordTime'
    GS1-Query-trigger-event-subscriptions:
      description: The URL of a trigging event used trigger a query subscription.
      type: object
      required:
        - trigger
      properties:
        trigger:
          $ref: '#/components/schemas/GS1-query-trigger-event'

    GS1-Query-schedule-subscriptions:
      description: The URL of a trigging event used trigger a query subscription.
      type: object
      example: {"schedule": {"hour":"1", "minute": "5"}}
      required:
        - schedule
      properties:
        schedule:
          type: object
          properties:
            second:
              $ref: '#/components/schemas/GS1-query-schedule-second'
            minute:
              $ref: '#/components/schemas/GS1-query-schedule-minute'
            hour:
              $ref: '#/components/schemas/GS1-query-schedule-hour'
            dayOfMonth:
              $ref: '#/components/schemas/GS1-query-schedule-dayOfMonth'
            month:
              $ref: '#/components/schemas/GS1-query-schedule-month'
            dayOfWeek:
              $ref: '#/components/schemas/GS1-query-schedule-dayOfWeek'

    GS1-Query-rule-subscriptions:
      description: >
        This subscription rules generalises trigger event subscriptions. It support trigger rules written
        in the EPCIS query language.
        Trigger rule subscriptions are optional.
      type: object
      required:
        - rules
      properties:
        rules:
          type: object
    GS1-Query-reportIfEmpty:
      example: false
      type: boolean
      default: false
      description: Flag to specify subscribed clients should be notified if the query result is empty.

    GS1-query-schedule-second:
      example: 0
      type: string
      pattern: "(\\g<element>,)*\\g<element>|(?<element>(\\g<number>|\\g<range>))|(?<range>(\\[\\g<number>\\-\\g<number>\\]))|(?<number>([0-59]))"
    GS1-query-schedule-minute:
      example: 5
      type: string
      pattern: "(\\g<element>,)*\\g<element>|(?<element>(\\g<number>|\\g<range>))|(?<range>(\\[\\g<number>\\-\\g<number>\\]))|(?<number>([0-59]))"
    GS1-query-schedule-hour:
      example: 1
      type: string
      pattern: "(\\g<element>,)*\\g<element>|(?<element>(\\g<number>|\\g<range>))|(?<range>(\\[\\g<number>\\-\\g<number>\\]))|(?<number>([0-23]))"
    GS1-query-schedule-dayOfMonth:
      example: 1
      type: string
      pattern: "(\\g<element>,)*\\g<element>|(?<element>(\\g<number>|\\g<range>))|(?<range>(\\[\\g<number>\\-\\g<number>\\]))|(?<number>([1-31]))"
    GS1-query-schedule-month:
      example: 1
      type: string
      pattern: "(\\g<element>,)*\\g<element>|(?<element>(\\g<number>|\\g<range>))|(?<range>(\\[\\g<number>\\-\\g<number>\\]))|(?<number>([1-12]))"
    GS1-query-schedule-dayOfWeek:
      example: 1
      type: string
      pattern: "(\\g<element>,)*\\g<element>|(?<element>(\\g<number>|\\g<range>))|(?<range>(\\[\\g<number>\\-\\g<number>\\]))|(?<number>([1-7]))"
    GS1-query-trigger-event:
      type: string
      format: uri
      example: 'https://id.gs1.org/01/000123456789/21/12'
    Upgrade:
      type: string
      description: The `Upgrade` and `Connection` headers are needed to open a Websocket for queries.
      default: websocket
      example: websocket

    Connection:
      example: Upgrade
      description: The `Upgrade` and `Connection` headers are needed to open a Websocket for queries.
      type: string
      default: upgrade

    # describe header schema
    GS1-EPCIS-version:
      description: The EPCIS version
      type: string
      pattern: ^\d+(\.\d+)?$
      example: "2.0"
    GS1-EPCIS-min:
      description: The lowest EPCIS version supported
      type: string
      pattern: ^\d+(\.\d+)?$
      example: "2.0"
    GS1-EPCIS-max:
      description: The highest EPCIS version supported
      type: string
      pattern: ^\d+(\.\d+)?$
    GS1-CBV-version:
      description: The core business vocabulary version
      type: string
    GS1-EPCIS-extensions:
      description: Specific EPCIS extensions supported (e.g. for FIT)
      example: {"example-epc-ext": "http://example.com/epcis/"}
      type: object
    GS1-Vendor-version:
      description: A versioning scheme that can be freely chosen by the vendor
      type: array
      items:
        type: string
      uniqueItems: true
    GS1-CBV-extensions:
      description: An optional header to specify the vocabulary for the top-level endpoints
      example: {"ex": "http://example.com/vendor1", "vendor2": "https://example.org/defs#"}
      type: object
      uniqueItems: true
    GS1-CAPTURE-limit:
      description: The maximum number of EPCIS events that can be captured per call
      type: string
      pattern: ^(\d+|\*)$
    GS1-CAPTURE-file-size-limit:
      description: The maximum event document length in octets (8-bit bytes)
      type: string
      pattern: ^(\d+|\*)$

  parameters:
    # Top-level resource instances
    EPC:
      description: An electronic product code value
      example: urn:epc:id:sgtin:0614141.107346.2018
      required: true
      in: path
      name: epc
      schema:
        type: string
        format: uri
    BizStep:
      description: A business step value
      example: urn:epcglobal:cbv:bizstep:receiving
      required: true
      in: path
      name: bizStep
      schema:
        type: string
        format: uri
    BizLocation:
      description: A business location value
      example: urn:epc:id:sgln:0012345.11111.0
      required: true
      in: path
      name: bizLocation
      schema:
        type: string
        format: uri
    ReadPoint:
      description: A read point value
      example: urn:epc:id:sgln:0012345.11111.400
      required: true
      in: path
      name: readPoint
      schema:
        type: string
        format: uri
    Disposition:
      description: A disposition value
      example: urn:epcglobal:cbv:disp:in_progress
      required: true
      in: path
      name: disposition
      schema:
        type: string
        format: uri

    PerPage:
      in: query
      name: perPage
      schema:
        $ref: '#/components/schemas/PerPage'
    NextPageToken:
      in: query
      name: nextPageToken
      schema:
        $ref: '#/components/schemas/NextPageToken'
    ReportIfEmpty:
      in: query
      name: reportIfEmpty
      required: false
      schema:
        $ref: '#/components/schemas/ReportIfEmpty'
    GS1-query-minRecordTime:
      in: header
      name: GS1-QUERY-minRecordTime
      required: false
      schema:
        $ref: '#/components/schemas/GS1-QUERY-minRecordTime'
    #new query params
    GS1-query-schedule-second:
      $ref: '#/components/schemas/GS1-query-schedule-second'
    GS1-query-schedule-minute:
      $ref: '#/components/schemas/GS1-query-schedule-minute'
    GS1-query-schedule-hour:
      $ref: '#/components/schemas/GS1-query-schedule-hour'
    GS1-query-schedule-dayOfMonth:
      $ref: '#/components/schemas/GS1-query-schedule-dayOfMonth'
    GS1-query-schedule-month:
      $ref: '#/components/schemas/GS1-query-schedule-month'
    GS1-query-schedule-dayOfWeek:
      $ref: '#/components/schemas/GS1-query-schedule-dayOfWeek'
    GS1-query-reportIfEmpty:
      $ref: '#/components/schemas/GS1-Query-reportIfEmpty'
    GS1-query-initialRecordTime:
      $ref: '#/components/schemas/GS1-QUERY-initialRecordTime'
    GS1-query-trigger-event:
      $ref: 'components/schemas/GS1-query-trigger-event'
    # end new params
    Upgrade:
      in: header
      name: Upgrade
      required: false
      schema:
        $ref: '#/components/schemas/Upgrade'
    Connection:
      in: header
      name: Connection
      required: false
      schema:
        $ref: '#/components/schemas/Upgrade'

    EventID:
      name: eventID
      in: path
      description: >
        The ID of an EPCIS event. Because of the `all` reserved value for EPCIS events types,
        an EPCIS event ID must be unique.
      required: true
      example: "_:event1"
      schema:
        type: string
    EventType:
      name: eventType
      in: path
      example: ObjectEvent
      required: true
      description: >
        Names of EPCIS event types plus the reserved name `all`,
        which is the union of all EPCIS event types
      schema:
        oneOf:
          - $ref: '#/components/schemas/EPCISEventTypes'
          - $ref: '#/components/schemas/AllEvent'
    QueryName:
      in: path
      name: queryName
      required: true
      schema:
        $ref: '#/components/schemas/QueryName'

    # request headers from schema
    GS1-EPCIS-version:
      in: header
      name: GS1-EPCIS-version
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-version'
    GS1-EPCIS-min:
      in: header
      name: GS1-EPCIS-min
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-min'
    GS1-EPCIS-max:
      in: header
      name: GS1-EPCIS-max
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-max'
    GS1-CBV-version:
      in: header
      name: GS1-CBV-version
      schema:
        $ref: '#/components/schemas/GS1-CBV-version'
    GS1-EPCIS-extensions:
      in: header
      name: GS1-EPCIS-extensions
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-extensions'
    GS1-Vendor-version:
      in: header
      name: GS1-Vendor-version
      schema:
        $ref: '#/components/schemas/GS1-Vendor-version'
    GS1-CBV-extensions:
      in: header
      name: GS1-CBV-extensions
      schema:
        $ref: '#/components/schemas/GS1-CBV-extensions'
    GS1-CAPTURE-limit:
      in: header
      name: GS1-CAPTURE-limit
      schema:
        $ref: '#/components/schemas/GS1-CAPTURE-limit'
    GS1-CAPTURE-file-size-limit:
      in: header
      name: GS1-CAPTURE-file-size-limit
      schema:
        $ref: '#/components/schemas/GS1-CAPTURE-file-size-limit'

  headers:

    # response headers from schema
    GS1-EPCIS-version:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-version'
    GS1-EPCIS-min:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-min'
    GS1-EPCIS-max:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-max'
    GS1-CBV-version:
      schema:
        $ref: '#/components/schemas/GS1-CBV-version'
    GS1-EPCIS-extensions:
      schema:
        $ref: '#/components/schemas/GS1-EPCIS-extensions'
    GS1-Vendor-version:
      schema:
        $ref: '#/components/schemas/GS1-Vendor-version'
    GS1-CBV-extensions:
      schema:
        $ref: '#/components/schemas/GS1-CBV-extensions'
    GS1-CAPTURE-limit:
      schema:
        $ref: '#/components/schemas/GS1-CAPTURE-limit'
    GS1-CAPTURE-file-size-limit:
      schema:
        $ref: '#/components/schemas/GS1-CAPTURE-file-size-limit' 

    Location:
      schema:
        $ref: '#/components/schemas/Location'
    GS1-QUERY-minRecordTime:
      schema:
        $ref: '#/components/schemas/GS1-QUERY-minRecordTime'
    Link:
      schema:
        $ref: '#/components/schemas/Link'

  requestBodies:
    CreateEventQuery:
      description: Creates and executes an events query
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EPCISQuery'
    CreateMasterDataQuery:
      description: Creates and executes a master data query
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EPCISMasterDataQuery'

