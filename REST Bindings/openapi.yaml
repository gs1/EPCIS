openapi: "3.0.2"
info:
    version: 2.0.0
    title: EPCIS 2.0 REST Bindings
    license:
        name: Apache2

servers:
    - url: https://{vendorVersion}.{vendorDomain}/{standardVersion}
      variables:
          vendorVersion:
              default: production
              description: Vendor-specific version of the EPCIS respository implementation
          standardVersion:
              default: 'v2_0'
              enum:
                  - "v2_0"
              description: The version of the EPCIS standard that is supported
          vendorDomain:
              default: gs1.org
              description: Domain name of the EPCIS respository

paths:
    
    /capture:
        options:
            summary: Query supported EPCIS version and related vocabularies/standards
            parameters:
                - $ref: '#/components/parameters/X-EPCIS-version'
                - $ref: '#/components/parameters/X-EPCIS-min'
                - $ref: '#/components/parameters/X-EPCIS-max'
                - $ref: '#/components/parameters/X-CBV-version'
                - $ref: '#/components/parameters/X-EPCIS-extensions'
                - $ref: '#/components/parameters/X-CBV-extensions'
                - $ref: '#/components/parameters/X-Vendor-version'
                - $ref: '#/components/parameters/X-Resources-vocabulary'
            responses:
                '200':
                    description: Server can comply with the EPCIS-related requirements from the client
                    content:
                        application/json:
                            schema:
                              {}
        post:
            description: Captures one or several EPCIS events.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - epcisBody
                            properties:
                                errorUrl:
                                    type: string
                                    format: uri
                                epcisBody:
                                    type: object
                                    properties:
                                        eventList:
                                            type: array
                                            items:
                                                "$ref": "#/components/schemas/OnlyValidEvent"
                                    required:
                                        - eventList
            responses:
                '202':
                    description: Successfully received one or more EPCIS events.
                
                '400':
                    description: Bad request. Malformed EPCIS event document.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 400
                                              default: 400
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:ValidationException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                '401':
                    description: Authorization information is missing or invalid.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 401
                                              default: 401
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:SecurityException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
            callbacks:
                onError:
                    '{$request.body#/errorUrl}':
                        description: The channel to receive errors an exceptions has been successfully established.
                        post:
                            requestBody:
                                content:
                                    application/json:
                                        schema:
                                            allOf:
                                                - $ref: '#/components/schemas/RFC7807ProblbemCallbackPayload'
                                                - properties:
                                                      type:
                                                          type: string
                                                          format: uri
                                                          enum:
                                                              - epcisExceptions:SecurityException
                                                              - epcisExceptions:ValidationException
                                                              - epcisExceptions:ImplementationException
                            responses:
                                '200':
                                    description: Success
    
    /events:
        options:
            summary: Query supported EPCIS version and related vocabularies/standards
            parameters:
                - $ref: '#/components/parameters/X-EPCIS-version'
                - $ref: '#/components/parameters/X-EPCIS-min'
                - $ref: '#/components/parameters/X-EPCIS-max'
                - $ref: '#/components/parameters/X-CBV-version'
                - $ref: '#/components/parameters/X-EPCIS-extensions'
                - $ref: '#/components/parameters/X-CBV-extensions'
                - $ref: '#/components/parameters/X-Vendor-version'
                - $ref: '#/components/parameters/X-Resources-vocabulary'
            responses:
                '200':
                    description: Server can comply with the EPCIS-related requirements from the client
                    content:
                        application/json:
                            schema:
                              {}
        get:
            responses:
                '200':
                    description: Returns all supported EPCIS event types.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/EPCISEventTypes'
                
                '401':
                    description: Authorization information is missing or invalid.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 401
                                              default: 401
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:SecurityException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                
                '500':
                    description: This is a backend problem caused by an exception.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 500
                                              default: 500
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:ImplementationException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    
    /events/{eventType}:
        options:
            summary: Query supported EPCIS version and related vocabularies/standards
            parameters:
                - $ref: '#/components/parameters/X-EPCIS-version'
                - $ref: '#/components/parameters/X-EPCIS-min'
                - $ref: '#/components/parameters/X-EPCIS-max'
                - $ref: '#/components/parameters/X-CBV-version'
                - $ref: '#/components/parameters/X-EPCIS-extensions'
                - $ref: '#/components/parameters/X-CBV-extensions'
                - $ref: '#/components/parameters/X-Vendor-version'
                - $ref: '#/components/parameters/X-Resources-vocabulary'
            responses:
                '200':
                    description: Server can comply with the EPCIS-related requirements from the client
                    content:
                        application/json:
                            schema:
                              {}
        parameters:
            - name: eventType
              in: path
              required: true
              schema:
                  oneOf:
                      - $ref: '#/components/schemas/EPCISEventTypes'
                      - $ref: '#/components/schemas/AllEvent'
        
        get:
            operationId: getEvents
            parameters:
                - name: filter
                  in: query
                  schema:
                      $ref: '#/components/schemas/EPCISQuery'
            description: Returns all EPCIS events of a given type.
            responses:
                '200':
                    description: Returns a list of EPCIS events of the type specified in the path.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    "$ref": "#/components/schemas/OnlyValidEvent"
                                uniqueItems: true
                '400':
                    description: Query exceptions defined in EPCIS
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 400
                                              default: 400
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:QueryValidationException
                                                  - epcisExceptions:QueryParameterException
                                                  - epcisExceptions:QueryTooComplexException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                '401':
                    description: Authorization information is missing or invalid.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 401
                                              default: 401
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:SecurityException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                '404':
                    description: Event type not found
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 404
                                              default: 404
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:NoSuchNameException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                '414':
                    description: Query too long, if the total URL length exceeds 2000 characters.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 414
                                              default: 414
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:QueryTooComplexException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                '412':
                    description: Mismatch of the event type constraint in the path and in the query.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 412
                                              default: 412
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:QueryParameterException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    
    
    /events/{eventType}/{eventId}:
        parameters:
            - name: eventType
              in: path
              required: true
              schema:
                  $ref: '#/components/schemas/EPCISEventTypes'
            - name: eventId
              in: path
              required: true
              schema:
                  type: string
                  format: uuid
        options:
            summary: Query supported EPCIS version and related vocabularies/standards.
            parameters:
                - $ref: '#/components/parameters/X-EPCIS-version'
                - $ref: '#/components/parameters/X-EPCIS-min'
                - $ref: '#/components/parameters/X-EPCIS-max'
                - $ref: '#/components/parameters/X-CBV-version'
                - $ref: '#/components/parameters/X-EPCIS-extensions'
                - $ref: '#/components/parameters/X-CBV-extensions'
                - $ref: '#/components/parameters/X-Vendor-version'
                - $ref: '#/components/parameters/X-Resources-vocabulary'
            responses:
                '200':
                    description: Server can comply with the EPCIS-related requirements from the client
                    content:
                        application/json:
                            schema:
                              {}
        get:
            responses:
                '200':
                    description: Accesses the EPCIS event corresponding to the given event id.
                    content:
                        application/json:
                            schema:
                                oneOf:
                                    - "$ref": "#/components/schemas/OnlyValidEvent"
                '401':
                    description: Authorization is invalid
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 401
                                              default: 401
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:SecurityException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                '403':
                    description: Client is unauthorized to access this resource.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 403
                                              default: 403
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:SecurityException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                '404':
                    description: Event type or evnet id not found
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 404
                                              default: 404
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:NoSuchNameException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    
    
    /queries:
        options:
            summary: Query supported EPCIS version and related vocabularies/standards
            parameters:
                - $ref: '#/components/parameters/X-EPCIS-version'
                - $ref: '#/components/parameters/X-EPCIS-min'
                - $ref: '#/components/parameters/X-EPCIS-max'
                - $ref: '#/components/parameters/X-CBV-version'
                - $ref: '#/components/parameters/X-EPCIS-extensions'
                - $ref: '#/components/parameters/X-CBV-extensions'
                - $ref: '#/components/parameters/X-Vendor-version'
                - $ref: '#/components/parameters/X-Resources-vocabulary'
            
            responses:
                '200':
                    description: Server can comply with the EPCIS-related requirements from the client
                    content:
                        application/json:
                            schema:
                              {}
        get:
            responses:
                '200':
                    description: Returns a list of active queries.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/NamedQueryMetaData'
                                uniqueItems: true
                '400':
                    description: Exceptions defined in EPCIS 1.2, section 8.2.6 for `getQueryNames`
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 400
                                              default: 400
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:ValidationException
                                                  - epcisExceptions:ImplementationException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                '401':
                    description: Authorization information is missing or invalid.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 401
                                              default: 401
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:SecurityException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
        
        post:
            description: Creates a new named query.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/NamedQueryMetaData'
            responses:
                '201':
                    description: A resource was created and the link to the newly created resource is returned in the header.
                    headers:
                        Location:
                            schema:
                                type: string
                                format: uri
                        Content-Location:
                            schema:
                                type: string
                                format: uri
                '401':
                    description: Authorization information is missing or invalid.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 401
                                              default: 401
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:SecurityException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                '400':
                    description: Query exceptions defined in EPCIS
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 400
                                              default: 400
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:QueryValidationException
                                                  - epcisExceptions:QueryParameterException
                                                  - epcisExceptions:QueryTooComplexException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                '414':
                    description: Query too long, if the total URL length exceeds 2000 characters.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 414
                                              default: 414
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:QueryTooComplexException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    
    
    
    /queries/{queryName}/events:
        parameters:
            - name: queryName
              in: path
              required: true
              schema:
                  type: string
        options:
            summary: Query supported EPCIS version and related vocabularies/standards
            parameters:
                - $ref: '#/components/parameters/X-EPCIS-version'
                - $ref: '#/components/parameters/X-EPCIS-min'
                - $ref: '#/components/parameters/X-EPCIS-max'
                - $ref: '#/components/parameters/X-CBV-version'
                - $ref: '#/components/parameters/X-EPCIS-extensions'
                - $ref: '#/components/parameters/X-CBV-extensions'
                - $ref: '#/components/parameters/X-Vendor-version'
                - $ref: '#/components/parameters/X-Resources-vocabulary'
            responses:
                '200':
                    description: Server can comply with the EPCIS-related requirements from the client
                    content:
                        application/json:
                            schema:
                              {}
        get:
            operationId: runNamedQuery
            
            responses:
                '200':
                    description: Returns a list of EPCIS events that match the query named in the path.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    "$ref": "#/components/schemas/OnlyValidEvent"
                                uniqueItems: true
                '401':
                    description: Authorization information is missing or invalid.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 401
                                              default: 401
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:SecurityException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                
                '404':
                    description: Exceptions defined in EPCIS 1.2, section 8.2.6 for `poll`.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 401
                                              default: 401
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:NoSuchNameException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                '400':
                    description: The query is invalid
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 400
                                              default: 400
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:ValidationException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                '500':
                    description: This is a backend problem caused when the query was resolved and executed.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 500
                                              default: 500
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:ImplementationException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                '414':
                    description: Query too long, if the total URL length exceeds 2000 characters.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 414
                                              default: 414
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:QueryTooComplexException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
    
    
    /queries/{queryName}/subscriptions:
        parameters:
            - name: queryName
              in: path
              required: true
              schema:
                  type: string
        options:
            summary: Query supported EPCIS version and related vocabularies/standards
            parameters:
                - $ref: '#/components/parameters/X-EPCIS-version'
                - $ref: '#/components/parameters/X-EPCIS-min'
                - $ref: '#/components/parameters/X-EPCIS-max'
                - $ref: '#/components/parameters/X-CBV-version'
                - $ref: '#/components/parameters/X-EPCIS-extensions'
                - $ref: '#/components/parameters/X-CBV-extensions'
                - $ref: '#/components/parameters/X-Vendor-version'
                - $ref: '#/components/parameters/X-Resources-vocabulary'
            responses:
                '200':
                    description: Server can comply with the EPCIS-related requirements from the client
                    content:
                        application/json:
                            schema:
                              {}
        
        post:
            summary: Create a new query subscription. You must specify either a trigger parameter or schedule parameter.
            parameters:
                - name: schedule
                  in: query
                  schema:
                      $ref: '#/components/schemas/QuerySchedule'
                - name: trigger
                  in: query
                  schema:
                      $ref: '#/components/schemas/EPCISQuery'
            requestBody:
                content:
                    application/json:
                        schema:
                            oneOf:
                                - $ref: '#/components/schemas/TriggeredSubscriptionCallbackUrls'
                                - $ref: '#/components/schemas/ScheduledSubscriptionCallbackUrls'
            responses:
                '201':
                    description: A resource was created and the link to the newly created resource is returned in the header.
                    headers:
                        Location:
                            schema:
                                type: string
                                format: uri
                        Content-Location:
                            schema:
                                type: string
                                format: uri
                '400':
                    description: Exceptions defined in EPCIS 1.2, section 8.2.6 for `subscribe`
                    
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 400
                                              default: 400
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:InvalidURIException
                                                  - epcisExceptions:DuplicateSubscriptionException
                                                  - epcisExceptions:QueryParameterException
                                                  - epcisExceptions:QueryTooComplexException
                                                  - epcisExceptions:SubscriptionControlsException
                                                  - epcisExceptions:ValidationException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                '401':
                    description: Authorization information is missing or invalid.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 401
                                              default: 401
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:SecurityException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                
                '403':
                    description: Subscripotion not permitted
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 403
                                              default: 403
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:SubscribeNotPermittedException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                
                '404':
                    description: The query name does not exist.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 404
                                              default: 404
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:NoSuchNameException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                
                
                
                '409':
                    description: Client is already subscribed to that query
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 409
                                              default: 409
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:DuplicateSubscriptionException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                
                '414':
                    description: Query too long, if the total URL length exceeds 2000 characters.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 414
                                              default: 414
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:QueryTooComplexException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                
                '500':
                    description: This is a backend problem caused when the query was resolved and executed.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 500
                                              default: 500
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:ImplementationException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
            callbacks:
                onTriggeredEvent:
                    '{$request.body#/triggerUrl}':
                        description: >-
                            Successfully subscribed to a stream of events that match the trigger conditions defined
                            in the trigger parameter.
                        post:
                            requestBody:
                                content:
                                    application/json:
                                        schema:
                                            type: array
                                            items:
                                                type: object
                                            uniqueItems: true
                            responses:
                                '200':
                                    description: Success
                onScheduledEvent:
                    '{$request.body#/scheduleUrl}':
                        description: >-
                            Successfully subscribed to a stream of events that are delivered periodically as defined in the
                            schedule query parameter.
                        post:
                            requestBody:
                                content:
                                    application/json:
                                        schema:
                                            type: array
                                            items:
                                                type: object
                                            uniqueItems: true
                            responses:
                                '200':
                                    description: Success
                onError:
                    '{$request.body#/errorUrl}':
                        description: The channel to receive errors an exceptions has been successfully established.
                        post:
                            requestBody:
                                content:
                                    application/json:
                                        schema:
                                            allOf:
                                                - $ref: '#/components/schemas/RFC7807ProblbemCallbackPayload'
                                                - properties:
                                                      type:
                                                          type: string
                                                          format: uri
                                                          enum:
                                                              - SubscribeResult
                                                              - epcisExceptions:NoSuchNameException
                                                              - epcisExceptions:InvalidURIException
                                                              - epcisExceptions:DuplicateSubscriptionException
                                                              - epcisExceptions:QueryParameterException
                                                              - epcisExceptions:QueryTooComplexException
                                                              - epcisExceptions:SubscriptionControlsException
                                                              - epcisExceptions:SubscribeNotPermittedException
                                                              - epcisExceptions:SecurityException
                                                              - epcisExceptions:ValidationException
                                                              - epcisExceptions:ImplementationException
                            responses:
                                '200':
                                    description: Success
    
    /queries/{queryName}/subscriptions/{subscriptionId}:
        parameters:
            - name: queryName
              in: path
              required: true
              schema:
                  type: string
            - name: subscriptionId
              in: path
              required: true
              schema:
                  type: string
                  format: uuid
        options:
            summary: Query supported EPCIS version and related vocabularies/standards
            parameters:
                - $ref: '#/components/parameters/X-EPCIS-version'
                - $ref: '#/components/parameters/X-EPCIS-min'
                - $ref: '#/components/parameters/X-EPCIS-max'
                - $ref: '#/components/parameters/X-CBV-version'
                - $ref: '#/components/parameters/X-EPCIS-extensions'
                - $ref: '#/components/parameters/X-CBV-extensions'
                - $ref: '#/components/parameters/X-Vendor-version'
                - $ref: '#/components/parameters/X-Resources-vocabulary'
            responses:
                '200':
                    description: Server can comply with the EPCIS-related requirements from the client
                    content:
                        application/json:
                            schema:
                              {}
        delete:
            operationId: unsubscribeOperation
            
            responses:
                '201':
                    description: Successfully unsubscribed.
                '400':
                    description: Errors that occur when the client tried to unsubscribe
                    
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 400
                                              default: 400
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:InvalidURIException
                                                  - epcisExceptions:SubscriptionControlsException
                                                  - epcisExceptions:ValidationException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                '401':
                    description: Authorization information is missing or invalid.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 401
                                              default: 401
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:SecurityException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                
                
                '404':
                    description: The query name does not exist or the subscription does not exist.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 404
                                              default: 404
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:NoSuchNameException
                                                  - epcisExceptions:NoSuchSubscriptionException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
                
                
                '500':
                    description: This is a backend problem caused when the client tried to unsubscribe.
                    content:
                        application/problem+json:
                            schema:
                                allOf:
                                    - properties:
                                          status:
                                              type: integer
                                              enum:
                                                  - 500
                                              default: 500
                                          type:
                                              type: string
                                              format: uri
                                              enum:
                                                  - epcisExceptions:ImplementationException
                                    - $ref: '#/components/schemas/RFC7807ProblemResponseBody'

components:
    schemas:
        RFC7807ProblemResponseBody:
            description: A response as speciified in [RFC 7807](https://tools.ietf.org/html/rfc7807)
            type: object
            required:
                - type
                - title
                - detail
            properties:
                type:
                    type: string
                    format: uri
                title:
                    type: string
                status:
                    type: integer
                detail:
                    type: string
                instance:
                    type: string
                    format: uri
        
        RFC7807ProblbemCallbackPayload:
            description: |-
                We can't return error messages to the client for most cases during subscriptions or capture operations because
                 they are asynchronous. Instead, the client asks the server to open a channel for error messages. These error
                messages comply with [RFC 7807](https://tools.ietf.org/html/rfc7807) to make exception more reusable.
            
            allOf:
                - oneOf:
                      - properties:
                            eventId:
                                type: string
                      - properties:
                            event:
                                type: object
                - $ref: '#/components/schemas/RFC7807ProblemResponseBody'
        
        NamedQueryMetaData:
            type: object
            required:
                - name
                - query
            properties:
                name:
                    type: string
                query:
                    type: string
                createdAt:
                    type: string
                    format: date-time
                epcisQuery:
                    $ref: '#/components/schemas/EPCISQuery'
                activeSubscriptions:
                    type: array
                    items:
                        $ref: '#/components/schemas/QuerySubscriptionMetaData'
        
        QuerySubscriptionMetaData:
            type: object
            properties:
                id:
                    type: string
                    format: uuid
                callbacks:
                    oneOf:
                        - $ref: '#/components/schemas/TriggeredSubscriptionCallbackUrls'
                        - $ref: '#/components/schemas/ScheduledSubscriptionCallbackUrls'
                
                createdAt:
                    type: string
                    format: date-time
        
        
        QuerySchedule:
            type: object
            properties:
                second:
                    type: string
                minute:
                    type: string
                hour:
                    type: string
                dayOfMonth:
                    type: string
                month:
                    type: string
                dayOfWeek:
                    type: string
        
        EPCISQuery:
            type: array
            items:
                type: object
            externalDocs:
                url: https://...
                description: Filter EPCIS events by properties using the [EPCIS query JSON-Schema](section EPCIS query language)
        
        ScheduledSubscriptionCallbackUrls:
            description: A subscription for periodic updates
            type: object
            properties:
                scheduleUrl:
                    type: string
                    format: uri
                errorUrl:
                    type: string
                    format: uri
        
        TriggeredSubscriptionCallbackUrls:
            description: A subscription that listens for events that match a query rule
            type: object
            properties:
                triggerUrl:
                    type: string
                    format: uri
        
        
        AllEvent:
            type: string
            description: A virtual EPCIS event superset.
            enum: [all]
        
        EPCISEventTypes:
            type: string
            description: The four types of EPCIS events.
            enum:
                - ObjectEvents
                - AggregationEvents
                - TransformationEvents
                - TransactionEvents
                - all
        
        
        
        
        uri:
            type: string
            format: uri
        
        time:
            type: string
            format: "date-time"
        
        decimal:
            type: number
        
        boolean:
            type: boolean
        
        hexBinary:
            type: string
            pattern: "^[A-Fa-f0-9]+$"
        
        action:
            type: string
            enum:
                - OBSERVE
                - ADD
                - DELETE
        
        epcList:
            type: array
            items:
                "$ref": "#/components/schemas/uri"
        
        quantityList:
            type: array
            items:
                "$ref": "#/components/schemas/quantityElement"
        
        uom:
            type: string
            pattern: "^[A-Z0-9]{2,3}$"
        
        eventID:
            "$ref": "#/components/schemas/uri"
        
        errorDeclaration:
            type: object
            properties:
                declarationtime:
                    "$ref": "#/components/schemas/time"
                reason:
                    "$ref": "#/components/schemas/uri"
                correctiveEventIDs:
                    type: array
                    items:
                        "$ref": "#/components/schemas/eventID"
        
        quantityElement:
            type: object
            properties:
                epcClass:
                    "$ref": "#/components/schemas/uri"
                quantity:
                    "$ref": "#/components/schemas/decimal"
                uom:
                    "$ref": "#/components/schemas/uom"
            required:
                - epcClass
        
        bizTransaction:
            type: object
            properties:
                type:
                    "$ref": "#/components/schemas/uri"
                bizTransaction:
                    "$ref": "#/components/schemas/uri"
            required:
                - bizTransaction
        
        source:
            type: object
            properties:
                type:
                    "$ref": "#/components/schemas/uri"
                source:
                    "$ref": "#/components/schemas/uri"
            required:
                - type
        
        destination:
            type: object
            properties:
                type:
                    "$ref": "#/components/schemas/uri"
                destination:
                    "$ref": "#/components/schemas/uri"
            required:
                - type
        
        sensorElement:
            type: object
            properties:
                sensorMetaData:
                    "$ref": "#/components/schemas/sensorMetaData"
                sensorReport:
                    "$ref": "#/components/schemas/sensorReportList"
            required:
                - sensorReport
        
        sensorReportList:
            type: array
            items:
                "$ref": "#/components/schemas/sensorReport"
        
        sensorReport:
            type: object
            properties:
                type:
                    "$ref": "#/components/schemas/uri"
                value:
                    "$ref": "#/components/schemas/decimal"
                stringValue:
                    "$ref": "#/components/schemas/string"
                uriValue:
                    "$ref": "#/components/schemas/uri"
                booleanValue:
                    "$ref": "#/components/schemas/boolean"
                hexBinaryValue:
                    "$ref": "#/components/schemas/hexBinary"
                uom:
                    "$ref": "#/components/schemas/string"
                minValue:
                    "$ref": "#/components/schemas/decimal"
                maxValue:
                    "$ref": "#/components/schemas/decimal"
                sDev:
                    "$ref": "#/components/schemas/decimal"
                chemicalSubstance:
                    "$ref": "#/components/schemas/uri"
                microorganism:
                    "$ref": "#/components/schemas/uri"
                deviceID:
                    "$ref": "#/components/schemas/uri"
                deviceMetaData:
                    "$ref": "#/components/schemas/uri"
                rawData:
                    "$ref": "#/components/schemas/uri"
                time:
                    "$ref": "#/components/schemas/time"
                meanValue:
                    "$ref": "#/components/schemas/decimal"
                percRank:
                    "$ref": "#/components/schemas/decimal"
                percValue:
                    "$ref": "#/components/schemas/decimal"
                dataProcessingMethod:
                    "$ref": "#/components/schemas/uri"
                bizRules:
                    "$ref": "#/components/schemas/uri"
            required:
                - type
        
        sensorMetaData:
            type: object
            properties:
                time:
                    "$ref": "#/components/schemas/time"
                deviceID:
                    "$ref": "#/components/schemas/uri"
                deviceMetaData:
                    "$ref": "#/components/schemas/uri"
                rawData:
                    "$ref": "#/components/schemas/uri"
                startTime:
                    "$ref": "#/components/schemas/time"
                endTime:
                    "$ref": "#/components/schemas/time"
                dataProcessingMethod:
                    "$ref": "#/components/schemas/uri"
                bizRules:
                    "$ref": "#/components/schemas/uri"
        
        string:
            type: string
        
        ilmd:
            type: object
        
        vocabulary:
            type: object
            properties:
                type:
                    "$ref": "#/components/schemas/uri"
                vocabularyElementList:
                    type: array
                    items:
                        "$ref": "#/components/schemas/vocabularyElement"
            required:
                - type
        
        vocabularyElement:
            type: object
            properties:
                id:
                    "$ref": "#/components/schemas/uri"
                attributes:
                    type: array
                    items:
                        "$ref": "#/components/schemas/attribute"
                children:
                    type: array
                    items:
                        "$ref": "#/components/schemas/uri"
            required:
                - id
        
        attribute:
            type: object
            properties:
                id:
                    "$ref": "#/components/schemas/uri"
                attribute:
                    type: object
            required:
                - id
        
        Event:
            type: object
            properties:
                eventTime:
                    "$ref": "#/components/schemas/time"
                recordTime:
                    "$ref": "#/components/schemas/time"
                eventTimeZoneOffset:
                    type: string
                    pattern: "^(\\+|\\-)((0[0-9]|1[0-3]):([0-5][0-9])|14:00)$"
                eventID:
                    "$ref": "#/components/schemas/eventID"
                errorDeclaration:
                    "$ref": "#/components/schemas/errorDeclaration"
            required:
                - eventTime
                - eventTimeZoneOffset
        
        ObjectEvent:
            allOf:
                - "$ref": "#/components/schemas/Event"
                -   type: object
                    properties:
                        isA:
                            type: string
                            pattern: "^ObjectEvent$"
                        epcList:
                            "$ref": "#/components/schemas/epcList"
                        quantityList:
                            "$ref": "#/components/schemas/quantityList"
                        action:
                            "$ref": "#/components/schemas/action"
                        bizStep:
                            "$ref": "#/components/schemas/uri"
                        disposition:
                            "$ref": "#/components/schemas/uri"
                        readPoint:
                            "$ref": "#/components/schemas/uri"
                        bizLocation:
                            "$ref": "#/components/schemas/uri"
                        bizTransactionList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/bizTransaction"
                        sourceList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/source"
                        destinationList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/destination"
                        sensorElementList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/sensorElement"
                        ilmd:
                            "$ref": "#/components/schemas/ilmd"
        
        AggregationEvent:
            allOf:
                -   "$ref": "#/components/schemas/Event"
                -   type: object
                    properties:
                        isA:
                            type: string
                            pattern: "^AggregationEvent$"
                        parentID:
                            "$ref": "#/components/schemas/uri"
                        childEPCs:
                            type: array
                            items:
                                "$ref": "#/components/schemas/uri"
                        childQuantityList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/quantityElement"
                        action:
                            "$ref": "#/components/schemas/action"
                        bizStep:
                            "$ref": "#/components/schemas/uri"
                        disposition:
                            "$ref": "#/components/schemas/uri"
                        readPoint:
                            "$ref": "#/components/schemas/uri"
                        bizLocation:
                            "$ref": "#/components/schemas/uri"
                        bizTransactionList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/bizTransaction"
                        sourceList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/source"
                        destinationList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/destination"
                        sensorElementList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/sensorElement"
                    required:
                        - isA
                        - action
                -   anyOf:
                        -   properties:
                                childEPCs:
                                    minItems: 1
                            required:
                                - childEPCs
                        -   properties:
                                childQuantityList:
                                    minItems: 1
                            required:
                                - childQuantityList
                        -   properties:
                                action:
                                    pattern: "^DELETE$"
        
        
        TransformationEvent:
            allOf:
                -   "$ref": "#/components/schemas/Event"
                -   type: object
                    properties:
                        isA:
                            type: string
                            pattern: "^TransformationEvent$"
                        inputEPCList:
                            "$ref": "#/components/schemas/epcList"
                        inputQuantityList:
                            "$ref": "#/components/schemas/quantityList"
                        outputEPCList:
                            "$ref": "#/components/schemas/epcList"
                        outputQuantityList:
                            "$ref": "#/components/schemas/quantityList"
                        transformationID:
                            "$ref": "#/components/schemas/uri"
                        bizStep:
                            "$ref": "#/components/schemas/uri"
                        disposition:
                            "$ref": "#/components/schemas/uri"
                        readPoint:
                            "$ref": "#/components/schemas/uri"
                        bizLocation:
                            "$ref": "#/components/schemas/uri"
                        sourceList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/source"
                        destinationList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/destination"
                        sensorElementList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/sensorElement"
                        ilmd:
                            "$ref": "#/components/schemas/ilmd"
                    required:
                        - isA
                -   anyOf:
                        -   allOf:
                                -   anyOf:
                                        -   properties:
                                                inputEPCList:
                                                    minItems: 1
                                            required:
                                                -   inputEPCList
                                        -   properties:
                                                inputQuantityList:
                                                    minItems: 1
                                            required:
                                                -   inputQuantityList
                                -   anyOf:
                                        -   properties:
                                                outputEPCList:
                                                    minItems: 1
                                            required:
                                                -   outputEPCList
                                        -   properties:
                                                outputQuantityList:
                                                    minItems: 1
                                            required:
                                                -   outputQuantityList
                        -   anyOf:
                                -   properties:
                                        inputEPCList:
                                            minItems: 1
                                    required:
                                        -   inputEPCList
                                -   properties:
                                        inputQuantityList:
                                            minItems: 1
                                    required:
                                        -   inputQuantityList
                                -   properties:
                                        outputEPCList:
                                            minItems: 1
                                    required:
                                        -   outputEPCList
                                -   properties:
                                        outputQuantityList:
                                            minItems: 1
                                    required:
                                        -   outputQuantityList
                        -   required:
                                -   transformationID
        AssociationEvent:
            deprecated: true
            allOf:
                -   "$ref": "#/components/schemas/Event"
                -   type: object
                    properties:
                        isA:
                            type: string
                            pattern: "^AssociationEvent$"
                        parentID:
                            "$ref": "#/components/schemas/uri"
                        childEPCs:
                            type: array
                            items:
                                "$ref": "#/components/schemas/uri"
                        childQuantityList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/quantityElement"
                        action:
                            "$ref": "#/components/schemas/action"
                        bizStep:
                            "$ref": "#/components/schemas/uri"
                        disposition:
                            "$ref": "#/components/schemas/uri"
                        readPoint:
                            "$ref": "#/components/schemas/uri"
                        bizLocation:
                            "$ref": "#/components/schemas/uri"
                        bizTransactionList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/bizTransaction"
                        sourceList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/source"
                        destinationList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/destination"
                        sensorElementList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/sensorElement"
                    required:
                        -   isA
                        -   action
                        -   parentID
                -   anyOf:
                        -   properties:
                                childEPCs:
                                    minItems: 1
                            required:
                                -   childEPCs
                        -   properties:
                                childQuantityList:
                                    minItems: 1
                            required:
                                -   childQuantityList
                        -   properties:
                                action:
                                    pattern: "^DELETE$"
        
        
        TransactionEvent:
            allOf:
                -   "$ref": "#/components/schemas/Event"
                -   type: object
                    properties:
                        isA:
                            type: string
                            pattern: "^TransactionEvent$"
                        bizTransactionList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/bizTransaction"
                            minItems: 1
                        parentID:
                            "$ref": "#/components/schemas/uri"
                        epcList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/uri"
                        quantityList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/quantityElement"
                        action:
                            "$ref": "#/components/schemas/action"
                        bizStep:
                            "$ref": "#/components/schemas/uri"
                        disposition:
                            "$ref": "#/components/schemas/uri"
                        readPoint:
                            "$ref": "#/components/schemas/uri"
                        bizLocation:
                            "$ref": "#/components/schemas/uri"
                        sourceList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/source"
                        destinationList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/destination"
                        sensorElementList:
                            type: array
                            items:
                                "$ref": "#/components/schemas/sensorElement"
                    required:
                        -   isA
                        -   bizTransactionList
                        -   action
                -   anyOf:
                        -   properties:
                                epcList:
                                    minItems: 0
                            required:
                                -   epcList
                        -   properties:
                                quantityList:
                                    minItems: 1
                            required:
                                -   quantityList
                        -   properties:
                                action:
                                    pattern: "^DELETE$"
        
        OnlyValidEvent:
            oneOf:
                - "$ref": "#/components/schemas/ObjectEvent"
                - "$ref": "#/components/schemas/AggregationEvent"
                - "$ref": "#/components/schemas/TransformationEvent"
                - "$ref": "#/components/schemas/AssociationEvent"
                - "$ref": "#/components/schemas/TransactionEvent"
            required:
                - "isA"
    
    
    
    parameters:
        X-EPCIS-version:
            in: header
            name: X-EPCIS-version
            description: The EPCIS version
            schema:
                type: string
                pattern: '^\d+(\.\d+)?$'
                example: "2.0"
        X-EPCIS-min:
            in: header
            name: X-EPCIS-min
            description: The lowest EPCIS version supported
            schema:
                type: string
                pattern: '^\d+(\.\d+)?$'
                example: "2.0"
        X-EPCIS-max:
            in: header
            name: X-EPCIS-max
            description: The highest EPCIS version supported
            schema:
                type: string
                pattern: '^\d+(\.\d+)?$'
        X-CBV-version:
            in: header
            name: X-CBV-version
            description: The core business vocabulary version
            schema:
                type: string
        X-EPCIS-extensions:
            in: header
            name: X-EPCIS-extensions
            description: Specific EPCIS extensions supported (e.g. for FIT)
            schema:
                type: array
                items:
                    type: string
        X-CBV-extensions:
            in: header
            name: X-CBV-extensions
            description: Specific CBV extensions supported (e.g. for fish, rail, FIT)
            schema:
                type: array
                items:
                    type: string
        X-Vendor-version:
            in: header
            name: X-Vendor-version
            description: A versioning scheme that can be freely chosen by the vendor
            schema:
                type: array
                items:
                    type: string
                uniqueItems: true
        X-Resources-vocabulary:
            in: header
            name: X-Resources-vocabulary
            description: An optional header to specify the vocabuary for the top-level endpoints
            schema:
                type: array
                items:
                    type: string
                uniqueItems: true
